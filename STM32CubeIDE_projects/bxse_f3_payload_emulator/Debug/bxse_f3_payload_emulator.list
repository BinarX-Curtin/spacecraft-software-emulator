
bxse_f3_payload_emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800306c  0800306c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800306c  0800306c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800306c  0800306c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000010c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a393  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000144d  00000000  00000000  0002a3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  0002b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  0002c018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c3a  00000000  00000000  0002c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a05c  00000000  00000000  000463d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098d14  00000000  00000000  0005042e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e9142  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002044  00000000  00000000  000e9194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ffc 	.word	0x08002ffc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ffc 	.word	0x08002ffc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80001cc:	b08c      	sub	sp, #48	; 0x30
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa64 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f868 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f90c 	bl	80003f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 f8da 	bl	8000394 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001e0:	f000 f89e 	bl	8000320 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2110      	movs	r1, #16
 80001e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ec:	f000 fd38 	bl	8000c60 <HAL_GPIO_WritePin>

  uint16_t data_size = 200;
 80001f0:	23c8      	movs	r3, #200	; 0xc8
 80001f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint8_t buffer[data_size];
 80001f4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80001f6:	460b      	mov	r3, r1
 80001f8:	3b01      	subs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80001fc:	b28b      	uxth	r3, r1
 80001fe:	2200      	movs	r2, #0
 8000200:	4698      	mov	r8, r3
 8000202:	4691      	mov	r9, r2
 8000204:	f04f 0200 	mov.w	r2, #0
 8000208:	f04f 0300 	mov.w	r3, #0
 800020c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000210:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000214:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000218:	b28b      	uxth	r3, r1
 800021a:	2200      	movs	r2, #0
 800021c:	461c      	mov	r4, r3
 800021e:	4615      	mov	r5, r2
 8000220:	f04f 0200 	mov.w	r2, #0
 8000224:	f04f 0300 	mov.w	r3, #0
 8000228:	00eb      	lsls	r3, r5, #3
 800022a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800022e:	00e2      	lsls	r2, r4, #3
 8000230:	460b      	mov	r3, r1
 8000232:	3307      	adds	r3, #7
 8000234:	08db      	lsrs	r3, r3, #3
 8000236:	00db      	lsls	r3, r3, #3
 8000238:	ebad 0d03 	sub.w	sp, sp, r3
 800023c:	466b      	mov	r3, sp
 800023e:	3300      	adds	r3, #0
 8000240:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t random_msg[] = "This is the random payload data";
 8000242:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <main+0xd8>)
 8000244:	463c      	mov	r4, r7
 8000246:	461d      	mov	r5, r3
 8000248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(uint16_t i=0; i<sizeof(random_msg); i++){
 8000254:	2300      	movs	r3, #0
 8000256:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000258:	e00a      	b.n	8000270 <main+0xa8>
	  buffer[i] = random_msg[i];
 800025a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800025c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800025e:	3230      	adds	r2, #48	; 0x30
 8000260:	443a      	add	r2, r7
 8000262:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 8000266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000268:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<sizeof(random_msg); i++){
 800026a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800026c:	3301      	adds	r3, #1
 800026e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000270:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000272:	2b1f      	cmp	r3, #31
 8000274:	d9f1      	bls.n	800025a <main+0x92>
  }

  HAL_Delay(30);
 8000276:	201e      	movs	r0, #30
 8000278:	f000 fa76 	bl	8000768 <HAL_Delay>
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_SET);
 800027c:	2201      	movs	r2, #1
 800027e:	2110      	movs	r1, #16
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000284:	f000 fcec 	bl	8000c60 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi1, buffer, data_size, HAL_MAX_DELAY);
 8000288:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800028a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800028e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000290:	4804      	ldr	r0, [pc, #16]	; (80002a4 <main+0xdc>)
 8000292:	f002 f814 	bl	80022be <HAL_SPI_Transmit>
 8000296:	4603      	mov	r3, r0
 8000298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0xd4>
 800029e:	bf00      	nop
 80002a0:	08003014 	.word	0x08003014
 80002a4:	20000028 	.word	0x20000028

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	; 0x40
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fe98 	bl	8002fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2310      	movs	r3, #16
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fcd6 	bl	8000c90 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ea:	f000 f8c1 	bl	8000470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 fd00 	bl	8001d0c <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000312:	f000 f8ad 	bl	8000470 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3740      	adds	r7, #64	; 0x40
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <MX_SPI1_Init+0x6c>)
 8000326:	4a1a      	ldr	r2, [pc, #104]	; (8000390 <MX_SPI1_Init+0x70>)
 8000328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800032a:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_SPI1_Init+0x6c>)
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000330:	4b16      	ldr	r3, [pc, #88]	; (800038c <MX_SPI1_Init+0x6c>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_SPI1_Init+0x6c>)
 8000338:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800033c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <MX_SPI1_Init+0x6c>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_SPI1_Init+0x6c>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <MX_SPI1_Init+0x6c>)
 800034c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000350:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_SPI1_Init+0x6c>)
 8000354:	2200      	movs	r2, #0
 8000356:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_SPI1_Init+0x6c>)
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_SPI1_Init+0x6c>)
 8000360:	2200      	movs	r2, #0
 8000362:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_SPI1_Init+0x6c>)
 8000366:	2207      	movs	r2, #7
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_SPI1_Init+0x6c>)
 800036c:	2200      	movs	r2, #0
 800036e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_SPI1_Init+0x6c>)
 8000372:	2200      	movs	r2, #0
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_SPI1_Init+0x6c>)
 8000378:	f001 fefe 	bl	8002178 <HAL_SPI_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000382:	f000 f875 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000028 	.word	0x20000028
 8000390:	40013000 	.word	0x40013000

08000394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_USART2_UART_Init+0x58>)
 800039a:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <MX_USART2_UART_Init+0x5c>)
 800039c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800039e:	4b13      	ldr	r3, [pc, #76]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003d8:	f002 fa4a 	bl	8002870 <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003e2:	f000 f845 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000008c 	.word	0x2000008c
 80003f0:	40004400 	.word	0x40004400

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_GPIO_Init+0x78>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a17      	ldr	r2, [pc, #92]	; (800046c <MX_GPIO_Init+0x78>)
 8000410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_GPIO_Init+0x78>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_GPIO_Init+0x78>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a11      	ldr	r2, [pc, #68]	; (800046c <MX_GPIO_Init+0x78>)
 8000428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_GPIO_Init+0x78>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2110      	movs	r1, #16
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f000 fc0d 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PL_Pin */
  GPIO_InitStruct.Pin = PL_Pin;
 8000446:	2310      	movs	r3, #16
 8000448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PL_GPIO_Port, &GPIO_InitStruct);
 8000456:	f107 030c 	add.w	r3, r7, #12
 800045a:	4619      	mov	r1, r3
 800045c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000460:	f000 fa8c 	bl	800097c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	e7fe      	b.n	8000478 <Error_Handler+0x8>
	...

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <HAL_MspInit+0x44>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <HAL_MspInit+0x44>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <HAL_MspInit+0x44>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <HAL_MspInit+0x44>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <HAL_MspInit+0x44>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_MspInit+0x44>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a17      	ldr	r2, [pc, #92]	; (8000540 <HAL_SPI_MspInit+0x7c>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d128      	bne.n	8000538 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <HAL_SPI_MspInit+0x80>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a16      	ldr	r2, [pc, #88]	; (8000544 <HAL_SPI_MspInit+0x80>)
 80004ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <HAL_SPI_MspInit+0x80>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_SPI_MspInit+0x80>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a10      	ldr	r2, [pc, #64]	; (8000544 <HAL_SPI_MspInit+0x80>)
 8000504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_SPI_MspInit+0x80>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000516:	23e0      	movs	r3, #224	; 0xe0
 8000518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000522:	2303      	movs	r3, #3
 8000524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000526:	2305      	movs	r3, #5
 8000528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4619      	mov	r1, r3
 8000530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000534:	f000 fa22 	bl	800097c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3728      	adds	r7, #40	; 0x28
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40013000 	.word	0x40013000
 8000544:	40021000 	.word	0x40021000

08000548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <HAL_UART_MspInit+0x80>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d129      	bne.n	80005be <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800056a:	4b18      	ldr	r3, [pc, #96]	; (80005cc <HAL_UART_MspInit+0x84>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	4a17      	ldr	r2, [pc, #92]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000574:	61d3      	str	r3, [r2, #28]
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800059a:	f248 0304 	movw	r3, #32772	; 0x8004
 800059e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ac:	2307      	movs	r3, #7
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 f9df 	bl	800097c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40004400 	.word	0x40004400
 80005cc:	40021000 	.word	0x40021000

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <NMI_Handler+0x4>

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <MemManage_Handler+0x4>

080005e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <UsageFault_Handler+0x4>

080005ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 f884 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <SystemInit+0x20>)
 800062a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800062e:	4a05      	ldr	r2, [pc, #20]	; (8000644 <SystemInit+0x20>)
 8000630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000680 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800064c:	f7ff ffea 	bl	8000624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	; (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	; (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000676:	f002 fc95 	bl	8002fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800067a:	f7ff fda5 	bl	80001c8 <main>

0800067e <LoopForever>:

LoopForever:
    b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000680:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800068c:	08003074 	.word	0x08003074
  ldr r2, =_sbss
 8000690:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000694:	20000118 	.word	0x20000118

08000698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_2_IRQHandler>
	...

0800069c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_Init+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <HAL_Init+0x28>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f931 	bl	8000914 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f808 	bl	80006c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b8:	f7ff fee0 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40022000 	.word	0x40022000

080006c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_InitTick+0x54>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_InitTick+0x58>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006de:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f93b 	bl	8000962 <HAL_SYSTICK_Config>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00e      	b.n	8000714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d80a      	bhi.n	8000712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000704:	f000 f911 	bl	800092a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <HAL_InitTick+0x5c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	e000      	b.n	8000714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	20000008 	.word	0x20000008
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_IncTick+0x20>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_IncTick+0x24>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_IncTick+0x24>)
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000008 	.word	0x20000008
 800074c:	20000114 	.word	0x20000114

08000750 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;  
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_GetTick+0x14>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000114 	.word	0x20000114

08000768 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff ffee 	bl	8000750 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_Delay+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffde 	bl	8000750 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000008 	.word	0x20000008

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
         );
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	; 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e0:	d301      	bcc.n	80008e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00f      	b.n	8000906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <SysTick_Config+0x40>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ee:	210f      	movs	r1, #15
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f4:	f7ff ff8e 	bl	8000814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <SysTick_Config+0x40>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <SysTick_Config+0x40>)
 8000900:	2207      	movs	r2, #7
 8000902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	e000e010 	.word	0xe000e010

08000914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff47 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff5c 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff8e 	bl	8000868 <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5d 	bl	8000814 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffb0 	bl	80008d0 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800097c:	b480      	push	{r7}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098a:	e14e      	b.n	8000c2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	2101      	movs	r1, #1
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 8140 	beq.w	8000c24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d005      	beq.n	80009bc <HAL_GPIO_Init+0x40>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 0303 	and.w	r3, r3, #3
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d130      	bne.n	8000a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f2:	2201      	movs	r2, #1
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	091b      	lsrs	r3, r3, #4
 8000a08:	f003 0201 	and.w	r2, r3, #1
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f003 0303 	and.w	r3, r3, #3
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d017      	beq.n	8000a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2203      	movs	r2, #3
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f003 0303 	and.w	r3, r3, #3
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d123      	bne.n	8000aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	08da      	lsrs	r2, r3, #3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3208      	adds	r2, #8
 8000a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	220f      	movs	r2, #15
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	691a      	ldr	r2, [r3, #16]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f003 0307 	and.w	r3, r3, #7
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	08da      	lsrs	r2, r3, #3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3208      	adds	r2, #8
 8000aa8:	6939      	ldr	r1, [r7, #16]
 8000aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0203 	and.w	r2, r3, #3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 809a 	beq.w	8000c24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af0:	4b55      	ldr	r3, [pc, #340]	; (8000c48 <HAL_GPIO_Init+0x2cc>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a54      	ldr	r2, [pc, #336]	; (8000c48 <HAL_GPIO_Init+0x2cc>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b52      	ldr	r3, [pc, #328]	; (8000c48 <HAL_GPIO_Init+0x2cc>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b08:	4a50      	ldr	r2, [pc, #320]	; (8000c4c <HAL_GPIO_Init+0x2d0>)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	3302      	adds	r3, #2
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b32:	d013      	beq.n	8000b5c <HAL_GPIO_Init+0x1e0>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a46      	ldr	r2, [pc, #280]	; (8000c50 <HAL_GPIO_Init+0x2d4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d00d      	beq.n	8000b58 <HAL_GPIO_Init+0x1dc>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a45      	ldr	r2, [pc, #276]	; (8000c54 <HAL_GPIO_Init+0x2d8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x1d8>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a44      	ldr	r2, [pc, #272]	; (8000c58 <HAL_GPIO_Init+0x2dc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_GPIO_Init+0x1d4>
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e006      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b50:	2305      	movs	r3, #5
 8000b52:	e004      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	f002 0203 	and.w	r2, r2, #3
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	4093      	lsls	r3, r2
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b6e:	4937      	ldr	r1, [pc, #220]	; (8000c4c <HAL_GPIO_Init+0x2d0>)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b7c:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <HAL_GPIO_Init+0x2e0>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ba0:	4a2e      	ldr	r2, [pc, #184]	; (8000c5c <HAL_GPIO_Init+0x2e0>)
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_GPIO_Init+0x2e0>)
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bca:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <HAL_GPIO_Init+0x2e0>)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <HAL_GPIO_Init+0x2e0>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_GPIO_Init+0x2e0>)
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_GPIO_Init+0x2e0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_GPIO_Init+0x2e0>)
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa22 f303 	lsr.w	r3, r2, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f47f aea9 	bne.w	800098c <HAL_GPIO_Init+0x10>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	48000800 	.word	0x48000800
 8000c58:	48000c00 	.word	0x48000c00
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c7c:	e002      	b.n	8000c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ca0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f001 b823 	b.w	8001cfc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 817d 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ccc:	4bbc      	ldr	r3, [pc, #752]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d00c      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd8:	4bb9      	ldr	r3, [pc, #740]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d15c      	bne.n	8000d9e <HAL_RCC_OscConfig+0x10e>
 8000ce4:	4bb6      	ldr	r3, [pc, #728]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf0:	d155      	bne.n	8000d9e <HAL_RCC_OscConfig+0x10e>
 8000cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cfe:	fa93 f3a3 	rbit	r3, r3
 8000d02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0a:	fab3 f383 	clz	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	095b      	lsrs	r3, r3, #5
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d102      	bne.n	8000d24 <HAL_RCC_OscConfig+0x94>
 8000d1e:	4ba8      	ldr	r3, [pc, #672]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	e015      	b.n	8000d50 <HAL_RCC_OscConfig+0xc0>
 8000d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d30:	fa93 f3a3 	rbit	r3, r3
 8000d34:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d40:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d44:	fa93 f3a3 	rbit	r3, r3
 8000d48:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d4c:	4b9c      	ldr	r3, [pc, #624]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d54:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d58:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d5c:	fa92 f2a2 	rbit	r2, r2
 8000d60:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d64:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	f002 021f 	and.w	r2, r2, #31
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 811f 	beq.w	8000fc4 <HAL_RCC_OscConfig+0x334>
 8000d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8116 	bne.w	8000fc4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f000 bfaf 	b.w	8001cfc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dae:	d106      	bne.n	8000dbe <HAL_RCC_OscConfig+0x12e>
 8000db0:	4b83      	ldr	r3, [pc, #524]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a82      	ldr	r2, [pc, #520]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e036      	b.n	8000e2c <HAL_RCC_OscConfig+0x19c>
 8000dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10c      	bne.n	8000de8 <HAL_RCC_OscConfig+0x158>
 8000dce:	4b7c      	ldr	r3, [pc, #496]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7b      	ldr	r2, [pc, #492]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b79      	ldr	r3, [pc, #484]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a78      	ldr	r2, [pc, #480]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e021      	b.n	8000e2c <HAL_RCC_OscConfig+0x19c>
 8000de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df8:	d10c      	bne.n	8000e14 <HAL_RCC_OscConfig+0x184>
 8000dfa:	4b71      	ldr	r3, [pc, #452]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a70      	ldr	r2, [pc, #448]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4b6e      	ldr	r3, [pc, #440]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a6d      	ldr	r2, [pc, #436]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e00b      	b.n	8000e2c <HAL_RCC_OscConfig+0x19c>
 8000e14:	4b6a      	ldr	r3, [pc, #424]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a69      	ldr	r2, [pc, #420]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b67      	ldr	r3, [pc, #412]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a66      	ldr	r2, [pc, #408]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e2c:	4b64      	ldr	r3, [pc, #400]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	f023 020f 	bic.w	r2, r3, #15
 8000e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	495f      	ldr	r1, [pc, #380]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d059      	beq.n	8000f0a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fc7b 	bl	8000750 <HAL_GetTick>
 8000e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	e00a      	b.n	8000e76 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fc76 	bl	8000750 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b64      	cmp	r3, #100	; 0x64
 8000e6e:	d902      	bls.n	8000e76 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	f000 bf43 	b.w	8001cfc <HAL_RCC_OscConfig+0x106c>
 8000e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	095b      	lsrs	r3, r3, #5
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d102      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x218>
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	e015      	b.n	8000ed4 <HAL_RCC_OscConfig+0x244>
 8000ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000eb4:	fa93 f3a3 	rbit	r3, r3
 8000eb8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ec4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ec8:	fa93 f3a3 	rbit	r3, r3
 8000ecc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ed8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000edc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ee0:	fa92 f2a2 	rbit	r2, r2
 8000ee4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ee8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000eec:	fab2 f282 	clz	r2, r2
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	f042 0220 	orr.w	r2, r2, #32
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	f002 021f 	and.w	r2, r2, #31
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f202 	lsl.w	r2, r1, r2
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0ab      	beq.n	8000e60 <HAL_RCC_OscConfig+0x1d0>
 8000f08:	e05d      	b.n	8000fc6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fc21 	bl	8000750 <HAL_GetTick>
 8000f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f12:	e00a      	b.n	8000f2a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fc1c 	bl	8000750 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d902      	bls.n	8000f2a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	f000 bee9 	b.w	8001cfc <HAL_RCC_OscConfig+0x106c>
 8000f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f42:	fab3 f383 	clz	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	095b      	lsrs	r3, r3, #5
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d102      	bne.n	8000f5c <HAL_RCC_OscConfig+0x2cc>
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	e015      	b.n	8000f88 <HAL_RCC_OscConfig+0x2f8>
 8000f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f60:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f74:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f8c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f90:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f94:	fa92 f2a2 	rbit	r2, r2
 8000f98:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f9c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fa0:	fab2 f282 	clz	r2, r2
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	f042 0220 	orr.w	r2, r2, #32
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	f002 021f 	and.w	r2, r2, #31
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1ab      	bne.n	8000f14 <HAL_RCC_OscConfig+0x284>
 8000fbc:	e003      	b.n	8000fc6 <HAL_RCC_OscConfig+0x336>
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 817d 	beq.w	80012d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fdc:	4ba6      	ldr	r3, [pc, #664]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00b      	beq.n	8001000 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe8:	4ba3      	ldr	r3, [pc, #652]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d172      	bne.n	80010da <HAL_RCC_OscConfig+0x44a>
 8000ff4:	4ba0      	ldr	r3, [pc, #640]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d16c      	bne.n	80010da <HAL_RCC_OscConfig+0x44a>
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001012:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	fab3 f383 	clz	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	095b      	lsrs	r3, r3, #5
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <HAL_RCC_OscConfig+0x3a0>
 800102a:	4b93      	ldr	r3, [pc, #588]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	e013      	b.n	8001058 <HAL_RCC_OscConfig+0x3c8>
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001048:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001054:	4b88      	ldr	r3, [pc, #544]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	2202      	movs	r2, #2
 800105a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800105e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001062:	fa92 f2a2 	rbit	r2, r2
 8001066:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800106a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800106e:	fab2 f282 	clz	r2, r2
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f002 021f 	and.w	r2, r2, #31
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00a      	beq.n	80010a0 <HAL_RCC_OscConfig+0x410>
 800108a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800108e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d002      	beq.n	80010a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	f000 be2e 	b.w	8001cfc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b75      	ldr	r3, [pc, #468]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	21f8      	movs	r1, #248	; 0xf8
 80010b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010be:	fa91 f1a1 	rbit	r1, r1
 80010c2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010ca:	fab1 f181 	clz	r1, r1
 80010ce:	b2c9      	uxtb	r1, r1
 80010d0:	408b      	lsls	r3, r1
 80010d2:	4969      	ldr	r1, [pc, #420]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d8:	e0fd      	b.n	80012d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8088 	beq.w	80011fc <HAL_RCC_OscConfig+0x56c>
 80010ec:	2301      	movs	r3, #1
 80010ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010f6:	fa93 f3a3 	rbit	r3, r3
 80010fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800110c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	461a      	mov	r2, r3
 8001114:	2301      	movs	r3, #1
 8001116:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fb1a 	bl	8000750 <HAL_GetTick>
 800111c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	e00a      	b.n	8001138 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff fb15 	bl	8000750 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d902      	bls.n	8001138 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	f000 bde2 	b.w	8001cfc <HAL_RCC_OscConfig+0x106c>
 8001138:	2302      	movs	r3, #2
 800113a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800114a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	095b      	lsrs	r3, r3, #5
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <HAL_RCC_OscConfig+0x4d8>
 8001162:	4b45      	ldr	r3, [pc, #276]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	e013      	b.n	8001190 <HAL_RCC_OscConfig+0x500>
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001180:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800118c:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	2202      	movs	r2, #2
 8001192:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001196:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800119a:	fa92 f2a2 	rbit	r2, r2
 800119e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011a6:	fab2 f282 	clz	r2, r2
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	f042 0220 	orr.w	r2, r2, #32
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	f002 021f 	and.w	r2, r2, #31
 80011b6:	2101      	movs	r1, #1
 80011b8:	fa01 f202 	lsl.w	r2, r1, r2
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0af      	beq.n	8001122 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	21f8      	movs	r1, #248	; 0xf8
 80011d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011e0:	fa91 f1a1 	rbit	r1, r1
 80011e4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011ec:	fab1 f181 	clz	r1, r1
 80011f0:	b2c9      	uxtb	r1, r1
 80011f2:	408b      	lsls	r3, r1
 80011f4:	4920      	ldr	r1, [pc, #128]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
 80011fa:	e06c      	b.n	80012d6 <HAL_RCC_OscConfig+0x646>
 80011fc:	2301      	movs	r3, #1
 80011fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800120e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800121c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	461a      	mov	r2, r3
 8001224:	2300      	movs	r3, #0
 8001226:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fa92 	bl	8000750 <HAL_GetTick>
 800122c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fa8d 	bl	8000750 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d902      	bls.n	8001248 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	f000 bd5a 	b.w	8001cfc <HAL_RCC_OscConfig+0x106c>
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800125a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	095b      	lsrs	r3, r3, #5
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d104      	bne.n	800127c <HAL_RCC_OscConfig+0x5ec>
 8001272:	4b01      	ldr	r3, [pc, #4]	; (8001278 <HAL_RCC_OscConfig+0x5e8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	e015      	b.n	80012a4 <HAL_RCC_OscConfig+0x614>
 8001278:	40021000 	.word	0x40021000
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001294:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012a0:	4bc8      	ldr	r3, [pc, #800]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	2202      	movs	r2, #2
 80012a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f042 0220 	orr.w	r2, r2, #32
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	f002 021f 	and.w	r2, r2, #31
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ad      	bne.n	8001232 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8110 	beq.w	800150c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d079      	beq.n	80013f0 <HAL_RCC_OscConfig+0x760>
 80012fc:	2301      	movs	r3, #1
 80012fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800130e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	4bab      	ldr	r3, [pc, #684]	; (80015c8 <HAL_RCC_OscConfig+0x938>)
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	461a      	mov	r2, r3
 8001322:	2301      	movs	r3, #1
 8001324:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fa13 	bl	8000750 <HAL_GetTick>
 800132a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	e00a      	b.n	8001346 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fa0e 	bl	8000750 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d902      	bls.n	8001346 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	f000 bcdb 	b.w	8001cfc <HAL_RCC_OscConfig+0x106c>
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001350:	fa93 f3a3 	rbit	r3, r3
 8001354:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001360:	2202      	movs	r2, #2
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001368:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fa93 f2a3 	rbit	r2, r3
 8001372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001384:	2202      	movs	r2, #2
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fa93 f2a3 	rbit	r2, r3
 8001396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800139e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a0:	4b88      	ldr	r3, [pc, #544]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 80013a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013ac:	2102      	movs	r1, #2
 80013ae:	6019      	str	r1, [r3, #0]
 80013b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	fa93 f1a3 	rbit	r1, r3
 80013be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013c6:	6019      	str	r1, [r3, #0]
  return result;
 80013c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0a0      	beq.n	8001330 <HAL_RCC_OscConfig+0x6a0>
 80013ee:	e08d      	b.n	800150c <HAL_RCC_OscConfig+0x87c>
 80013f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001400:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fa93 f2a3 	rbit	r2, r3
 800140a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001412:	601a      	str	r2, [r3, #0]
  return result;
 8001414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001418:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800141c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCC_OscConfig+0x938>)
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	2300      	movs	r3, #0
 8001430:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff f98d 	bl	8000750 <HAL_GetTick>
 8001436:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff f988 	bl	8000750 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d902      	bls.n	8001452 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	f000 bc55 	b.w	8001cfc <HAL_RCC_OscConfig+0x106c>
 8001452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001456:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800145a:	2202      	movs	r2, #2
 800145c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fa93 f2a3 	rbit	r2, r3
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800147e:	2202      	movs	r2, #2
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	fa93 f2a3 	rbit	r2, r3
 8001490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014a2:	2202      	movs	r2, #2
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fa93 f2a3 	rbit	r2, r3
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 80014c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ca:	2102      	movs	r1, #2
 80014cc:	6019      	str	r1, [r3, #0]
 80014ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	fa93 f1a3 	rbit	r1, r3
 80014dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014e4:	6019      	str	r1, [r3, #0]
  return result;
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d197      	bne.n	800143c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 81a1 	beq.w	8001864 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d116      	bne.n	8001562 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153e:	61d3      	str	r3, [r2, #28]
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800155a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800155c:	2301      	movs	r3, #1
 800155e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_RCC_OscConfig+0x93c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d11a      	bne.n	80015a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_RCC_OscConfig+0x93c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a16      	ldr	r2, [pc, #88]	; (80015cc <HAL_RCC_OscConfig+0x93c>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff f8e9 	bl	8000750 <HAL_GetTick>
 800157e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	e009      	b.n	8001598 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001584:	f7ff f8e4 	bl	8000750 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b64      	cmp	r3, #100	; 0x64
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e3b1      	b.n	8001cfc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_RCC_OscConfig+0x93c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ef      	beq.n	8001584 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d10d      	bne.n	80015d0 <HAL_RCC_OscConfig+0x940>
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a02      	ldr	r2, [pc, #8]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	e03c      	b.n	800163c <HAL_RCC_OscConfig+0x9ac>
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	10908120 	.word	0x10908120
 80015cc:	40007000 	.word	0x40007000
 80015d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x96a>
 80015e0:	4bc1      	ldr	r3, [pc, #772]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4ac0      	ldr	r2, [pc, #768]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	4bbe      	ldr	r3, [pc, #760]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4abd      	ldr	r2, [pc, #756]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	e020      	b.n	800163c <HAL_RCC_OscConfig+0x9ac>
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x994>
 800160a:	4bb7      	ldr	r3, [pc, #732]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4ab6      	ldr	r2, [pc, #728]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6213      	str	r3, [r2, #32]
 8001616:	4bb4      	ldr	r3, [pc, #720]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4ab3      	ldr	r2, [pc, #716]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6213      	str	r3, [r2, #32]
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x9ac>
 8001624:	4bb0      	ldr	r3, [pc, #704]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4aaf      	ldr	r2, [pc, #700]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	4bad      	ldr	r3, [pc, #692]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4aac      	ldr	r2, [pc, #688]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8081 	beq.w	8001750 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff f87f 	bl	8000750 <HAL_GetTick>
 8001652:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff f87a 	bl	8000750 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	; 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e345      	b.n	8001cfc <HAL_RCC_OscConfig+0x106c>
 8001670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001674:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001678:	2202      	movs	r2, #2
 800167a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fa93 f2a3 	rbit	r2, r3
 800168a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800169c:	2202      	movs	r2, #2
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f2a3 	rbit	r2, r3
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016b6:	601a      	str	r2, [r3, #0]
  return result;
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	095b      	lsrs	r3, r3, #5
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d102      	bne.n	80016dc <HAL_RCC_OscConfig+0xa4c>
 80016d6:	4b84      	ldr	r3, [pc, #528]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	e013      	b.n	8001704 <HAL_RCC_OscConfig+0xa74>
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016e4:	2202      	movs	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f2a3 	rbit	r2, r3
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	4b79      	ldr	r3, [pc, #484]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001708:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800170c:	2102      	movs	r1, #2
 800170e:	6011      	str	r1, [r2, #0]
 8001710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001714:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	fa92 f1a2 	rbit	r1, r2
 800171e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001722:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001726:	6011      	str	r1, [r2, #0]
  return result;
 8001728:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800172c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	fab2 f282 	clz	r2, r2
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	f002 021f 	and.w	r2, r2, #31
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	4013      	ands	r3, r2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d084      	beq.n	8001658 <HAL_RCC_OscConfig+0x9c8>
 800174e:	e07f      	b.n	8001850 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7fe fffe 	bl	8000750 <HAL_GetTick>
 8001754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	e00b      	b.n	8001772 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7fe fff9 	bl	8000750 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e2c4      	b.n	8001cfc <HAL_RCC_OscConfig+0x106c>
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800177a:	2202      	movs	r2, #2
 800177c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f2a3 	rbit	r2, r3
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017b8:	601a      	str	r2, [r3, #0]
  return result;
 80017ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d102      	bne.n	80017de <HAL_RCC_OscConfig+0xb4e>
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	e013      	b.n	8001806 <HAL_RCC_OscConfig+0xb76>
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	4b39      	ldr	r3, [pc, #228]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800180a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800180e:	2102      	movs	r1, #2
 8001810:	6011      	str	r1, [r2, #0]
 8001812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001816:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	fa92 f1a2 	rbit	r1, r2
 8001820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001824:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001828:	6011      	str	r1, [r2, #0]
  return result;
 800182a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800182e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	fab2 f282 	clz	r2, r2
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f002 021f 	and.w	r2, r2, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d184      	bne.n	800175a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001850:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 800185e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001862:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8242 	beq.w	8001cfa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_RCC_OscConfig+0xc58>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b08      	cmp	r3, #8
 8001880:	f000 8213 	beq.w	8001caa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b02      	cmp	r3, #2
 8001892:	f040 8162 	bne.w	8001b5a <HAL_RCC_OscConfig+0xeca>
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800189e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018ba:	601a      	str	r2, [r3, #0]
  return result;
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	461a      	mov	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7fe ff38 	bl	8000750 <HAL_GetTick>
 80018e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	e00c      	b.n	8001900 <HAL_RCC_OscConfig+0xc70>
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7fe ff30 	bl	8000750 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1fd      	b.n	8001cfc <HAL_RCC_OscConfig+0x106c>
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800190c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001924:	601a      	str	r2, [r3, #0]
  return result;
 8001926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800192e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <HAL_RCC_OscConfig+0xcba>
 8001944:	4bb0      	ldr	r3, [pc, #704]	; (8001c08 <HAL_RCC_OscConfig+0xf78>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e027      	b.n	800199a <HAL_RCC_OscConfig+0xd0a>
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4b9c      	ldr	r3, [pc, #624]	; (8001c08 <HAL_RCC_OscConfig+0xf78>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019a6:	6011      	str	r1, [r2, #0]
 80019a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	fa92 f1a2 	rbit	r1, r2
 80019b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019be:	6011      	str	r1, [r2, #0]
  return result;
 80019c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	fab2 f282 	clz	r2, r2
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f042 0220 	orr.w	r2, r2, #32
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f002 021f 	and.w	r2, r2, #31
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d182      	bne.n	80018ec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_OscConfig+0xf78>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	497f      	ldr	r1, [pc, #508]	; (8001c08 <HAL_RCC_OscConfig+0xf78>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	fa93 f2a3 	rbit	r2, r3
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a32:	601a      	str	r2, [r3, #0]
  return result;
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a3c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3e:	fab3 f383 	clz	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2301      	movs	r3, #1
 8001a52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7fe fe7c 	bl	8000750 <HAL_GetTick>
 8001a58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5c:	e009      	b.n	8001a72 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7fe fe77 	bl	8000750 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e144      	b.n	8001cfc <HAL_RCC_OscConfig+0x106c>
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	fa93 f2a3 	rbit	r2, r3
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a96:	601a      	str	r2, [r3, #0]
  return result;
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001aa0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <HAL_RCC_OscConfig+0xe2c>
 8001ab6:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <HAL_RCC_OscConfig+0xf78>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	e027      	b.n	8001b0c <HAL_RCC_OscConfig+0xe7c>
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <HAL_RCC_OscConfig+0xf78>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b10:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b18:	6011      	str	r1, [r2, #0]
 8001b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	fa92 f1a2 	rbit	r1, r2
 8001b28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b2c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b30:	6011      	str	r1, [r2, #0]
  return result;
 8001b32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b36:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	fab2 f282 	clz	r2, r2
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f042 0220 	orr.w	r2, r2, #32
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f002 021f 	and.w	r2, r2, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d082      	beq.n	8001a5e <HAL_RCC_OscConfig+0xdce>
 8001b58:	e0cf      	b.n	8001cfa <HAL_RCC_OscConfig+0x106a>
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b7e:	601a      	str	r2, [r3, #0]
  return result;
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7fe fdd6 	bl	8000750 <HAL_GetTick>
 8001ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001baa:	f7fe fdd1 	bl	8000750 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e09e      	b.n	8001cfc <HAL_RCC_OscConfig+0x106c>
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001be2:	601a      	str	r2, [r3, #0]
  return result;
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d104      	bne.n	8001c0c <HAL_RCC_OscConfig+0xf7c>
 8001c02:	4b01      	ldr	r3, [pc, #4]	; (8001c08 <HAL_RCC_OscConfig+0xf78>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	e029      	b.n	8001c5c <HAL_RCC_OscConfig+0xfcc>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_RCC_OscConfig+0x1078>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c60:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c68:	6011      	str	r1, [r2, #0]
 8001c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fa92 f1a2 	rbit	r1, r2
 8001c78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c80:	6011      	str	r1, [r2, #0]
  return result;
 8001c82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f002 021f 	and.w	r2, r2, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d180      	bne.n	8001baa <HAL_RCC_OscConfig+0xf1a>
 8001ca8:	e027      	b.n	8001cfa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e01e      	b.n	8001cfc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_RCC_OscConfig+0x1078>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b09e      	sub	sp, #120	; 0x78
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e162      	b.n	8001fea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b90      	ldr	r3, [pc, #576]	; (8001f68 <HAL_RCC_ClockConfig+0x25c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d910      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b8d      	ldr	r3, [pc, #564]	; (8001f68 <HAL_RCC_ClockConfig+0x25c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	498b      	ldr	r1, [pc, #556]	; (8001f68 <HAL_RCC_ClockConfig+0x25c>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b89      	ldr	r3, [pc, #548]	; (8001f68 <HAL_RCC_ClockConfig+0x25c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e14a      	b.n	8001fea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d60:	4b82      	ldr	r3, [pc, #520]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	497f      	ldr	r1, [pc, #508]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80dc 	beq.w	8001f38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d13c      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xf6>
 8001d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d102      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xa6>
 8001dac:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	e00f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0xc6>
 8001db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	667b      	str	r3, [r7, #100]	; 0x64
 8001dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8001dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dce:	4b67      	ldr	r3, [pc, #412]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dda:	fa92 f2a2 	rbit	r2, r2
 8001dde:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001de0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0220 	orr.w	r2, r2, #32
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d17b      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0f3      	b.n	8001fea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d13c      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x178>
 8001e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d102      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x128>
 8001e2e:	4b4f      	ldr	r3, [pc, #316]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	e00f      	b.n	8001e54 <HAL_RCC_ClockConfig+0x148>
 8001e34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	647b      	str	r3, [r7, #68]	; 0x44
 8001e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e46:	643b      	str	r3, [r7, #64]	; 0x40
 8001e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e50:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e58:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e5c:	fa92 f2a2 	rbit	r2, r2
 8001e60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f002 021f 	and.w	r2, r2, #31
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d13a      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0b2      	b.n	8001fea <HAL_RCC_ClockConfig+0x2de>
 8001e84:	2302      	movs	r3, #2
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_ClockConfig+0x1a0>
 8001ea6:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e00d      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1bc>
 8001eac:	2302      	movs	r3, #2
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb8:	2302      	movs	r3, #2
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2202      	movs	r2, #2
 8001eca:	61ba      	str	r2, [r7, #24]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	fa92 f2a2 	rbit	r2, r2
 8001ed2:	617a      	str	r2, [r7, #20]
  return result;
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	fab2 f282 	clz	r2, r2
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f042 0220 	orr.w	r2, r2, #32
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f002 021f 	and.w	r2, r2, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e079      	b.n	8001fea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 0203 	bic.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	491a      	ldr	r1, [pc, #104]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f08:	f7fe fc22 	bl	8000750 <HAL_GetTick>
 8001f0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7fe fc1e 	bl	8000750 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e061      	b.n	8001fea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_ClockConfig+0x260>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 020c 	and.w	r2, r3, #12
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1eb      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_ClockConfig+0x25c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d214      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_RCC_ClockConfig+0x25c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 0207 	bic.w	r2, r3, #7
 8001f4e:	4906      	ldr	r1, [pc, #24]	; (8001f68 <HAL_RCC_ClockConfig+0x25c>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <HAL_RCC_ClockConfig+0x25c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e040      	b.n	8001fea <HAL_RCC_ClockConfig+0x2de>
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	491a      	ldr	r1, [pc, #104]	; (8001ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4912      	ldr	r1, [pc, #72]	; (8001ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fae:	f000 f829 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCC_ClockConfig+0x2e8>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fbc:	22f0      	movs	r2, #240	; 0xf0
 8001fbe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	fab2 f282 	clz	r2, r2
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	40d3      	lsrs	r3, r2
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x2ec>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fda:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <HAL_RCC_ClockConfig+0x2f0>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_RCC_ClockConfig+0x2f4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fb70 	bl	80006c8 <HAL_InitTick>
  
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3778      	adds	r7, #120	; 0x78
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08003034 	.word	0x08003034
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b08b      	sub	sp, #44	; 0x2c
 8002008:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b04      	cmp	r3, #4
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x30>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x36>
 8002032:	e03c      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002036:	623b      	str	r3, [r7, #32]
      break;
 8002038:	e03c      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002040:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002044:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	fa92 f2a2 	rbit	r2, r2
 800204c:	607a      	str	r2, [r7, #4]
  return result;
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	fab2 f282 	clz	r2, r2
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	40d3      	lsrs	r3, r2
 8002058:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	220f      	movs	r2, #15
 8002068:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	fa92 f2a2 	rbit	r2, r2
 8002070:	60fa      	str	r2, [r7, #12]
  return result;
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	fab2 f282 	clz	r2, r2
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	40d3      	lsrs	r3, r2
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	fbb2 f2f3 	udiv	r2, r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
 800209c:	e004      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	623b      	str	r3, [r7, #32]
      break;
 80020ac:	e002      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b0:	623b      	str	r3, [r7, #32]
      break;
 80020b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b4:	6a3b      	ldr	r3, [r7, #32]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	372c      	adds	r7, #44	; 0x2c
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	007a1200 	.word	0x007a1200
 80020cc:	0800304c 	.word	0x0800304c
 80020d0:	0800305c 	.word	0x0800305c
 80020d4:	003d0900 	.word	0x003d0900

080020d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020f6:	f7ff ffef 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020fa:	4601      	mov	r1, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002104:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	fa92 f2a2 	rbit	r2, r2
 8002110:	603a      	str	r2, [r7, #0]
  return result;
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	40d3      	lsrs	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x40>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	08003044 	.word	0x08003044

08002134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800213a:	f7ff ffcd 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 800213e:	4601      	mov	r1, r0
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002148:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800214c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	603a      	str	r2, [r7, #0]
  return result;
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	fab2 f282 	clz	r2, r2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	40d3      	lsrs	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	08003044 	.word	0x08003044

08002178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e095      	b.n	80022b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d108      	bne.n	80021a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800219a:	d009      	beq.n	80021b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
 80021a2:	e005      	b.n	80021b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe f97a 	bl	80004c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021f0:	d902      	bls.n	80021f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e002      	b.n	80021fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002206:	d007      	beq.n	8002218 <HAL_SPI_Init+0xa0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002210:	d002      	beq.n	8002218 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	ea42 0103 	orr.w	r1, r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	f003 0204 	and.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002294:	ea42 0103 	orr.w	r1, r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b088      	sub	sp, #32
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_SPI_Transmit+0x22>
 80022dc:	2302      	movs	r3, #2
 80022de:	e15f      	b.n	80025a0 <HAL_SPI_Transmit+0x2e2>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022e8:	f7fe fa32 	bl	8000750 <HAL_GetTick>
 80022ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
 8002300:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002302:	e148      	b.n	8002596 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_SPI_Transmit+0x52>
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002314:	e13f      	b.n	8002596 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2203      	movs	r2, #3
 800231a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	88fa      	ldrh	r2, [r7, #6]
 800232e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002360:	d10f      	bne.n	8002382 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002380:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d007      	beq.n	80023a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800239e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023a8:	d94f      	bls.n	800244a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_SPI_Transmit+0xfa>
 80023b2:	8afb      	ldrh	r3, [r7, #22]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d142      	bne.n	800243e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	1c9a      	adds	r2, r3, #2
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023dc:	e02f      	b.n	800243e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d112      	bne.n	8002412 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	881a      	ldrh	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	1c9a      	adds	r2, r3, #2
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002410:	e015      	b.n	800243e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002412:	f7fe f99d 	bl	8000750 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d803      	bhi.n	800242a <HAL_SPI_Transmit+0x16c>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d102      	bne.n	8002430 <HAL_SPI_Transmit+0x172>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d106      	bne.n	800243e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800243c:	e0ab      	b.n	8002596 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ca      	bne.n	80023de <HAL_SPI_Transmit+0x120>
 8002448:	e080      	b.n	800254c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_SPI_Transmit+0x19a>
 8002452:	8afb      	ldrh	r3, [r7, #22]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d174      	bne.n	8002542 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d912      	bls.n	8002488 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	881a      	ldrh	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	1c9a      	adds	r2, r3, #2
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b02      	subs	r3, #2
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002486:	e05c      	b.n	8002542 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	330c      	adds	r3, #12
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80024ae:	e048      	b.n	8002542 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d12b      	bne.n	8002516 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d912      	bls.n	80024ee <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	881a      	ldrh	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	1c9a      	adds	r2, r3, #2
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b02      	subs	r3, #2
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024ec:	e029      	b.n	8002542 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	330c      	adds	r3, #12
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002514:	e015      	b.n	8002542 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002516:	f7fe f91b 	bl	8000750 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d803      	bhi.n	800252e <HAL_SPI_Transmit+0x270>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800252c:	d102      	bne.n	8002534 <HAL_SPI_Transmit+0x276>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002540:	e029      	b.n	8002596 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1b1      	bne.n	80024b0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f947 	bl	80027e4 <SPI_EndRxTxTransaction>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	e003      	b.n	8002596 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800259e:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025b8:	f7fe f8ca 	bl	8000750 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025c8:	f7fe f8c2 	bl	8000750 <HAL_GetTick>
 80025cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	015b      	lsls	r3, r3, #5
 80025d4:	0d1b      	lsrs	r3, r3, #20
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025de:	e054      	b.n	800268a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e6:	d050      	beq.n	800268a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025e8:	f7fe f8b2 	bl	8000750 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d902      	bls.n	80025fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d13d      	bne.n	800267a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800260c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002616:	d111      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002620:	d004      	beq.n	800262c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262a:	d107      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002644:	d10f      	bne.n	8002666 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e017      	b.n	80026aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3b01      	subs	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d19b      	bne.n	80025e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000000 	.word	0x20000000

080026b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026ca:	f7fe f841 	bl	8000750 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80026da:	f7fe f839 	bl	8000750 <HAL_GetTick>
 80026de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	330c      	adds	r3, #12
 80026e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026e8:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00da      	lsls	r2, r3, #3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	0d1b      	lsrs	r3, r3, #20
 80026f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002700:	e060      	b.n	80027c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002708:	d107      	bne.n	800271a <SPI_WaitFifoStateUntilTimeout+0x62>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d104      	bne.n	800271a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002718:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002720:	d050      	beq.n	80027c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002722:	f7fe f815 	bl	8000750 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272e:	429a      	cmp	r2, r3
 8002730:	d902      	bls.n	8002738 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d13d      	bne.n	80027b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002746:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002750:	d111      	bne.n	8002776 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275a:	d004      	beq.n	8002766 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002764:	d107      	bne.n	8002776 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002774:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	d10f      	bne.n	80027a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800279e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e010      	b.n	80027d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4013      	ands	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d196      	bne.n	8002702 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000000 	.word	0x20000000

080027e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff ff5b 	bl	80026b8 <SPI_WaitFifoStateUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e027      	b.n	8002868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2200      	movs	r2, #0
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7ff fec0 	bl	80025a8 <SPI_WaitFlagStateUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e014      	b.n	8002868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2200      	movs	r2, #0
 8002846:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff ff34 	bl	80026b8 <SPI_WaitFifoStateUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285a:	f043 0220 	orr.w	r2, r3, #32
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e000      	b.n	8002868 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e040      	b.n	8002904 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fd fe58 	bl	8000548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2224      	movs	r2, #36	; 0x24
 800289c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f82c 	bl	800290c <UART_SetConfig>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e022      	b.n	8002904 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f956 	bl	8002b78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f9dd 	bl	8002cbc <UART_CheckIdleState>
 8002902:	4603      	mov	r3, r0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b8a      	ldr	r3, [pc, #552]	; (8002b60 <UART_SetConfig+0x254>)
 8002938:	4013      	ands	r3, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	6979      	ldr	r1, [r7, #20]
 8002940:	430b      	orrs	r3, r1
 8002942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	430a      	orrs	r2, r1
 800297c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a78      	ldr	r2, [pc, #480]	; (8002b64 <UART_SetConfig+0x258>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d120      	bne.n	80029ca <UART_SetConfig+0xbe>
 8002988:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <UART_SetConfig+0x25c>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b03      	cmp	r3, #3
 8002992:	d817      	bhi.n	80029c4 <UART_SetConfig+0xb8>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <UART_SetConfig+0x90>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029ad 	.word	0x080029ad
 80029a0:	080029b9 	.word	0x080029b9
 80029a4:	080029bf 	.word	0x080029bf
 80029a8:	080029b3 	.word	0x080029b3
 80029ac:	2300      	movs	r3, #0
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	e01d      	b.n	80029ee <UART_SetConfig+0xe2>
 80029b2:	2302      	movs	r3, #2
 80029b4:	77fb      	strb	r3, [r7, #31]
 80029b6:	e01a      	b.n	80029ee <UART_SetConfig+0xe2>
 80029b8:	2304      	movs	r3, #4
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e017      	b.n	80029ee <UART_SetConfig+0xe2>
 80029be:	2308      	movs	r3, #8
 80029c0:	77fb      	strb	r3, [r7, #31]
 80029c2:	e014      	b.n	80029ee <UART_SetConfig+0xe2>
 80029c4:	2310      	movs	r3, #16
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e011      	b.n	80029ee <UART_SetConfig+0xe2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a67      	ldr	r2, [pc, #412]	; (8002b6c <UART_SetConfig+0x260>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d102      	bne.n	80029da <UART_SetConfig+0xce>
 80029d4:	2300      	movs	r3, #0
 80029d6:	77fb      	strb	r3, [r7, #31]
 80029d8:	e009      	b.n	80029ee <UART_SetConfig+0xe2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a64      	ldr	r2, [pc, #400]	; (8002b70 <UART_SetConfig+0x264>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d102      	bne.n	80029ea <UART_SetConfig+0xde>
 80029e4:	2300      	movs	r3, #0
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e001      	b.n	80029ee <UART_SetConfig+0xe2>
 80029ea:	2310      	movs	r3, #16
 80029ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f6:	d15a      	bne.n	8002aae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80029f8:	7ffb      	ldrb	r3, [r7, #31]
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d827      	bhi.n	8002a4e <UART_SetConfig+0x142>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <UART_SetConfig+0xf8>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a29 	.word	0x08002a29
 8002a08:	08002a31 	.word	0x08002a31
 8002a0c:	08002a39 	.word	0x08002a39
 8002a10:	08002a4f 	.word	0x08002a4f
 8002a14:	08002a3f 	.word	0x08002a3f
 8002a18:	08002a4f 	.word	0x08002a4f
 8002a1c:	08002a4f 	.word	0x08002a4f
 8002a20:	08002a4f 	.word	0x08002a4f
 8002a24:	08002a47 	.word	0x08002a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a28:	f7ff fb62 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	61b8      	str	r0, [r7, #24]
        break;
 8002a2e:	e013      	b.n	8002a58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a30:	f7ff fb80 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 8002a34:	61b8      	str	r0, [r7, #24]
        break;
 8002a36:	e00f      	b.n	8002a58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a38:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <UART_SetConfig+0x268>)
 8002a3a:	61bb      	str	r3, [r7, #24]
        break;
 8002a3c:	e00c      	b.n	8002a58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a3e:	f7ff fae1 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8002a42:	61b8      	str	r0, [r7, #24]
        break;
 8002a44:	e008      	b.n	8002a58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a4a:	61bb      	str	r3, [r7, #24]
        break;
 8002a4c:	e004      	b.n	8002a58 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	77bb      	strb	r3, [r7, #30]
        break;
 8002a56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d074      	beq.n	8002b48 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	005a      	lsls	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	441a      	add	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	d916      	bls.n	8002aa8 <UART_SetConfig+0x19c>
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a80:	d212      	bcs.n	8002aa8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f023 030f 	bic.w	r3, r3, #15
 8002a8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	89fb      	ldrh	r3, [r7, #14]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	89fa      	ldrh	r2, [r7, #14]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	e04f      	b.n	8002b48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	77bb      	strb	r3, [r7, #30]
 8002aac:	e04c      	b.n	8002b48 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aae:	7ffb      	ldrb	r3, [r7, #31]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d828      	bhi.n	8002b06 <UART_SetConfig+0x1fa>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <UART_SetConfig+0x1b0>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002ae9 	.word	0x08002ae9
 8002ac4:	08002af1 	.word	0x08002af1
 8002ac8:	08002b07 	.word	0x08002b07
 8002acc:	08002af7 	.word	0x08002af7
 8002ad0:	08002b07 	.word	0x08002b07
 8002ad4:	08002b07 	.word	0x08002b07
 8002ad8:	08002b07 	.word	0x08002b07
 8002adc:	08002aff 	.word	0x08002aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae0:	f7ff fb06 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8002ae4:	61b8      	str	r0, [r7, #24]
        break;
 8002ae6:	e013      	b.n	8002b10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ae8:	f7ff fb24 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 8002aec:	61b8      	str	r0, [r7, #24]
        break;
 8002aee:	e00f      	b.n	8002b10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002af0:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <UART_SetConfig+0x268>)
 8002af2:	61bb      	str	r3, [r7, #24]
        break;
 8002af4:	e00c      	b.n	8002b10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002af6:	f7ff fa85 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8002afa:	61b8      	str	r0, [r7, #24]
        break;
 8002afc:	e008      	b.n	8002b10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b02:	61bb      	str	r3, [r7, #24]
        break;
 8002b04:	e004      	b.n	8002b10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	77bb      	strb	r3, [r7, #30]
        break;
 8002b0e:	bf00      	nop
    }

    if (pclk != 0U)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d018      	beq.n	8002b48 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	085a      	lsrs	r2, r3, #1
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	441a      	add	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d909      	bls.n	8002b44 <UART_SetConfig+0x238>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d205      	bcs.n	8002b44 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	e001      	b.n	8002b48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b54:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	efff69f3 	.word	0xefff69f3
 8002b64:	40013800 	.word	0x40013800
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40004400 	.word	0x40004400
 8002b70:	40004800 	.word	0x40004800
 8002b74:	007a1200 	.word	0x007a1200

08002b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01a      	beq.n	8002c8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c76:	d10a      	bne.n	8002c8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b098      	sub	sp, #96	; 0x60
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ccc:	f7fd fd40 	bl	8000750 <HAL_GetTick>
 8002cd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d12e      	bne.n	8002d3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f88c 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d021      	beq.n	8002d3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	e853 3f00 	ldrex	r3, [r3]
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d18:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e6      	bne.n	8002cfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e062      	b.n	8002e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d149      	bne.n	8002de0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	2200      	movs	r2, #0
 8002d56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f856 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d03c      	beq.n	8002de0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	e853 3f00 	ldrex	r3, [r3]
 8002d72:	623b      	str	r3, [r7, #32]
   return(result);
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
 8002d86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8c:	e841 2300 	strex	r3, r2, [r1]
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e6      	bne.n	8002d66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3308      	adds	r3, #8
 8002db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002db8:	61fa      	str	r2, [r7, #28]
 8002dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	69b9      	ldr	r1, [r7, #24]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e5      	bne.n	8002d98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e011      	b.n	8002e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3758      	adds	r7, #88	; 0x58
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1c:	e049      	b.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e24:	d045      	beq.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7fd fc93 	bl	8000750 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e048      	b.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d031      	beq.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d110      	bne.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f838 	bl	8002eda <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e029      	b.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8c:	d111      	bne.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f81e 	bl	8002eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e00f      	b.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d0a6      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b095      	sub	sp, #84	; 0x54
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	643b      	str	r3, [r7, #64]	; 0x40
 8002f02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e6      	bne.n	8002ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3308      	adds	r3, #8
 8002f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	e853 3f00 	ldrex	r3, [r3]
 8002f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e5      	bne.n	8002f14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d118      	bne.n	8002f82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f023 0310 	bic.w	r3, r3, #16
 8002f64:	647b      	str	r3, [r7, #68]	; 0x44
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6979      	ldr	r1, [r7, #20]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e6      	bne.n	8002f50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f96:	bf00      	nop
 8002f98:	3754      	adds	r7, #84	; 0x54
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <__libc_init_array>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	4d0d      	ldr	r5, [pc, #52]	; (8002fdc <__libc_init_array+0x38>)
 8002fa8:	4c0d      	ldr	r4, [pc, #52]	; (8002fe0 <__libc_init_array+0x3c>)
 8002faa:	1b64      	subs	r4, r4, r5
 8002fac:	10a4      	asrs	r4, r4, #2
 8002fae:	2600      	movs	r6, #0
 8002fb0:	42a6      	cmp	r6, r4
 8002fb2:	d109      	bne.n	8002fc8 <__libc_init_array+0x24>
 8002fb4:	4d0b      	ldr	r5, [pc, #44]	; (8002fe4 <__libc_init_array+0x40>)
 8002fb6:	4c0c      	ldr	r4, [pc, #48]	; (8002fe8 <__libc_init_array+0x44>)
 8002fb8:	f000 f820 	bl	8002ffc <_init>
 8002fbc:	1b64      	subs	r4, r4, r5
 8002fbe:	10a4      	asrs	r4, r4, #2
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	42a6      	cmp	r6, r4
 8002fc4:	d105      	bne.n	8002fd2 <__libc_init_array+0x2e>
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fcc:	4798      	blx	r3
 8002fce:	3601      	adds	r6, #1
 8002fd0:	e7ee      	b.n	8002fb0 <__libc_init_array+0xc>
 8002fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd6:	4798      	blx	r3
 8002fd8:	3601      	adds	r6, #1
 8002fda:	e7f2      	b.n	8002fc2 <__libc_init_array+0x1e>
 8002fdc:	0800306c 	.word	0x0800306c
 8002fe0:	0800306c 	.word	0x0800306c
 8002fe4:	0800306c 	.word	0x0800306c
 8002fe8:	08003070 	.word	0x08003070

08002fec <memset>:
 8002fec:	4402      	add	r2, r0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d100      	bne.n	8002ff6 <memset+0xa>
 8002ff4:	4770      	bx	lr
 8002ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffa:	e7f9      	b.n	8002ff0 <memset+0x4>

08002ffc <_init>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr

08003008 <_fini>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr
