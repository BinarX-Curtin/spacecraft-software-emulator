
bxse_f3_payload_emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003178  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800335c  0800335c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800335c  0800335c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800335c  0800335c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001d8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b21a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175a  00000000  00000000  0002b256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000800  00000000  00000000  0002d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e12  00000000  00000000  0002da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000acd5  00000000  00000000  0004784a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098f66  00000000  00000000  0005251f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000eb485  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002280  00000000  00000000  000eb4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032e8 	.word	0x080032e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080032e8 	.word	0x080032e8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa77 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f847 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8eb 	bl	80003b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f8b9 	bl	8000350 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001de:	f000 f87d 	bl	80002dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_RESET);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2108      	movs	r1, #8
 80001e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ea:	f000 fdcd 	bl	8000d88 <HAL_GPIO_WritePin>


  uint8_t random_msg[] = "This is the random payload data \n";
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <main+0x8c>)
 80001f0:	463c      	mov	r4, r7
 80001f2:	461d      	mov	r5, r3
 80001f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fc:	682b      	ldr	r3, [r5, #0]
 80001fe:	8023      	strh	r3, [r4, #0]

  for(uint16_t i=0; i<sizeof(random_msg); i++){
 8000200:	2300      	movs	r3, #0
 8000202:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000204:	e00a      	b.n	800021c <main+0x54>
	  buffer[i] = random_msg[i];
 8000206:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800020a:	3228      	adds	r2, #40	; 0x28
 800020c:	443a      	add	r2, r7
 800020e:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8000212:	4a11      	ldr	r2, [pc, #68]	; (8000258 <main+0x90>)
 8000214:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<sizeof(random_msg); i++){
 8000216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000218:	3301      	adds	r3, #1
 800021a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800021c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800021e:	2b21      	cmp	r3, #33	; 0x21
 8000220:	d9f1      	bls.n	8000206 <main+0x3e>
  }


  HAL_StatusTypeDef status = HAL_SPI_Transmit_IT(&hspi1, buffer, kDataSize);
 8000222:	22c8      	movs	r2, #200	; 0xc8
 8000224:	490c      	ldr	r1, [pc, #48]	; (8000258 <main+0x90>)
 8000226:	480d      	ldr	r0, [pc, #52]	; (800025c <main+0x94>)
 8000228:	f002 f8f8 	bl	800241c <HAL_SPI_Transmit_IT>
 800022c:	4603      	mov	r3, r0
 800022e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(PL_Wait_GPIO_Port, PL_Wait_Pin)==GPIO_PIN_SET){
 8000232:	2101      	movs	r1, #1
 8000234:	480a      	ldr	r0, [pc, #40]	; (8000260 <main+0x98>)
 8000236:	f000 fd8f 	bl	8000d58 <HAL_GPIO_ReadPin>
 800023a:	4603      	mov	r3, r0
 800023c:	2b01      	cmp	r3, #1
 800023e:	d1f8      	bne.n	8000232 <main+0x6a>
		  HAL_GPIO_TogglePin(PL_GPIO_Port, PL_Pin);
 8000240:	2108      	movs	r1, #8
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 fdb7 	bl	8000db8 <HAL_GPIO_TogglePin>
		  HAL_Delay(10);
 800024a:	200a      	movs	r0, #10
 800024c:	f000 fa9e 	bl	800078c <HAL_Delay>
	  if(HAL_GPIO_ReadPin(PL_Wait_GPIO_Port, PL_Wait_Pin)==GPIO_PIN_SET){
 8000250:	e7ef      	b.n	8000232 <main+0x6a>
 8000252:	bf00      	nop
 8000254:	08003300 	.word	0x08003300
 8000258:	20000114 	.word	0x20000114
 800025c:	20000028 	.word	0x20000028
 8000260:	48000400 	.word	0x48000400

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b090      	sub	sp, #64	; 0x40
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 f830 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2310      	movs	r3, #16
 8000290:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	2300      	movs	r3, #0
 8000294:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fda6 	bl	8000dec <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002a6:	f000 f8db 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fdd0 	bl	8001e68 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ce:	f000 f8c7 	bl	8000460 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	; 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002e0:	4b19      	ldr	r3, [pc, #100]	; (8000348 <MX_SPI1_Init+0x6c>)
 80002e2:	4a1a      	ldr	r2, [pc, #104]	; (800034c <MX_SPI1_Init+0x70>)
 80002e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_SPI1_Init+0x6c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <MX_SPI1_Init+0x6c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_SPI1_Init+0x6c>)
 80002f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80002f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <MX_SPI1_Init+0x6c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_SPI1_Init+0x6c>)
 8000302:	2200      	movs	r2, #0
 8000304:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <MX_SPI1_Init+0x6c>)
 8000308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800030c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_SPI1_Init+0x6c>)
 8000310:	2200      	movs	r2, #0
 8000312:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <MX_SPI1_Init+0x6c>)
 8000316:	2200      	movs	r2, #0
 8000318:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <MX_SPI1_Init+0x6c>)
 800031c:	2200      	movs	r2, #0
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <MX_SPI1_Init+0x6c>)
 8000322:	2207      	movs	r2, #7
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <MX_SPI1_Init+0x6c>)
 8000328:	2200      	movs	r2, #0
 800032a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <MX_SPI1_Init+0x6c>)
 800032e:	2200      	movs	r2, #0
 8000330:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <MX_SPI1_Init+0x6c>)
 8000334:	f001 ffce 	bl	80022d4 <HAL_SPI_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800033e:	f000 f88f 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000028 	.word	0x20000028
 800034c:	40013000 	.word	0x40013000

08000350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <MX_USART2_UART_Init+0x5c>)
 8000358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800035c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000394:	f002 fbe1 	bl	8002b5a <HAL_UART_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800039e:	f000 f85f 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000008c 	.word	0x2000008c
 80003ac:	40004400 	.word	0x40004400

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c6:	4b24      	ldr	r3, [pc, #144]	; (8000458 <MX_GPIO_Init+0xa8>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a23      	ldr	r2, [pc, #140]	; (8000458 <MX_GPIO_Init+0xa8>)
 80003cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b21      	ldr	r3, [pc, #132]	; (8000458 <MX_GPIO_Init+0xa8>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <MX_GPIO_Init+0xa8>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <MX_GPIO_Init+0xa8>)
 80003e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_GPIO_Init+0xa8>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_GPIO_Init+0xa8>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a17      	ldr	r2, [pc, #92]	; (8000458 <MX_GPIO_Init+0xa8>)
 80003fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_GPIO_Init+0xa8>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2108      	movs	r1, #8
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f000 fcb7 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PL_Pin */
  GPIO_InitStruct.Pin = PL_Pin;
 800041a:	2308      	movs	r3, #8
 800041c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PL_GPIO_Port, &GPIO_InitStruct);
 800042a:	f107 030c 	add.w	r3, r7, #12
 800042e:	4619      	mov	r1, r3
 8000430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000434:	f000 fb1e 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PL_Wait_Pin */
  GPIO_InitStruct.Pin = PL_Wait_Pin;
 8000438:	2301      	movs	r3, #1
 800043a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PL_Wait_GPIO_Port, &GPIO_InitStruct);
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	4619      	mov	r1, r3
 800044a:	4804      	ldr	r0, [pc, #16]	; (800045c <MX_GPIO_Init+0xac>)
 800044c:	f000 fb12 	bl	8000a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	48000400 	.word	0x48000400

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x8>
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x44>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_MspInit+0x44>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_MspInit+0x44>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_MspInit+0x44>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_MspInit+0x44>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_MspInit+0x44>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <HAL_SPI_MspInit+0x8c>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d130      	bne.n	8000538 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <HAL_SPI_MspInit+0x90>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a1a      	ldr	r2, [pc, #104]	; (8000544 <HAL_SPI_MspInit+0x90>)
 80004dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <HAL_SPI_MspInit+0x90>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_SPI_MspInit+0x90>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <HAL_SPI_MspInit+0x90>)
 80004f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_SPI_MspInit+0x90>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000506:	23e0      	movs	r3, #224	; 0xe0
 8000508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000516:	2305      	movs	r3, #5
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	4619      	mov	r1, r3
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f000 faa6 	bl	8000a74 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2105      	movs	r1, #5
 800052c:	2023      	movs	r0, #35	; 0x23
 800052e:	f000 fa2c 	bl	800098a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000532:	2023      	movs	r0, #35	; 0x23
 8000534:	f000 fa45 	bl	80009c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3728      	adds	r7, #40	; 0x28
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40013000 	.word	0x40013000
 8000544:	40021000 	.word	0x40021000

08000548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <HAL_UART_MspInit+0x80>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d129      	bne.n	80005be <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800056a:	4b18      	ldr	r3, [pc, #96]	; (80005cc <HAL_UART_MspInit+0x84>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	4a17      	ldr	r2, [pc, #92]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000574:	61d3      	str	r3, [r2, #28]
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_UART_MspInit+0x84>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800059a:	f248 0304 	movw	r3, #32772	; 0x8004
 800059e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ac:	2307      	movs	r3, #7
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 fa5b 	bl	8000a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40004400 	.word	0x40004400
 80005cc:	40021000 	.word	0x40021000

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <NMI_Handler+0x4>

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <MemManage_Handler+0x4>

080005e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <UsageFault_Handler+0x4>

080005ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061c:	f000 f896 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
	myCount++;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SPI1_IRQHandler+0x1c>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	b29b      	uxth	r3, r3
 800062e:	3301      	adds	r3, #1
 8000630:	b29a      	uxth	r2, r3
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <SPI1_IRQHandler+0x1c>)
 8000634:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <SPI1_IRQHandler+0x20>)
 8000638:	f001 ff7e 	bl	8002538 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200001dc 	.word	0x200001dc
 8000644:	20000028 	.word	0x20000028

08000648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <SystemInit+0x20>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <SystemInit+0x20>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800066c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000670:	f7ff ffea 	bl	8000648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069a:	f002 fdf9 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069e:	f7ff fd93 	bl	80001c8 <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b0:	08003364 	.word	0x08003364
  ldr r2, =_sbss
 80006b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b8:	200001e4 	.word	0x200001e4

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_Init+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Init+0x28>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f94f 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f808 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006dc:	f7ff fec6 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0x54>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	fbb3 f3f1 	udiv	r3, r3, r1
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f967 	bl	80009de <HAL_SYSTICK_Config>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e00e      	b.n	8000738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d80a      	bhi.n	8000736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000728:	f000 f92f 	bl	800098a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_InitTick+0x5c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_IncTick+0x20>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x24>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_IncTick+0x24>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008
 8000770:	200001e0 	.word	0x200001e0

08000774 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;  
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <HAL_GetTick+0x14>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200001e0 	.word	0x200001e0

0800078c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000794:	f7ff ffee 	bl	8000774 <HAL_GetTick>
 8000798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007a4:	d005      	beq.n	80007b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_Delay+0x44>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4413      	add	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007b2:	bf00      	nop
 80007b4:	f7ff ffde 	bl	8000774 <HAL_GetTick>
 80007b8:	4602      	mov	r2, r0
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d8f7      	bhi.n	80007b4 <HAL_Delay+0x28>
  {
  }
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000008 	.word	0x20000008

080007d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <__NVIC_SetPriorityGrouping+0x44>)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	60d3      	str	r3, [r2, #12]
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <__NVIC_GetPriorityGrouping+0x18>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	f003 0307 	and.w	r3, r3, #7
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	db0b      	blt.n	8000862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 021f 	and.w	r2, r3, #31
 8000850:	4907      	ldr	r1, [pc, #28]	; (8000870 <__NVIC_EnableIRQ+0x38>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	095b      	lsrs	r3, r3, #5
 8000858:	2001      	movs	r0, #1
 800085a:	fa00 f202 	lsl.w	r2, r0, r2
 800085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000940:	d301      	bcc.n	8000946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2301      	movs	r3, #1
 8000944:	e00f      	b.n	8000966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <SysTick_Config+0x40>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094e:	210f      	movs	r1, #15
 8000950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000954:	f7ff ff8e 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <SysTick_Config+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SysTick_Config+0x40>)
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff29 	bl	80007d4 <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099c:	f7ff ff3e 	bl	800081c <__NVIC_GetPriorityGrouping>
 80009a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff ff8e 	bl	80008c8 <NVIC_EncodePriority>
 80009ac:	4602      	mov	r2, r0
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff5d 	bl	8000874 <__NVIC_SetPriority>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff31 	bl	8000838 <__NVIC_EnableIRQ>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffa2 	bl	8000930 <SysTick_Config>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d005      	beq.n	8000a18 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2204      	movs	r2, #4
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	e027      	b.n	8000a68 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f022 020e 	bic.w	r2, r2, #14
 8000a26:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 0201 	bic.w	r2, r2, #1
 8000a36:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a40:	2101      	movs	r1, #1
 8000a42:	fa01 f202 	lsl.w	r2, r1, r2
 8000a46:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	4798      	blx	r3
    } 
  }
  return status;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	e14e      	b.n	8000d22 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8140 	beq.w	8000d1c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d005      	beq.n	8000ab4 <HAL_GPIO_Init+0x40>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	f003 0201 	and.w	r2, r3, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d017      	beq.n	8000b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d123      	bne.n	8000ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	08da      	lsrs	r2, r3, #3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3208      	adds	r2, #8
 8000b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	6939      	ldr	r1, [r7, #16]
 8000ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0203 	and.w	r2, r3, #3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 809a 	beq.w	8000d1c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be8:	4b55      	ldr	r3, [pc, #340]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a54      	ldr	r2, [pc, #336]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b52      	ldr	r3, [pc, #328]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c00:	4a50      	ldr	r2, [pc, #320]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c2a:	d013      	beq.n	8000c54 <HAL_GPIO_Init+0x1e0>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a46      	ldr	r2, [pc, #280]	; (8000d48 <HAL_GPIO_Init+0x2d4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d00d      	beq.n	8000c50 <HAL_GPIO_Init+0x1dc>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a45      	ldr	r2, [pc, #276]	; (8000d4c <HAL_GPIO_Init+0x2d8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d007      	beq.n	8000c4c <HAL_GPIO_Init+0x1d8>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a44      	ldr	r2, [pc, #272]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d101      	bne.n	8000c48 <HAL_GPIO_Init+0x1d4>
 8000c44:	2303      	movs	r3, #3
 8000c46:	e006      	b.n	8000c56 <HAL_GPIO_Init+0x1e2>
 8000c48:	2305      	movs	r3, #5
 8000c4a:	e004      	b.n	8000c56 <HAL_GPIO_Init+0x1e2>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_Init+0x1e2>
 8000c50:	2301      	movs	r3, #1
 8000c52:	e000      	b.n	8000c56 <HAL_GPIO_Init+0x1e2>
 8000c54:	2300      	movs	r3, #0
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	f002 0203 	and.w	r2, r2, #3
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	4093      	lsls	r3, r2
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c66:	4937      	ldr	r1, [pc, #220]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c74:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <HAL_GPIO_Init+0x2e0>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c98:	4a2e      	ldr	r2, [pc, #184]	; (8000d54 <HAL_GPIO_Init+0x2e0>)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <HAL_GPIO_Init+0x2e0>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc2:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <HAL_GPIO_Init+0x2e0>)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_GPIO_Init+0x2e0>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_GPIO_Init+0x2e0>)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_GPIO_Init+0x2e0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_GPIO_Init+0x2e0>)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f47f aea9 	bne.w	8000a84 <HAL_GPIO_Init+0x10>
  }
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	48000800 	.word	0x48000800
 8000d50:	48000c00 	.word	0x48000c00
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e001      	b.n	8000d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	041a      	lsls	r2, r3, #16
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43d9      	mvns	r1, r3
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	400b      	ands	r3, r1
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f001 b823 	b.w	8001e58 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 817d 	beq.w	8001122 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e28:	4bbc      	ldr	r3, [pc, #752]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d00c      	beq.n	8000e4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e34:	4bb9      	ldr	r3, [pc, #740]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d15c      	bne.n	8000efa <HAL_RCC_OscConfig+0x10e>
 8000e40:	4bb6      	ldr	r3, [pc, #728]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4c:	d155      	bne.n	8000efa <HAL_RCC_OscConfig+0x10e>
 8000e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e52:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	095b      	lsrs	r3, r3, #5
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_OscConfig+0x94>
 8000e7a:	4ba8      	ldr	r3, [pc, #672]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	e015      	b.n	8000eac <HAL_RCC_OscConfig+0xc0>
 8000e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e84:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e88:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e8c:	fa93 f3a3 	rbit	r3, r3
 8000e90:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e98:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ea8:	4b9c      	ldr	r3, [pc, #624]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eb0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000eb4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000eb8:	fa92 f2a2 	rbit	r2, r2
 8000ebc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000ec0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	f042 0220 	orr.w	r2, r2, #32
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	f002 021f 	and.w	r2, r2, #31
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 811f 	beq.w	8001120 <HAL_RCC_OscConfig+0x334>
 8000ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8116 	bne.w	8001120 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f000 bfaf 	b.w	8001e58 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0a:	d106      	bne.n	8000f1a <HAL_RCC_OscConfig+0x12e>
 8000f0c:	4b83      	ldr	r3, [pc, #524]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a82      	ldr	r2, [pc, #520]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	e036      	b.n	8000f88 <HAL_RCC_OscConfig+0x19c>
 8000f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x158>
 8000f2a:	4b7c      	ldr	r3, [pc, #496]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a7b      	ldr	r2, [pc, #492]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b79      	ldr	r3, [pc, #484]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a78      	ldr	r2, [pc, #480]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e021      	b.n	8000f88 <HAL_RCC_OscConfig+0x19c>
 8000f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x184>
 8000f56:	4b71      	ldr	r3, [pc, #452]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a70      	ldr	r2, [pc, #448]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b6e      	ldr	r3, [pc, #440]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a6d      	ldr	r2, [pc, #436]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e00b      	b.n	8000f88 <HAL_RCC_OscConfig+0x19c>
 8000f70:	4b6a      	ldr	r3, [pc, #424]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a69      	ldr	r2, [pc, #420]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b67      	ldr	r3, [pc, #412]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a66      	ldr	r2, [pc, #408]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f86:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f88:	4b64      	ldr	r3, [pc, #400]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	f023 020f 	bic.w	r2, r3, #15
 8000f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	495f      	ldr	r1, [pc, #380]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d059      	beq.n	8001066 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fbdf 	bl	8000774 <HAL_GetTick>
 8000fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	e00a      	b.n	8000fd2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fbda 	bl	8000774 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b64      	cmp	r3, #100	; 0x64
 8000fca:	d902      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	f000 bf43 	b.w	8001e58 <HAL_RCC_OscConfig+0x106c>
 8000fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fde:	fa93 f3a3 	rbit	r3, r3
 8000fe2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fe6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	095b      	lsrs	r3, r3, #5
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d102      	bne.n	8001004 <HAL_RCC_OscConfig+0x218>
 8000ffe:	4b47      	ldr	r3, [pc, #284]	; (800111c <HAL_RCC_OscConfig+0x330>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	e015      	b.n	8001030 <HAL_RCC_OscConfig+0x244>
 8001004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001008:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001020:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HAL_RCC_OscConfig+0x330>)
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001034:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001038:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800103c:	fa92 f2a2 	rbit	r2, r2
 8001040:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001044:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	f042 0220 	orr.w	r2, r2, #32
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	f002 021f 	and.w	r2, r2, #31
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0ab      	beq.n	8000fbc <HAL_RCC_OscConfig+0x1d0>
 8001064:	e05d      	b.n	8001122 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fb85 	bl	8000774 <HAL_GetTick>
 800106a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	e00a      	b.n	8001086 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fb80 	bl	8000774 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b64      	cmp	r3, #100	; 0x64
 800107e:	d902      	bls.n	8001086 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	f000 bee9 	b.w	8001e58 <HAL_RCC_OscConfig+0x106c>
 8001086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800109a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	095b      	lsrs	r3, r3, #5
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2cc>
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_RCC_OscConfig+0x330>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	e015      	b.n	80010e4 <HAL_RCC_OscConfig+0x2f8>
 80010b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010bc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010c4:	fa93 f3a3 	rbit	r3, r3
 80010c8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_RCC_OscConfig+0x330>)
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010ec:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010f0:	fa92 f2a2 	rbit	r2, r2
 80010f4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010fc:	fab2 f282 	clz	r2, r2
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	f042 0220 	orr.w	r2, r2, #32
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	f002 021f 	and.w	r2, r2, #31
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	4013      	ands	r3, r2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1ab      	bne.n	8001070 <HAL_RCC_OscConfig+0x284>
 8001118:	e003      	b.n	8001122 <HAL_RCC_OscConfig+0x336>
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 817d 	beq.w	8001432 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001138:	4ba6      	ldr	r3, [pc, #664]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00b      	beq.n	800115c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001144:	4ba3      	ldr	r3, [pc, #652]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b08      	cmp	r3, #8
 800114e:	d172      	bne.n	8001236 <HAL_RCC_OscConfig+0x44a>
 8001150:	4ba0      	ldr	r3, [pc, #640]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d16c      	bne.n	8001236 <HAL_RCC_OscConfig+0x44a>
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800116e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d102      	bne.n	800118c <HAL_RCC_OscConfig+0x3a0>
 8001186:	4b93      	ldr	r3, [pc, #588]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	e013      	b.n	80011b4 <HAL_RCC_OscConfig+0x3c8>
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011b0:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	2202      	movs	r2, #2
 80011b6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011be:	fa92 f2a2 	rbit	r2, r2
 80011c2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011c6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011ca:	fab2 f282 	clz	r2, r2
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	f042 0220 	orr.w	r2, r2, #32
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	f002 021f 	and.w	r2, r2, #31
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00a      	beq.n	80011fc <HAL_RCC_OscConfig+0x410>
 80011e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d002      	beq.n	80011fc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f000 be2e 	b.w	8001e58 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b75      	ldr	r3, [pc, #468]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	21f8      	movs	r1, #248	; 0xf8
 8001212:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800121a:	fa91 f1a1 	rbit	r1, r1
 800121e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001222:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001226:	fab1 f181 	clz	r1, r1
 800122a:	b2c9      	uxtb	r1, r1
 800122c:	408b      	lsls	r3, r1
 800122e:	4969      	ldr	r1, [pc, #420]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001234:	e0fd      	b.n	8001432 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8088 	beq.w	8001358 <HAL_RCC_OscConfig+0x56c>
 8001248:	2301      	movs	r3, #1
 800124a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800125a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001268:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	461a      	mov	r2, r3
 8001270:	2301      	movs	r3, #1
 8001272:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fa7e 	bl	8000774 <HAL_GetTick>
 8001278:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fa79 	bl	8000774 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d902      	bls.n	8001294 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	f000 bde2 	b.w	8001e58 <HAL_RCC_OscConfig+0x106c>
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	095b      	lsrs	r3, r3, #5
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0x4d8>
 80012be:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	e013      	b.n	80012ec <HAL_RCC_OscConfig+0x500>
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012e8:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	2202      	movs	r2, #2
 80012ee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012f6:	fa92 f2a2 	rbit	r2, r2
 80012fa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001302:	fab2 f282 	clz	r2, r2
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f042 0220 	orr.w	r2, r2, #32
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f002 021f 	and.w	r2, r2, #31
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0af      	beq.n	800127e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	21f8      	movs	r1, #248	; 0xf8
 8001334:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800133c:	fa91 f1a1 	rbit	r1, r1
 8001340:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001344:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001348:	fab1 f181 	clz	r1, r1
 800134c:	b2c9      	uxtb	r1, r1
 800134e:	408b      	lsls	r3, r1
 8001350:	4920      	ldr	r1, [pc, #128]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
 8001356:	e06c      	b.n	8001432 <HAL_RCC_OscConfig+0x646>
 8001358:	2301      	movs	r3, #1
 800135a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800136a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001378:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	461a      	mov	r2, r3
 8001380:	2300      	movs	r3, #0
 8001382:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff f9f6 	bl	8000774 <HAL_GetTick>
 8001388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff f9f1 	bl	8000774 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d902      	bls.n	80013a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	f000 bd5a 	b.w	8001e58 <HAL_RCC_OscConfig+0x106c>
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	095b      	lsrs	r3, r3, #5
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d104      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5ec>
 80013ce:	4b01      	ldr	r3, [pc, #4]	; (80013d4 <HAL_RCC_OscConfig+0x5e8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	e015      	b.n	8001400 <HAL_RCC_OscConfig+0x614>
 80013d4:	40021000 	.word	0x40021000
 80013d8:	2302      	movs	r3, #2
 80013da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013fc:	4bc8      	ldr	r3, [pc, #800]	; (8001720 <HAL_RCC_OscConfig+0x934>)
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	2202      	movs	r2, #2
 8001402:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001406:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800140a:	fa92 f2a2 	rbit	r2, r2
 800140e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001412:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001416:	fab2 f282 	clz	r2, r2
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	f042 0220 	orr.w	r2, r2, #32
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	f002 021f 	and.w	r2, r2, #31
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f202 	lsl.w	r2, r1, r2
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1ad      	bne.n	800138e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8110 	beq.w	8001668 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d079      	beq.n	800154c <HAL_RCC_OscConfig+0x760>
 8001458:	2301      	movs	r3, #1
 800145a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800146a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	4bab      	ldr	r3, [pc, #684]	; (8001724 <HAL_RCC_OscConfig+0x938>)
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	461a      	mov	r2, r3
 800147e:	2301      	movs	r3, #1
 8001480:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff f977 	bl	8000774 <HAL_GetTick>
 8001486:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff f972 	bl	8000774 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d902      	bls.n	80014a2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	f000 bcdb 	b.w	8001e58 <HAL_RCC_OscConfig+0x106c>
 80014a2:	2302      	movs	r3, #2
 80014a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014bc:	2202      	movs	r2, #2
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	fa93 f2a3 	rbit	r2, r3
 80014ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014e0:	2202      	movs	r2, #2
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f2a3 	rbit	r2, r3
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fc:	4b88      	ldr	r3, [pc, #544]	; (8001720 <HAL_RCC_OscConfig+0x934>)
 80014fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001504:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001508:	2102      	movs	r1, #2
 800150a:	6019      	str	r1, [r3, #0]
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	fa93 f1a3 	rbit	r1, r3
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001522:	6019      	str	r1, [r3, #0]
  return result;
 8001524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001528:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0a0      	beq.n	800148c <HAL_RCC_OscConfig+0x6a0>
 800154a:	e08d      	b.n	8001668 <HAL_RCC_OscConfig+0x87c>
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800156e:	601a      	str	r2, [r3, #0]
  return result;
 8001570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001574:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001578:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	4b68      	ldr	r3, [pc, #416]	; (8001724 <HAL_RCC_OscConfig+0x938>)
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	461a      	mov	r2, r3
 800158a:	2300      	movs	r3, #0
 800158c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff f8f1 	bl	8000774 <HAL_GetTick>
 8001592:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff f8ec 	bl	8000774 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d902      	bls.n	80015ae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	f000 bc55 	b.w	8001e58 <HAL_RCC_OscConfig+0x106c>
 80015ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015b6:	2202      	movs	r2, #2
 80015b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	fa93 f2a3 	rbit	r2, r3
 80015c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015da:	2202      	movs	r2, #2
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	fa93 f2a3 	rbit	r2, r3
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015fe:	2202      	movs	r2, #2
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fa93 f2a3 	rbit	r2, r3
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001618:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_OscConfig+0x934>)
 800161c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001622:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001626:	2102      	movs	r1, #2
 8001628:	6019      	str	r1, [r3, #0]
 800162a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	fa93 f1a3 	rbit	r1, r3
 8001638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001640:	6019      	str	r1, [r3, #0]
  return result;
 8001642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001646:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d197      	bne.n	8001598 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 81a1 	beq.w	80019c0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_RCC_OscConfig+0x934>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d116      	bne.n	80016be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_RCC_OscConfig+0x934>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_RCC_OscConfig+0x934>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169a:	61d3      	str	r3, [r2, #28]
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_RCC_OscConfig+0x934>)
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016b8:	2301      	movs	r3, #1
 80016ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_RCC_OscConfig+0x93c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11a      	bne.n	8001700 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_RCC_OscConfig+0x93c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a16      	ldr	r2, [pc, #88]	; (8001728 <HAL_RCC_OscConfig+0x93c>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff f84d 	bl	8000774 <HAL_GetTick>
 80016da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	e009      	b.n	80016f4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e0:	f7ff f848 	bl	8000774 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e3b1      	b.n	8001e58 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_RCC_OscConfig+0x93c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ef      	beq.n	80016e0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d10d      	bne.n	800172c <HAL_RCC_OscConfig+0x940>
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_RCC_OscConfig+0x934>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a02      	ldr	r2, [pc, #8]	; (8001720 <HAL_RCC_OscConfig+0x934>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	e03c      	b.n	8001798 <HAL_RCC_OscConfig+0x9ac>
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	10908120 	.word	0x10908120
 8001728:	40007000 	.word	0x40007000
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x96a>
 800173c:	4bc1      	ldr	r3, [pc, #772]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4ac0      	ldr	r2, [pc, #768]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	4bbe      	ldr	r3, [pc, #760]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4abd      	ldr	r2, [pc, #756]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 800174e:	f023 0304 	bic.w	r3, r3, #4
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e020      	b.n	8001798 <HAL_RCC_OscConfig+0x9ac>
 8001756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x994>
 8001766:	4bb7      	ldr	r3, [pc, #732]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4ab6      	ldr	r2, [pc, #728]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	4bb4      	ldr	r3, [pc, #720]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4ab3      	ldr	r2, [pc, #716]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6213      	str	r3, [r2, #32]
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0x9ac>
 8001780:	4bb0      	ldr	r3, [pc, #704]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4aaf      	ldr	r2, [pc, #700]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	4bad      	ldr	r3, [pc, #692]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4aac      	ldr	r2, [pc, #688]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001792:	f023 0304 	bic.w	r3, r3, #4
 8001796:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 8081 	beq.w	80018ac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7fe ffe3 	bl	8000774 <HAL_GetTick>
 80017ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7fe ffde 	bl	8000774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e345      	b.n	8001e58 <HAL_RCC_OscConfig+0x106c>
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017d4:	2202      	movs	r2, #2
 80017d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	fa93 f2a3 	rbit	r2, r3
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017f8:	2202      	movs	r2, #2
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001800:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001812:	601a      	str	r2, [r3, #0]
  return result;
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800181c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d102      	bne.n	8001838 <HAL_RCC_OscConfig+0xa4c>
 8001832:	4b84      	ldr	r3, [pc, #528]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	e013      	b.n	8001860 <HAL_RCC_OscConfig+0xa74>
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001840:	2202      	movs	r2, #2
 8001842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fa93 f2a3 	rbit	r2, r3
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001864:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001868:	2102      	movs	r1, #2
 800186a:	6011      	str	r1, [r2, #0]
 800186c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001870:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	fa92 f1a2 	rbit	r1, r2
 800187a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800187e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001882:	6011      	str	r1, [r2, #0]
  return result;
 8001884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001888:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	fab2 f282 	clz	r2, r2
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f002 021f 	and.w	r2, r2, #31
 800189e:	2101      	movs	r1, #1
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d084      	beq.n	80017b4 <HAL_RCC_OscConfig+0x9c8>
 80018aa:	e07f      	b.n	80019ac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7fe ff62 	bl	8000774 <HAL_GetTick>
 80018b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	e00b      	b.n	80018ce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7fe ff5d 	bl	8000774 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e2c4      	b.n	8001e58 <HAL_RCC_OscConfig+0x106c>
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018d6:	2202      	movs	r2, #2
 80018d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018de:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018fa:	2202      	movs	r2, #2
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001902:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001914:	601a      	str	r2, [r3, #0]
  return result;
 8001916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800191e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d102      	bne.n	800193a <HAL_RCC_OscConfig+0xb4e>
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	e013      	b.n	8001962 <HAL_RCC_OscConfig+0xb76>
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001942:	2202      	movs	r2, #2
 8001944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fa93 f2a3 	rbit	r2, r3
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001966:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800196a:	2102      	movs	r1, #2
 800196c:	6011      	str	r1, [r2, #0]
 800196e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001972:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	fa92 f1a2 	rbit	r1, r2
 800197c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001980:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001984:	6011      	str	r1, [r2, #0]
  return result;
 8001986:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800198a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	fab2 f282 	clz	r2, r2
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f002 021f 	and.w	r2, r2, #31
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d184      	bne.n	80018b6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 8242 	beq.w	8001e56 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_RCC_OscConfig+0xc58>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	f000 8213 	beq.w	8001e06 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f040 8162 	bne.w	8001cb6 <HAL_RCC_OscConfig+0xeca>
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a16:	601a      	str	r2, [r3, #0]
  return result;
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	461a      	mov	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7fe fe9c 	bl	8000774 <HAL_GetTick>
 8001a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	e00c      	b.n	8001a5c <HAL_RCC_OscConfig+0xc70>
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a48:	f7fe fe94 	bl	8000774 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1fd      	b.n	8001e58 <HAL_RCC_OscConfig+0x106c>
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a80:	601a      	str	r2, [r3, #0]
  return result;
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_OscConfig+0xcba>
 8001aa0:	4bb0      	ldr	r3, [pc, #704]	; (8001d64 <HAL_RCC_OscConfig+0xf78>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e027      	b.n	8001af6 <HAL_RCC_OscConfig+0xd0a>
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ad4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	4b9c      	ldr	r3, [pc, #624]	; (8001d64 <HAL_RCC_OscConfig+0xf78>)
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001afa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001afe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b02:	6011      	str	r1, [r2, #0]
 8001b04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b08:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	fa92 f1a2 	rbit	r1, r2
 8001b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b16:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b1a:	6011      	str	r1, [r2, #0]
  return result;
 8001b1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b20:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	fab2 f282 	clz	r2, r2
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f042 0220 	orr.w	r2, r2, #32
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f002 021f 	and.w	r2, r2, #31
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d182      	bne.n	8001a48 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b42:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0xf78>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	430b      	orrs	r3, r1
 8001b64:	497f      	ldr	r1, [pc, #508]	; (8001d64 <HAL_RCC_OscConfig+0xf78>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f2a3 	rbit	r2, r3
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b8e:	601a      	str	r2, [r3, #0]
  return result;
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b98:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ba4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	461a      	mov	r2, r3
 8001bac:	2301      	movs	r3, #1
 8001bae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fde0 	bl	8000774 <HAL_GetTick>
 8001bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb8:	e009      	b.n	8001bce <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bba:	f7fe fddb 	bl	8000774 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e144      	b.n	8001e58 <HAL_RCC_OscConfig+0x106c>
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bf2:	601a      	str	r2, [r3, #0]
  return result;
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bfc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_OscConfig+0xe2c>
 8001c12:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <HAL_RCC_OscConfig+0xf78>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	e027      	b.n	8001c68 <HAL_RCC_OscConfig+0xe7c>
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fa93 f2a3 	rbit	r2, r3
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <HAL_RCC_OscConfig+0xf78>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c74:	6011      	str	r1, [r2, #0]
 8001c76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c7a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	fa92 f1a2 	rbit	r1, r2
 8001c84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c88:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c8c:	6011      	str	r1, [r2, #0]
  return result;
 8001c8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c92:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	fab2 f282 	clz	r2, r2
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f042 0220 	orr.w	r2, r2, #32
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	f002 021f 	and.w	r2, r2, #31
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d082      	beq.n	8001bba <HAL_RCC_OscConfig+0xdce>
 8001cb4:	e0cf      	b.n	8001e56 <HAL_RCC_OscConfig+0x106a>
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cda:	601a      	str	r2, [r3, #0]
  return result;
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ce4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fd3a 	bl	8000774 <HAL_GetTick>
 8001d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe fd35 	bl	8000774 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e09e      	b.n	8001e58 <HAL_RCC_OscConfig+0x106c>
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fa93 f2a3 	rbit	r2, r3
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d3e:	601a      	str	r2, [r3, #0]
  return result;
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	095b      	lsrs	r3, r3, #5
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d104      	bne.n	8001d68 <HAL_RCC_OscConfig+0xf7c>
 8001d5e:	4b01      	ldr	r3, [pc, #4]	; (8001d64 <HAL_RCC_OscConfig+0xf78>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	e029      	b.n	8001db8 <HAL_RCC_OscConfig+0xfcc>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	fa93 f2a3 	rbit	r2, r3
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_RCC_OscConfig+0x1078>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dbc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dc4:	6011      	str	r1, [r2, #0]
 8001dc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dca:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fa92 f1a2 	rbit	r1, r2
 8001dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ddc:	6011      	str	r1, [r2, #0]
  return result;
 8001dde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	fab2 f282 	clz	r2, r2
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f042 0220 	orr.w	r2, r2, #32
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	f002 021f 	and.w	r2, r2, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d180      	bne.n	8001d06 <HAL_RCC_OscConfig+0xf1a>
 8001e04:	e027      	b.n	8001e56 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e01e      	b.n	8001e58 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_OscConfig+0x1078>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e26:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b09e      	sub	sp, #120	; 0x78
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e162      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b90      	ldr	r3, [pc, #576]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b8d      	ldr	r3, [pc, #564]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	498b      	ldr	r1, [pc, #556]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e14a      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	497f      	ldr	r1, [pc, #508]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80dc 	beq.w	8002094 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d13c      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xf6>
 8001ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xa6>
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	e00f      	b.n	8001f2e <HAL_RCC_ClockConfig+0xc6>
 8001f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f20:	663b      	str	r3, [r7, #96]	; 0x60
 8001f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f2a:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f32:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f36:	fa92 f2a2 	rbit	r2, r2
 8001f3a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f3e:	fab2 f282 	clz	r2, r2
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f042 0220 	orr.w	r2, r2, #32
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f002 021f 	and.w	r2, r2, #31
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d17b      	bne.n	8002052 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0f3      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d13c      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x178>
 8001f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x128>
 8001f8a:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e00f      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x148>
 8001f90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fac:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb8:	fa92 f2a2 	rbit	r2, r2
 8001fbc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fc0:	fab2 f282 	clz	r2, r2
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f042 0220 	orr.w	r2, r2, #32
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	f002 021f 	and.w	r2, r2, #31
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d13a      	bne.n	8002052 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0b2      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_RCC_ClockConfig+0x1a0>
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e00d      	b.n	8002024 <HAL_RCC_ClockConfig+0x1bc>
 8002008:	2302      	movs	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
 8002014:	2302      	movs	r3, #2
 8002016:	623b      	str	r3, [r7, #32]
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	2202      	movs	r2, #2
 8002026:	61ba      	str	r2, [r7, #24]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	617a      	str	r2, [r7, #20]
  return result;
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	fab2 f282 	clz	r2, r2
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	f042 0220 	orr.w	r2, r2, #32
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f002 021f 	and.w	r2, r2, #31
 8002042:	2101      	movs	r1, #1
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e079      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	491a      	ldr	r1, [pc, #104]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002064:	f7fe fb86 	bl	8000774 <HAL_GetTick>
 8002068:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7fe fb82 	bl	8000774 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e061      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d214      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	4906      	ldr	r1, [pc, #24]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_RCC_ClockConfig+0x25c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e040      	b.n	8002146 <HAL_RCC_ClockConfig+0x2de>
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	491a      	ldr	r1, [pc, #104]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4912      	ldr	r1, [pc, #72]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800210a:	f000 f829 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800210e:	4601      	mov	r1, r0
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_RCC_ClockConfig+0x2e8>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002118:	22f0      	movs	r2, #240	; 0xf0
 800211a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	fa92 f2a2 	rbit	r2, r2
 8002122:	60fa      	str	r2, [r7, #12]
  return result;
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	40d3      	lsrs	r3, r2
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x2ec>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	fa21 f303 	lsr.w	r3, r1, r3
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_RCC_ClockConfig+0x2f0>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_RCC_ClockConfig+0x2f4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fad4 	bl	80006ec <HAL_InitTick>
  
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3778      	adds	r7, #120	; 0x78
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	08003324 	.word	0x08003324
 8002158:	20000000 	.word	0x20000000
 800215c:	20000004 	.word	0x20000004

08002160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b08b      	sub	sp, #44	; 0x2c
 8002164:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_GetSysClockFreq+0xc0>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x30>
 800218a:	2b08      	cmp	r3, #8
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x36>
 800218e:	e03c      	b.n	800220a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002192:	623b      	str	r3, [r7, #32]
      break;
 8002194:	e03c      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800219c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	607a      	str	r2, [r7, #4]
  return result;
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	40d3      	lsrs	r3, r2
 80021b4:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	220f      	movs	r2, #15
 80021c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	fa92 f2a2 	rbit	r2, r2
 80021cc:	60fa      	str	r2, [r7, #12]
  return result;
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	40d3      	lsrs	r3, r2
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <HAL_RCC_GetSysClockFreq+0xcc>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
 80021f8:	e004      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	623b      	str	r3, [r7, #32]
      break;
 8002208:	e002      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetSysClockFreq+0xc4>)
 800220c:	623b      	str	r3, [r7, #32]
      break;
 800220e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002210:	6a3b      	ldr	r3, [r7, #32]
}
 8002212:	4618      	mov	r0, r3
 8002214:	372c      	adds	r7, #44	; 0x2c
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	007a1200 	.word	0x007a1200
 8002228:	0800333c 	.word	0x0800333c
 800222c:	0800334c 	.word	0x0800334c
 8002230:	003d0900 	.word	0x003d0900

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_RCC_GetHCLKFreq+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000000 	.word	0x20000000

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002252:	f7ff ffef 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002256:	4601      	mov	r1, r0
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002260:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002264:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	fa92 f2a2 	rbit	r2, r2
 800226c:	603a      	str	r2, [r7, #0]
  return result;
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	fab2 f282 	clz	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	40d3      	lsrs	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_RCC_GetPCLK1Freq+0x40>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	08003334 	.word	0x08003334

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002296:	f7ff ffcd 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 800229a:	4601      	mov	r1, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	603a      	str	r2, [r7, #0]
  return result;
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	fab2 f282 	clz	r2, r2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	40d3      	lsrs	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08003334 	.word	0x08003334

080022d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e095      	b.n	8002412 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022f6:	d009      	beq.n	800230c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
 80022fe:	e005      	b.n	800230c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe f8c4 	bl	80004b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002342:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800234c:	d902      	bls.n	8002354 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e002      	b.n	800235a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002358:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002362:	d007      	beq.n	8002374 <HAL_SPI_Init+0xa0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800236c:	d002      	beq.n	8002374 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	ea42 0103 	orr.w	r1, r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	f003 0204 	and.w	r2, r3, #4
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80023f0:	ea42 0103 	orr.w	r1, r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_SPI_Transmit_IT+0x20>
 8002438:	2302      	movs	r3, #2
 800243a:	e072      	b.n	8002522 <HAL_SPI_Transmit_IT+0x106>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_SPI_Transmit_IT+0x34>
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002454:	e060      	b.n	8002518 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d002      	beq.n	8002468 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002462:	2302      	movs	r3, #2
 8002464:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002466:	e057      	b.n	8002518 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2203      	movs	r2, #3
 800246c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	88fa      	ldrh	r2, [r7, #6]
 8002486:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024ac:	d903      	bls.n	80024b6 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_SPI_Transmit_IT+0x114>)
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50
 80024b4:	e002      	b.n	80024bc <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <HAL_SPI_Transmit_IT+0x118>)
 80024ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c4:	d10f      	bne.n	80024e6 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80024f4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d008      	beq.n	8002516 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e000      	b.n	8002518 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8002516:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002520:	7dfb      	ldrb	r3, [r7, #23]
}
 8002522:	4618      	mov	r0, r3
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	080027d1 	.word	0x080027d1
 8002534:	0800278b 	.word	0x0800278b

08002538 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
    return;
 800257a:	e0d7      	b.n	800272c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_SPI_IRQHandler+0x66>
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	09db      	lsrs	r3, r3, #7
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
    return;
 800259c:	e0c6      	b.n	800272c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_SPI_IRQHandler+0x8c>
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80b4 	beq.w	800272c <HAL_SPI_IRQHandler+0x1f4>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80ad 	beq.w	800272c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d023      	beq.n	8002626 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d011      	beq.n	800260e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ee:	f043 0204 	orr.w	r2, r3, #4
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	e00b      	b.n	8002626 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
        return;
 8002624:	e082      	b.n	800272c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d014      	beq.n	800265c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00c      	beq.n	8002682 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266c:	f043 0208 	orr.w	r2, r3, #8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002686:	2b00      	cmp	r3, #0
 8002688:	d04f      	beq.n	800272a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002698:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <HAL_SPI_IRQHandler+0x17e>
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d034      	beq.n	8002720 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0203 	bic.w	r2, r2, #3
 80026c4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d011      	beq.n	80026f2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d2:	4a18      	ldr	r2, [pc, #96]	; (8002734 <HAL_SPI_IRQHandler+0x1fc>)
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe f98b 	bl	80009f6 <HAL_DMA_Abort_IT>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <HAL_SPI_IRQHandler+0x1fc>)
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe f975 	bl	80009f6 <HAL_DMA_Abort_IT>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800271e:	e003      	b.n	8002728 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f813 	bl	800274c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002726:	e000      	b.n	800272a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002728:	bf00      	nop
    return;
 800272a:	bf00      	nop
  }
}
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	08002761 	.word	0x08002761

08002738 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ffe5 	bl	800274c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f98a 	bl	8002adc <SPI_CloseTx_ISR>
  }
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	1c9a      	adds	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f968 	bl	8002adc <SPI_CloseTx_ISR>
  }
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002824:	f7fd ffa6 	bl	8000774 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4413      	add	r3, r2
 8002832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002834:	f7fd ff9e 	bl	8000774 <HAL_GetTick>
 8002838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	015b      	lsls	r3, r3, #5
 8002840:	0d1b      	lsrs	r3, r3, #20
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800284a:	e054      	b.n	80028f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002852:	d050      	beq.n	80028f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002854:	f7fd ff8e 	bl	8000774 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	429a      	cmp	r2, r3
 8002862:	d902      	bls.n	800286a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d13d      	bne.n	80028e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002882:	d111      	bne.n	80028a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288c:	d004      	beq.n	8002898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d107      	bne.n	80028a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b0:	d10f      	bne.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e017      	b.n	8002916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4013      	ands	r3, r2
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	429a      	cmp	r2, r3
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	429a      	cmp	r2, r3
 8002912:	d19b      	bne.n	800284c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002936:	f7fd ff1d 	bl	8000774 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	4413      	add	r3, r2
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002946:	f7fd ff15 	bl	8000774 <HAL_GetTick>
 800294a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	330c      	adds	r3, #12
 8002952:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002954:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00da      	lsls	r2, r3, #3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	0d1b      	lsrs	r3, r3, #20
 8002964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800296c:	e060      	b.n	8002a30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002974:	d107      	bne.n	8002986 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002984:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298c:	d050      	beq.n	8002a30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800298e:	f7fd fef1 	bl	8000774 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299a:	429a      	cmp	r2, r3
 800299c:	d902      	bls.n	80029a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d13d      	bne.n	8002a20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029bc:	d111      	bne.n	80029e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c6:	d004      	beq.n	80029d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d0:	d107      	bne.n	80029e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ea:	d10f      	bne.n	8002a0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e010      	b.n	8002a42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d196      	bne.n	800296e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3728      	adds	r7, #40	; 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000

08002a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff ff5b 	bl	8002924 <SPI_WaitFifoStateUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e027      	b.n	8002ad4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff fec0 	bl	8002814 <SPI_WaitFlagStateUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e014      	b.n	8002ad4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff ff34 	bl	8002924 <SPI_WaitFifoStateUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e000      	b.n	8002ad4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ae4:	f7fd fe46 	bl	8000774 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002af8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	2164      	movs	r1, #100	; 0x64
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffa6 	bl	8002a50 <SPI_EndRxTxTransaction>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff fe01 	bl	800274c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8002b4a:	e002      	b.n	8002b52 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff fdf3 	bl	8002738 <HAL_SPI_TxCpltCallback>
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e040      	b.n	8002bee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d106      	bne.n	8002b82 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fd fce3 	bl	8000548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2224      	movs	r2, #36	; 0x24
 8002b86:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f82d 	bl	8002bf8 <UART_SetConfig>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e022      	b.n	8002bee <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f957 	bl	8002e64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f9de 	bl	8002fa8 <UART_CheckIdleState>
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b8a      	ldr	r3, [pc, #552]	; (8002e4c <UART_SetConfig+0x254>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	6979      	ldr	r1, [r7, #20]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a78      	ldr	r2, [pc, #480]	; (8002e50 <UART_SetConfig+0x258>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d120      	bne.n	8002cb6 <UART_SetConfig+0xbe>
 8002c74:	4b77      	ldr	r3, [pc, #476]	; (8002e54 <UART_SetConfig+0x25c>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d817      	bhi.n	8002cb0 <UART_SetConfig+0xb8>
 8002c80:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <UART_SetConfig+0x90>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002ca5 	.word	0x08002ca5
 8002c90:	08002cab 	.word	0x08002cab
 8002c94:	08002c9f 	.word	0x08002c9f
 8002c98:	2300      	movs	r3, #0
 8002c9a:	77fb      	strb	r3, [r7, #31]
 8002c9c:	e01d      	b.n	8002cda <UART_SetConfig+0xe2>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	77fb      	strb	r3, [r7, #31]
 8002ca2:	e01a      	b.n	8002cda <UART_SetConfig+0xe2>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	77fb      	strb	r3, [r7, #31]
 8002ca8:	e017      	b.n	8002cda <UART_SetConfig+0xe2>
 8002caa:	2308      	movs	r3, #8
 8002cac:	77fb      	strb	r3, [r7, #31]
 8002cae:	e014      	b.n	8002cda <UART_SetConfig+0xe2>
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	e011      	b.n	8002cda <UART_SetConfig+0xe2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a67      	ldr	r2, [pc, #412]	; (8002e58 <UART_SetConfig+0x260>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d102      	bne.n	8002cc6 <UART_SetConfig+0xce>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e009      	b.n	8002cda <UART_SetConfig+0xe2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a64      	ldr	r2, [pc, #400]	; (8002e5c <UART_SetConfig+0x264>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d102      	bne.n	8002cd6 <UART_SetConfig+0xde>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	77fb      	strb	r3, [r7, #31]
 8002cd4:	e001      	b.n	8002cda <UART_SetConfig+0xe2>
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce2:	d15a      	bne.n	8002d9a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002ce4:	7ffb      	ldrb	r3, [r7, #31]
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d827      	bhi.n	8002d3a <UART_SetConfig+0x142>
 8002cea:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <UART_SetConfig+0xf8>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002d15 	.word	0x08002d15
 8002cf4:	08002d1d 	.word	0x08002d1d
 8002cf8:	08002d25 	.word	0x08002d25
 8002cfc:	08002d3b 	.word	0x08002d3b
 8002d00:	08002d2b 	.word	0x08002d2b
 8002d04:	08002d3b 	.word	0x08002d3b
 8002d08:	08002d3b 	.word	0x08002d3b
 8002d0c:	08002d3b 	.word	0x08002d3b
 8002d10:	08002d33 	.word	0x08002d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d14:	f7ff fa9a 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8002d18:	61b8      	str	r0, [r7, #24]
        break;
 8002d1a:	e013      	b.n	8002d44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d1c:	f7ff fab8 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8002d20:	61b8      	str	r0, [r7, #24]
        break;
 8002d22:	e00f      	b.n	8002d44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d24:	4b4e      	ldr	r3, [pc, #312]	; (8002e60 <UART_SetConfig+0x268>)
 8002d26:	61bb      	str	r3, [r7, #24]
        break;
 8002d28:	e00c      	b.n	8002d44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d2a:	f7ff fa19 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 8002d2e:	61b8      	str	r0, [r7, #24]
        break;
 8002d30:	e008      	b.n	8002d44 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d36:	61bb      	str	r3, [r7, #24]
        break;
 8002d38:	e004      	b.n	8002d44 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	77bb      	strb	r3, [r7, #30]
        break;
 8002d42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d074      	beq.n	8002e34 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	005a      	lsls	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	441a      	add	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	d916      	bls.n	8002d94 <UART_SetConfig+0x19c>
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d212      	bcs.n	8002d94 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f023 030f 	bic.w	r3, r3, #15
 8002d76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	89fb      	ldrh	r3, [r7, #14]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	89fa      	ldrh	r2, [r7, #14]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	e04f      	b.n	8002e34 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	77bb      	strb	r3, [r7, #30]
 8002d98:	e04c      	b.n	8002e34 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d9a:	7ffb      	ldrb	r3, [r7, #31]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d828      	bhi.n	8002df2 <UART_SetConfig+0x1fa>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <UART_SetConfig+0x1b0>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002dcd 	.word	0x08002dcd
 8002dac:	08002dd5 	.word	0x08002dd5
 8002db0:	08002ddd 	.word	0x08002ddd
 8002db4:	08002df3 	.word	0x08002df3
 8002db8:	08002de3 	.word	0x08002de3
 8002dbc:	08002df3 	.word	0x08002df3
 8002dc0:	08002df3 	.word	0x08002df3
 8002dc4:	08002df3 	.word	0x08002df3
 8002dc8:	08002deb 	.word	0x08002deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dcc:	f7ff fa3e 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8002dd0:	61b8      	str	r0, [r7, #24]
        break;
 8002dd2:	e013      	b.n	8002dfc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dd4:	f7ff fa5c 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8002dd8:	61b8      	str	r0, [r7, #24]
        break;
 8002dda:	e00f      	b.n	8002dfc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ddc:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <UART_SetConfig+0x268>)
 8002dde:	61bb      	str	r3, [r7, #24]
        break;
 8002de0:	e00c      	b.n	8002dfc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002de2:	f7ff f9bd 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 8002de6:	61b8      	str	r0, [r7, #24]
        break;
 8002de8:	e008      	b.n	8002dfc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dee:	61bb      	str	r3, [r7, #24]
        break;
 8002df0:	e004      	b.n	8002dfc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	77bb      	strb	r3, [r7, #30]
        break;
 8002dfa:	bf00      	nop
    }

    if (pclk != 0U)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d018      	beq.n	8002e34 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	085a      	lsrs	r2, r3, #1
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b0f      	cmp	r3, #15
 8002e1a:	d909      	bls.n	8002e30 <UART_SetConfig+0x238>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e22:	d205      	bcs.n	8002e30 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	e001      	b.n	8002e34 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e40:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	efff69f3 	.word	0xefff69f3
 8002e50:	40013800 	.word	0x40013800
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40004400 	.word	0x40004400
 8002e5c:	40004800 	.word	0x40004800
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01a      	beq.n	8002f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f62:	d10a      	bne.n	8002f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b098      	sub	sp, #96	; 0x60
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fb8:	f7fd fbdc 	bl	8000774 <HAL_GetTick>
 8002fbc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d12e      	bne.n	800302a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f88c 	bl	80030f8 <UART_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d021      	beq.n	800302a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003004:	647b      	str	r3, [r7, #68]	; 0x44
 8003006:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800300a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800300c:	e841 2300 	strex	r3, r2, [r1]
 8003010:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e6      	bne.n	8002fe6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e062      	b.n	80030f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b04      	cmp	r3, #4
 8003036:	d149      	bne.n	80030cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003040:	2200      	movs	r2, #0
 8003042:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f856 	bl	80030f8 <UART_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d03c      	beq.n	80030cc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	623b      	str	r3, [r7, #32]
   return(result);
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
 8003072:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e6      	bne.n	8003052 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3308      	adds	r3, #8
 800308a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	60fb      	str	r3, [r7, #12]
   return(result);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3308      	adds	r3, #8
 80030a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a4:	61fa      	str	r2, [r7, #28]
 80030a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	69b9      	ldr	r1, [r7, #24]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	617b      	str	r3, [r7, #20]
   return(result);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e5      	bne.n	8003084 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e011      	b.n	80030f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3758      	adds	r7, #88	; 0x58
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003108:	e049      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003110:	d045      	beq.n	800319e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003112:	f7fd fb2f 	bl	8000774 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	429a      	cmp	r2, r3
 8003120:	d302      	bcc.n	8003128 <UART_WaitOnFlagUntilTimeout+0x30>
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e048      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	d031      	beq.n	800319e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b08      	cmp	r3, #8
 8003146:	d110      	bne.n	800316a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2208      	movs	r2, #8
 800314e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f838 	bl	80031c6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2208      	movs	r2, #8
 800315a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e029      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003178:	d111      	bne.n	800319e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f81e 	bl	80031c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e00f      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d0a6      	beq.n	800310a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b095      	sub	sp, #84	; 0x54
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d6:	e853 3f00 	ldrex	r3, [r3]
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ec:	643b      	str	r3, [r7, #64]	; 0x40
 80031ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031f4:	e841 2300 	strex	r3, r2, [r1]
 80031f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e6      	bne.n	80031ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3308      	adds	r3, #8
 8003206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3308      	adds	r3, #8
 800321e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e5      	bne.n	8003200 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	2b01      	cmp	r3, #1
 800323a:	d118      	bne.n	800326e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	60bb      	str	r3, [r7, #8]
   return(result);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f023 0310 	bic.w	r3, r3, #16
 8003250:	647b      	str	r3, [r7, #68]	; 0x44
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	613b      	str	r3, [r7, #16]
   return(result);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e6      	bne.n	800323c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003282:	bf00      	nop
 8003284:	3754      	adds	r7, #84	; 0x54
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4d0d      	ldr	r5, [pc, #52]	; (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2600      	movs	r6, #0
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4d0b      	ldr	r5, [pc, #44]	; (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	; (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 f820 	bl	80032e8 <_init>
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2600      	movs	r6, #0
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	0800335c 	.word	0x0800335c
 80032cc:	0800335c 	.word	0x0800335c
 80032d0:	0800335c 	.word	0x0800335c
 80032d4:	08003360 	.word	0x08003360

080032d8 <memset>:
 80032d8:	4402      	add	r2, r0
 80032da:	4603      	mov	r3, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <_init>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr

080032f4 <_fini>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr
