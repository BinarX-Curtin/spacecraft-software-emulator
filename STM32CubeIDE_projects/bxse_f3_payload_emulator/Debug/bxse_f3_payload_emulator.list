
bxse_f3_payload_emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007784  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08007918  08007918  00017918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b88  08007b88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b90  08007b90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00002834  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200028a4  200028a4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001648b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002293  00000000  00000000  0003652b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  000387c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d08  00000000  00000000  00039570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee1a  00000000  00000000  0003a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd53  00000000  00000000  00059092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af52c  00000000  00000000  00066de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116311  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004604  00000000  00000000  00116364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078fc 	.word	0x080078fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080078fc 	.word	0x080078fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b0:	f000 b974 	b.w	8000c9c <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	9d08      	ldr	r5, [sp, #32]
 80009d2:	4604      	mov	r4, r0
 80009d4:	468e      	mov	lr, r1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d14d      	bne.n	8000a76 <__udivmoddi4+0xaa>
 80009da:	428a      	cmp	r2, r1
 80009dc:	4694      	mov	ip, r2
 80009de:	d969      	bls.n	8000ab4 <__udivmoddi4+0xe8>
 80009e0:	fab2 f282 	clz	r2, r2
 80009e4:	b152      	cbz	r2, 80009fc <__udivmoddi4+0x30>
 80009e6:	fa01 f302 	lsl.w	r3, r1, r2
 80009ea:	f1c2 0120 	rsb	r1, r2, #32
 80009ee:	fa20 f101 	lsr.w	r1, r0, r1
 80009f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80009f6:	ea41 0e03 	orr.w	lr, r1, r3
 80009fa:	4094      	lsls	r4, r2
 80009fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a00:	0c21      	lsrs	r1, r4, #16
 8000a02:	fbbe f6f8 	udiv	r6, lr, r8
 8000a06:	fa1f f78c 	uxth.w	r7, ip
 8000a0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a12:	fb06 f107 	mul.w	r1, r6, r7
 8000a16:	4299      	cmp	r1, r3
 8000a18:	d90a      	bls.n	8000a30 <__udivmoddi4+0x64>
 8000a1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a22:	f080 811f 	bcs.w	8000c64 <__udivmoddi4+0x298>
 8000a26:	4299      	cmp	r1, r3
 8000a28:	f240 811c 	bls.w	8000c64 <__udivmoddi4+0x298>
 8000a2c:	3e02      	subs	r6, #2
 8000a2e:	4463      	add	r3, ip
 8000a30:	1a5b      	subs	r3, r3, r1
 8000a32:	b2a4      	uxth	r4, r4
 8000a34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a38:	fb08 3310 	mls	r3, r8, r0, r3
 8000a3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a40:	fb00 f707 	mul.w	r7, r0, r7
 8000a44:	42a7      	cmp	r7, r4
 8000a46:	d90a      	bls.n	8000a5e <__udivmoddi4+0x92>
 8000a48:	eb1c 0404 	adds.w	r4, ip, r4
 8000a4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a50:	f080 810a 	bcs.w	8000c68 <__udivmoddi4+0x29c>
 8000a54:	42a7      	cmp	r7, r4
 8000a56:	f240 8107 	bls.w	8000c68 <__udivmoddi4+0x29c>
 8000a5a:	4464      	add	r4, ip
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a62:	1be4      	subs	r4, r4, r7
 8000a64:	2600      	movs	r6, #0
 8000a66:	b11d      	cbz	r5, 8000a70 <__udivmoddi4+0xa4>
 8000a68:	40d4      	lsrs	r4, r2
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a70:	4631      	mov	r1, r6
 8000a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a76:	428b      	cmp	r3, r1
 8000a78:	d909      	bls.n	8000a8e <__udivmoddi4+0xc2>
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	f000 80ef 	beq.w	8000c5e <__udivmoddi4+0x292>
 8000a80:	2600      	movs	r6, #0
 8000a82:	e9c5 0100 	strd	r0, r1, [r5]
 8000a86:	4630      	mov	r0, r6
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	fab3 f683 	clz	r6, r3
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d14a      	bne.n	8000b2c <__udivmoddi4+0x160>
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xd4>
 8000a9a:	4282      	cmp	r2, r0
 8000a9c:	f200 80f9 	bhi.w	8000c92 <__udivmoddi4+0x2c6>
 8000aa0:	1a84      	subs	r4, r0, r2
 8000aa2:	eb61 0303 	sbc.w	r3, r1, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	469e      	mov	lr, r3
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	d0e0      	beq.n	8000a70 <__udivmoddi4+0xa4>
 8000aae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ab2:	e7dd      	b.n	8000a70 <__udivmoddi4+0xa4>
 8000ab4:	b902      	cbnz	r2, 8000ab8 <__udivmoddi4+0xec>
 8000ab6:	deff      	udf	#255	; 0xff
 8000ab8:	fab2 f282 	clz	r2, r2
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	f040 8092 	bne.w	8000be6 <__udivmoddi4+0x21a>
 8000ac2:	eba1 010c 	sub.w	r1, r1, ip
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f fe8c 	uxth.w	lr, ip
 8000ace:	2601      	movs	r6, #1
 8000ad0:	0c20      	lsrs	r0, r4, #16
 8000ad2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ad6:	fb07 1113 	mls	r1, r7, r3, r1
 8000ada:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ade:	fb0e f003 	mul.w	r0, lr, r3
 8000ae2:	4288      	cmp	r0, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x12c>
 8000ae6:	eb1c 0101 	adds.w	r1, ip, r1
 8000aea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x12a>
 8000af0:	4288      	cmp	r0, r1
 8000af2:	f200 80cb 	bhi.w	8000c8c <__udivmoddi4+0x2c0>
 8000af6:	4643      	mov	r3, r8
 8000af8:	1a09      	subs	r1, r1, r0
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b00:	fb07 1110 	mls	r1, r7, r0, r1
 8000b04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b08:	fb0e fe00 	mul.w	lr, lr, r0
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x156>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b18:	d202      	bcs.n	8000b20 <__udivmoddi4+0x154>
 8000b1a:	45a6      	cmp	lr, r4
 8000b1c:	f200 80bb 	bhi.w	8000c96 <__udivmoddi4+0x2ca>
 8000b20:	4608      	mov	r0, r1
 8000b22:	eba4 040e 	sub.w	r4, r4, lr
 8000b26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b2a:	e79c      	b.n	8000a66 <__udivmoddi4+0x9a>
 8000b2c:	f1c6 0720 	rsb	r7, r6, #32
 8000b30:	40b3      	lsls	r3, r6
 8000b32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b42:	431c      	orrs	r4, r3
 8000b44:	40f9      	lsrs	r1, r7
 8000b46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b52:	0c20      	lsrs	r0, r4, #16
 8000b54:	fa1f fe8c 	uxth.w	lr, ip
 8000b58:	fb09 1118 	mls	r1, r9, r8, r1
 8000b5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b60:	fb08 f00e 	mul.w	r0, r8, lr
 8000b64:	4288      	cmp	r0, r1
 8000b66:	fa02 f206 	lsl.w	r2, r2, r6
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b8>
 8000b6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b74:	f080 8088 	bcs.w	8000c88 <__udivmoddi4+0x2bc>
 8000b78:	4288      	cmp	r0, r1
 8000b7a:	f240 8085 	bls.w	8000c88 <__udivmoddi4+0x2bc>
 8000b7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b82:	4461      	add	r1, ip
 8000b84:	1a09      	subs	r1, r1, r0
 8000b86:	b2a4      	uxth	r4, r4
 8000b88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b98:	458e      	cmp	lr, r1
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1e2>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ba4:	d26c      	bcs.n	8000c80 <__udivmoddi4+0x2b4>
 8000ba6:	458e      	cmp	lr, r1
 8000ba8:	d96a      	bls.n	8000c80 <__udivmoddi4+0x2b4>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4461      	add	r1, ip
 8000bae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bb6:	eba1 010e 	sub.w	r1, r1, lr
 8000bba:	42a1      	cmp	r1, r4
 8000bbc:	46c8      	mov	r8, r9
 8000bbe:	46a6      	mov	lr, r4
 8000bc0:	d356      	bcc.n	8000c70 <__udivmoddi4+0x2a4>
 8000bc2:	d053      	beq.n	8000c6c <__udivmoddi4+0x2a0>
 8000bc4:	b15d      	cbz	r5, 8000bde <__udivmoddi4+0x212>
 8000bc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bca:	eb61 010e 	sbc.w	r1, r1, lr
 8000bce:	fa01 f707 	lsl.w	r7, r1, r7
 8000bd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bd6:	40f1      	lsrs	r1, r6
 8000bd8:	431f      	orrs	r7, r3
 8000bda:	e9c5 7100 	strd	r7, r1, [r5]
 8000bde:	2600      	movs	r6, #0
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	f1c2 0320 	rsb	r3, r2, #32
 8000bea:	40d8      	lsrs	r0, r3
 8000bec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	4301      	orrs	r1, r0
 8000bf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c04:	fb07 3610 	mls	r6, r7, r0, r3
 8000c08:	0c0b      	lsrs	r3, r1, #16
 8000c0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c12:	429e      	cmp	r6, r3
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x260>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c22:	d22f      	bcs.n	8000c84 <__udivmoddi4+0x2b8>
 8000c24:	429e      	cmp	r6, r3
 8000c26:	d92d      	bls.n	8000c84 <__udivmoddi4+0x2b8>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1b9b      	subs	r3, r3, r6
 8000c2e:	b289      	uxth	r1, r1
 8000c30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c34:	fb07 3316 	mls	r3, r7, r6, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x28a>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c4c:	d216      	bcs.n	8000c7c <__udivmoddi4+0x2b0>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d914      	bls.n	8000c7c <__udivmoddi4+0x2b0>
 8000c52:	3e02      	subs	r6, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	1ac9      	subs	r1, r1, r3
 8000c58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c5c:	e738      	b.n	8000ad0 <__udivmoddi4+0x104>
 8000c5e:	462e      	mov	r6, r5
 8000c60:	4628      	mov	r0, r5
 8000c62:	e705      	b.n	8000a70 <__udivmoddi4+0xa4>
 8000c64:	4606      	mov	r6, r0
 8000c66:	e6e3      	b.n	8000a30 <__udivmoddi4+0x64>
 8000c68:	4618      	mov	r0, r3
 8000c6a:	e6f8      	b.n	8000a5e <__udivmoddi4+0x92>
 8000c6c:	454b      	cmp	r3, r9
 8000c6e:	d2a9      	bcs.n	8000bc4 <__udivmoddi4+0x1f8>
 8000c70:	ebb9 0802 	subs.w	r8, r9, r2
 8000c74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c78:	3801      	subs	r0, #1
 8000c7a:	e7a3      	b.n	8000bc4 <__udivmoddi4+0x1f8>
 8000c7c:	4646      	mov	r6, r8
 8000c7e:	e7ea      	b.n	8000c56 <__udivmoddi4+0x28a>
 8000c80:	4620      	mov	r0, r4
 8000c82:	e794      	b.n	8000bae <__udivmoddi4+0x1e2>
 8000c84:	4640      	mov	r0, r8
 8000c86:	e7d1      	b.n	8000c2c <__udivmoddi4+0x260>
 8000c88:	46d0      	mov	r8, sl
 8000c8a:	e77b      	b.n	8000b84 <__udivmoddi4+0x1b8>
 8000c8c:	3b02      	subs	r3, #2
 8000c8e:	4461      	add	r1, ip
 8000c90:	e732      	b.n	8000af8 <__udivmoddi4+0x12c>
 8000c92:	4630      	mov	r0, r6
 8000c94:	e709      	b.n	8000aaa <__udivmoddi4+0xde>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	e742      	b.n	8000b22 <__udivmoddi4+0x156>

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>:
struct IsChar
    : integral_constant<bool, is_integral<T>::value && sizeof(T) == 1> {};
class ZeroTerminatedRamString {
 public:
  static const size_t typeSortKey = 3;
  ZeroTerminatedRamString(const char* str) : str_(str) {}
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>:
  bool isNull() const {
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
    return !str_;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bf0c      	ite	eq
 8000cce:	2301      	moveq	r3, #1
 8000cd0:	2300      	movne	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
  }
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>:
  size_t size() const {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    return str_ ? ::strlen(str_) : 0;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x1e>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fa6b 	bl	80001d0 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e000      	b.n	8000d00 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x20>
 8000cfe:	2300      	movs	r3, #0
  }
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>:
  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>:
  const char* data() const {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    return str_;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
  }
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>:
    return AdaptedString(reinterpret_cast<const char*>(p));
  }
};
class StaticStringAdapter : public ZeroTerminatedRamString {
 public:
  StaticStringAdapter(const char* str) : ZeroTerminatedRamString(str) {}
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6839      	ldr	r1, [r7, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ffa6 	bl	8000ca0 <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>:
  StringStoragePolicy::Link storagePolicy() const {
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
    return StringStoragePolicy::Link();
 8000d66:	bf00      	nop
  }
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>:
};
template <>
struct StringAdapter<const char*, void> {
  typedef StaticStringAdapter AdaptedString;
  static AdaptedString adapt(const char* p) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    return AdaptedString(p);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ffdc 	bl	8000d40 <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>
 8000d88:	68fb      	ldr	r3, [r7, #12]
  }
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>:
 public:
  enum Ownership { Copied, Linked };
  JsonString() : data_(0), size_(0), ownership_(Linked) {}
  JsonString(const char* data, Ownership ownership = Linked)
      : data_(data), size_(data ? ::strlen(data) : 0), ownership_(ownership) {}
  JsonString(const char* data, size_t sz, Ownership ownership = Linked)
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	70fb      	strb	r3, [r7, #3]
      : data_(data), size_(sz), ownership_(ownership) {}
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	78fa      	ldrb	r2, [r7, #3]
 8000db0:	721a      	strb	r2, [r3, #8]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>:
  const char* c_str() const {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
    return data_;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
  }
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>:
  bool isNull() const {
    return !data_;
  }
  bool isLinked() const {
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    return ownership_ == Linked;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7a1b      	ldrb	r3, [r3, #8]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
  }
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>:
  size_t size() const {
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
    return size_;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
  }
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>:
  explicit operator bool() const {
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
    return data_ != 0;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
  }
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>:
  size_t memoryUsage() const;
  size_t size() const;
  VariantSlot* addSlot(MemoryPool*);
  void removeSlot(VariantSlot* slot);
  bool copyFrom(const CollectionData& src, MemoryPool* pool);
  VariantSlot* head() const {
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
    return head_;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
  }
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:
  VariantContent content_;
  uint8_t flags_;
  VariantSlotDiff next_;
  const char* key_;
 public:
  VariantData* data() {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&content_);
 8000e54:	687b      	ldr	r3, [r7, #4]
  }
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:
  const VariantData* data() const {
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const VariantData*>(&content_);
 8000e6a:	687b      	ldr	r3, [r7, #4]
  }
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:
  VariantSlot* next() {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    return next_ ? this + next_ : 0;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x20>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	e000      	b.n	8000e9a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x22>
 8000e98:	2300      	movs	r3, #0
  }
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:
  const VariantSlot* next() const {
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
    return const_cast<VariantSlot*>(this)->next();
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffe2 	bl	8000e78 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8000eb4:	4603      	mov	r3, r0
  }
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>:
    return slot;
  }
  const VariantSlot* next(size_t distance) const {
    return const_cast<VariantSlot*>(this)->next(distance);
  }
  void setNext(VariantSlot* slot) {
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(!slot || slot - this >=
                                    numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(!slot || slot - this <=
                                    numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot ? slot - this : 0);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1c>
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	111b      	asrs	r3, r3, #4
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	e000      	b.n	8000edc <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1e>
 8000eda:	2200      	movs	r2, #0
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	815a      	strh	r2, [r3, #10]
  }
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>:
  void setNextNotNull(VariantSlot* slot) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    ARDUINOJSON_ASSERT(slot - this >=
                       numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(slot - this <=
                       numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot - this);
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	111b      	asrs	r3, r3, #4
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	815a      	strh	r2, [r3, #10]
  }
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>:
  void setKey(JsonString k) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	4638      	mov	r0, r7
 8000f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(k);
    if (k.isLinked())
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff59 	bl	8000dd8 <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d007      	beq.n	8000f3c <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x2c>
      flags_ &= VALUE_MASK;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	7a1b      	ldrb	r3, [r3, #8]
 8000f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	721a      	strb	r2, [r3, #8]
 8000f3a:	e006      	b.n	8000f4a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x3a>
    else
      flags_ |= OWNED_KEY_BIT;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	7a1b      	ldrb	r3, [r3, #8]
 8000f40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	721a      	strb	r2, [r3, #8]
    key_ = k.c_str();
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff37 	bl	8000dc0 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	60da      	str	r2, [r3, #12]
  }
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>:
  const char* key() const {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    return key_;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
  }
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>:
  bool ownsKey() const {
    return (flags_ & OWNED_KEY_BIT) != 0;
  }
  void clear() {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    next_ = 0;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	815a      	strh	r2, [r3, #10]
    flags_ = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	721a      	strb	r2, [r3, #8]
    key_ = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  }
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>:
#define JSON_OBJECT_SIZE(NUMBER_OF_ELEMENTS) \
  ((NUMBER_OF_ELEMENTS) * sizeof(ArduinoJson::detail::VariantSlot))
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE
class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000f9e:	b480      	push	{r7}
 8000fa0:	b085      	sub	sp, #20
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
      : begin_(buf),
        left_(buf),
        right_(buf ? buf + capa : 0),
        end_(buf ? buf + capa : 0),
        overflowed_(false) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	605a      	str	r2, [r3, #4]
        right_(buf ? buf + capa : 0),
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x26>
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	e000      	b.n	8000fc6 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x28>
 8000fc4:	2300      	movs	r3, #0
        overflowed_(false) {
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	6093      	str	r3, [r2, #8]
        end_(buf ? buf + capa : 0),
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3a>
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	e000      	b.n	8000fda <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3c>
 8000fd8:	2300      	movs	r3, #0
        overflowed_(false) {
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	60d3      	str	r3, [r2, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	741a      	strb	r2, [r3, #16]
    ARDUINOJSON_ASSERT(isAligned(begin_));
    ARDUINOJSON_ASSERT(isAligned(right_));
    ARDUINOJSON_ASSERT(isAligned(end_));
  }
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool4sizeEv>:
    return begin_;  // NOLINT(clang-analyzer-unix.Malloc)
  }
  size_t capacity() const {
    return size_t(end_ - begin_);
  }
  size_t size() const {
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    return size_t(left_ - begin_ + end_ - right_);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6851      	ldr	r1, [r2, #4]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	6812      	ldr	r2, [r2, #0]
 8001006:	1a8a      	subs	r2, r1, r2
 8001008:	441a      	add	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	1ad3      	subs	r3, r2, r3
  }
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>:
  bool overflowed() const {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    return overflowed_;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7c1b      	ldrb	r3, [r3, #16]
  }
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>:
  VariantSlot* allocVariant() {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f001 f9f2 	bl	8002426 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>
 8001042:	4603      	mov	r3, r0
  }
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>:
  void clear() {
    left_ = begin_;
    right_ = end_;
    overflowed_ = false;
  }
  bool canAlloc(size_t bytes) const {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
    return left_ + bytes <= right_;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	441a      	add	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	429a      	cmp	r2, r3
 8001064:	bf94      	ite	ls
 8001066:	2301      	movls	r3, #1
 8001068:	2300      	movhi	r3, #0
 800106a:	b2db      	uxtb	r3, r3
  }
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>:
  }
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }
  void* allocRight(size_t bytes) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) {
 8001082:	6839      	ldr	r1, [r7, #0]
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ffe1 	bl	800104c <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>
 800108a:	4603      	mov	r3, r0
 800108c:	f083 0301 	eor.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x28>
      overflowed_ = true;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	741a      	strb	r2, [r3, #16]
      return 0;
 800109c:	2300      	movs	r3, #0
 800109e:	e008      	b.n	80010b2 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x3a>
    }
    right_ -= bytes;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	425b      	negs	r3, r3
 80010a8:	441a      	add	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]
    return right_;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
  }
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE
class VariantData {
  VariantContent content_;  // must be first to allow cast from array to variant
  uint8_t flags_;
 public:
  VariantData() : flags_(VALUE_IS_NULL) {}
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	721a      	strb	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>:
    return (flags_ & NUMBER_BIT) != 0;
  }
  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }
  bool isObject() const {
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
    return (flags_ & VALUE_IS_OBJECT) != 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7a1b      	ldrb	r3, [r3, #8]
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
  }
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>:
  bool isNull() const {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    return type() == VALUE_IS_NULL;
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f861 	bl	80011cc <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf0c      	ite	eq
 8001110:	2301      	moveq	r3, #1
 8001112:	2300      	movne	r3, #0
 8001114:	b2db      	uxtb	r3, r3
  }
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>:
  template <typename T>
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setType(VALUE_IS_SIGNED_INTEGER);
    content_.asSignedInteger = value;
  }
  void setNull() {
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8001126:	2100      	movs	r1, #0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f85e 	bl	80011ea <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
  }
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>:
  void setString(JsonString s) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	4638      	mov	r0, r7
 8001140:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(s);
    if (s.isLinked())
 8001144:	463b      	mov	r3, r7
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fe46 	bl	8000dd8 <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x26>
      setType(VALUE_IS_LINKED_STRING);
 8001152:	2104      	movs	r1, #4
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f000 f848 	bl	80011ea <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
 800115a:	e003      	b.n	8001164 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x2e>
    else
      setType(VALUE_IS_OWNED_STRING);
 800115c:	2105      	movs	r1, #5
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 f843 	bl	80011ea <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asString.data = s.c_str();
 8001164:	463b      	mov	r3, r7
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe2a 	bl	8000dc0 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]
    content_.asString.size = s.size();
 8001172:	463b      	mov	r3, r7
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fe40 	bl	8000dfa <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>
 800117a:	4602      	mov	r2, r0
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
  }
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_ZN11ArduinoJson8V6213HB26detail11VariantData7toArrayEv>:
  CollectionData& toArray() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8001190:	2140      	movs	r1, #64	; 0x40
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f829 	bl	80011ea <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asCollection.clear();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f961 	bl	8001462 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>
    return content_.asCollection;
 80011a0:	687b      	ldr	r3, [r7, #4]
  }
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>:
  CollectionData& toObject() {
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 80011b2:	2120      	movs	r1, #32
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f818 	bl	80011ea <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asCollection.clear();
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f950 	bl	8001462 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>
    return content_.asCollection;
 80011c2:	687b      	ldr	r3, [r7, #4]
  }
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>:
    if (flags_ & OWNED_VALUE_BIT)
      content_.asString.data += stringDistance;
    if (flags_ & COLLECTION_MASK)
      content_.asCollection.movePointers(stringDistance, variantDistance);
  }
  uint8_t type() const {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    return flags_ & VALUE_MASK;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7a1b      	ldrb	r3, [r3, #8]
 80011d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011dc:	b2db      	uxtb	r3, r3
  }
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>:
      return true;
    }
    return storeString(pool, value, VariantStringSetter(this));
  }
 private:
  void setType(uint8_t t) {
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	70fb      	strb	r3, [r7, #3]
    flags_ &= OWNED_KEY_BIT;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7a1b      	ldrb	r3, [r3, #8]
 80011fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	721a      	strb	r2, [r3, #8]
    flags_ |= t;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7a1a      	ldrb	r2, [r3, #8]
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	4313      	orrs	r3, r2
 800120c:	b2da      	uxtb	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	721a      	strb	r2, [r3, #8]
  }
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>:
  struct VariantStringSetter {
    VariantStringSetter(VariantData* instance) : instance_(instance) {}
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_ZN11ArduinoJson8V6213HB26detail14variantToArrayEPNS1_11VariantDataE>:
  return var != 0 ? var->setString(value, pool) : 0;
}
inline size_t variantSize(const VariantData* var) {
  return var != 0 ? var->size() : 0;
}
inline CollectionData* variantToArray(VariantData* var) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if (!var)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <_ZN11ArduinoJson8V6213HB26detail14variantToArrayEPNS1_11VariantDataE+0x12>
    return 0;
 800124a:	2300      	movs	r3, #0
 800124c:	e003      	b.n	8001256 <_ZN11ArduinoJson8V6213HB26detail14variantToArrayEPNS1_11VariantDataE+0x1a>
  return &var->toArray();
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff9a 	bl	8001188 <_ZN11ArduinoJson8V6213HB26detail11VariantData7toArrayEv>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>:
class JsonVariantConst : public detail::VariantTag,
                         public detail::VariantOperators<JsonVariantConst> {
  friend class detail::VariantAttorney;
 public:
  JsonVariantConst() : data_(0) {}
  explicit JsonVariantConst(const detail::VariantData* data) : data_(data) {}
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>:
      typename detail::enable_if<detail::IsString<TChar*>::value, bool>::type
      containsKey(TChar* key) const {
    return variantGetMember(getData(), detail::adaptString(key)) != 0;
  }
 protected:
  const detail::VariantData* getData() const {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    return data_;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
  }
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_ZN11ArduinoJson8V6213HB211JsonVariantC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE
class JsonVariant : public detail::VariantRefBase<JsonVariant>,
                    public detail::VariantOperators<JsonVariant> {
  friend class detail::VariantAttorney;
 public:
  JsonVariant() : data_(0), pool_(0) {}
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>:
  JsonVariant(detail::MemoryPool* pool, detail::VariantData* data)
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
      : data_(data), pool_(pool) {}
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>:
  }
};
ARDUINOJSON_END_PUBLIC_NAMESPACE
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE
struct SlotKeySetter {
  SlotKeySetter(VariantSlot* instance) : instance_(instance) {}
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_ZN11ArduinoJson8V6213HB26detail8slotDataEPNS1_11VariantSlotE>:
    n++;
    var = var->next();
  }
  return n;
}
inline VariantData* slotData(VariantSlot* slot) {
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8001302:	687b      	ldr	r3, [r7, #4]
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_ZNK11ArduinoJson8V6213HB29JsonArray3addEv>:
    return JsonVariant(pool_, reinterpret_cast<detail::VariantData*>(data));
  }
  operator JsonArrayConst() const {
    return JsonArrayConst(data_);
  }
  JsonVariant add() const {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
    if (!data_)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d103      	bne.n	800132a <_ZNK11ArduinoJson8V6213HB29JsonArray3addEv+0x1a>
      return JsonVariant();
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffb6 	bl	8001294 <_ZN11ArduinoJson8V6213HB211JsonVariantC1Ev>
 8001328:	e00f      	b.n	800134a <_ZNK11ArduinoJson8V6213HB29JsonArray3addEv+0x3a>
    return JsonVariant(pool_, data_->addElement(pool_));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685c      	ldr	r4, [r3, #4]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f000 f880 	bl	800143e <_ZN11ArduinoJson8V6213HB26detail14CollectionData10addElementEPNS1_10MemoryPoolE>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4621      	mov	r1, r4
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ffb6 	bl	80012b6 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
  }
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <_ZNK11ArduinoJson8V6213HB212JsonDocument11memoryUsageEv>:
    return getVariant().template is<T>();
  }
  bool isNull() const {
    return getVariant().isNull();
  }
  size_t memoryUsage() const {
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
    return pool_.size();
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe48 	bl	8000ff2 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool4sizeEv>
 8001362:	4603      	mov	r3, r0
  }
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>:
    return getVariant();
  }
 protected:
  JsonDocument() : pool_(0, 0) {}
  JsonDocument(detail::MemoryPool pool) : pool_(pool) {}
  JsonDocument(char* buf, size_t capa) : pool_(buf, capa) {}
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fe0d 	bl	8000f9e <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3318      	adds	r3, #24
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe96 	bl	80010ba <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>:
    pool_ = pool;
  }
  JsonVariant getVariant() {
    return JsonVariant(&pool_, &data_);
  }
  JsonVariantConst getVariant() const {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    return JsonVariantConst(&data_);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0218 	add.w	r2, r3, #24
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff56 	bl	800125e <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 80013b2:	68fb      	ldr	r3, [r7, #12]
  }
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>:
  detail::MemoryPool pool_;
  detail::VariantData data_;
 protected:
  detail::MemoryPool* getPool() {
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    return &pool_;
 80013c4:	687b      	ldr	r3, [r7, #4]
  }
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>:
    return &data_;
  }
  const detail::VariantData* getData() const {
    return &data_;
  }
  detail::VariantData* getOrCreateData() {
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
    return &data_;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3318      	adds	r3, #24
  }
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>:
copyArray(const TSource& src, T& dst) {
  return copyArray(src.template as<JsonArrayConst>(), dst);
}
ARDUINOJSON_END_PUBLIC_NAMESPACE
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE
inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f7ff fe1d 	bl	8001034 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>
 80013fa:	60f8      	str	r0, [r7, #12]
  if (!slot)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x1c>
    return 0;
 8001402:	2300      	movs	r3, #0
 8001404:	e017      	b.n	8001436 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x4c>
  if (tail_) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x38>
    ARDUINOJSON_ASSERT(pool->owns(tail_));  // Can't alter a linked array/object
    tail_->setNextNotNull(slot);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fd69 	bl	8000eec <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>
    tail_ = slot;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	e005      	b.n	800142e <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x44>
  } else {
    head_ = slot;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	601a      	str	r2, [r3, #0]
    tail_ = slot;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	605a      	str	r2, [r3, #4]
  }
  slot->clear();
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff fda2 	bl	8000f78 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>
  return slot;
 8001434:	68fb      	ldr	r3, [r7, #12]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_ZN11ArduinoJson8V6213HB26detail14CollectionData10addElementEPNS1_10MemoryPoolE>:
inline VariantData* CollectionData::addElement(MemoryPool* pool) {
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8001448:	6839      	ldr	r1, [r7, #0]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffcd 	bl	80013ea <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 8001450:	4603      	mov	r3, r0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff51 	bl	80012fa <_ZN11ArduinoJson8V6213HB26detail8slotDataEPNS1_11VariantSlotE>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>:
    removeSlot(slot);
    return 0;
  }
  return slot->data();
}
inline void CollectionData::clear() {
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  head_ = 0;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
  tail_ = 0;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>:
inline VariantSlot* CollectionData::getSlot(size_t index) const {
  if (!head_)
    return 0;
  return head_->next(index);
}
inline VariantSlot* CollectionData::getPreviousSlot(VariantSlot* target) const {
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
  VariantSlot* current = head_;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  while (current) {
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00c      	beq.n	80014b2 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x30>
    VariantSlot* next = current->next();
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff fced 	bl	8000e78 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800149e:	60b8      	str	r0, [r7, #8]
    if (next == target)
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d101      	bne.n	80014ac <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x2a>
      return current;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	e003      	b.n	80014b4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x32>
    current = next;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60fb      	str	r3, [r7, #12]
  while (current) {
 80014b0:	e7ef      	b.n	8001492 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x10>
  }
  return 0;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>:
    slot = addSlot(pool);
    index--;
  }
  return slotData(slot);
}
inline void CollectionData::removeSlot(VariantSlot* slot) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  if (!slot)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01a      	beq.n	8001502 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x46>
    return;
  VariantSlot* prev = getPreviousSlot(slot);
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffd7 	bl	8001482 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>
 80014d4:	60f8      	str	r0, [r7, #12]
  VariantSlot* next = slot->next();
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f7ff fcce 	bl	8000e78 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 80014dc:	60b8      	str	r0, [r7, #8]
  if (prev)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x32>
    prev->setNext(next);
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fce9 	bl	8000ebe <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>
 80014ec:	e002      	b.n	80014f4 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x38>
  else
    head_ = next;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	601a      	str	r2, [r3, #0]
  if (!next)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d104      	bne.n	8001504 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    tail_ = prev;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	e000      	b.n	8001504 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    return;
 8001502:	bf00      	nop
}
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>:
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return MemberProxy<TDerived, TString>(derived(), key);
}
class EscapeSequence {
 public:
  static char escapeChar(char c) {
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8001514:	2001      	movs	r0, #1
 8001516:	f000 f815 	bl	8001544 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>
 800151a:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x2e>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3301      	adds	r3, #1
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	79fa      	ldrb	r2, [r7, #7]
 800152c:	429a      	cmp	r2, r3
 800152e:	d003      	beq.n	8001538 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x2e>
      p += 2;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3302      	adds	r3, #2
 8001534:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8001536:	e7f1      	b.n	800151c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x12>
    }
    return p[0];
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	781b      	ldrb	r3, [r3, #0]
  }
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>:
        return p[1];
      p += 2;
    }
  }
 private:
  static const char* escapeTable(bool excludeSolidus) {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
    return &"//\"\"\\\\b\bf\fn\nr\rt\t"[excludeSolidus ? 2 : 0];
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x14>
 8001554:	2302      	movs	r3, #2
 8001556:	e000      	b.n	800155a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x16>
 8001558:	2300      	movs	r3, #0
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x28>)
 800155c:	4413      	add	r3, r2
  }
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	08007918 	.word	0x08007918

08001570 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriterC1EPcj>:
 private:
  TDestination* dest_;
};
class StaticStringWriter {
 public:
  StaticStringWriter(char* buf, size_t size) : end(buf + size), p(buf) {}
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	441a      	add	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEh>:
  size_t write(uint8_t c) {
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
    if (p >= end)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d301      	bcc.n	80015b6 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEh+0x1c>
      return 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e007      	b.n	80015c6 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEh+0x2c>
    *p++ = static_cast<char>(c);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	1c59      	adds	r1, r3, #1
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6051      	str	r1, [r2, #4]
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	701a      	strb	r2, [r3, #0]
    return 1;
 80015c4:	2301      	movs	r3, #1
  }
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj>:
  size_t write(const uint8_t* s, size_t n) {
 80015d2:	b480      	push	{r7}
 80015d4:	b087      	sub	sp, #28
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
    char* begin = p;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	617b      	str	r3, [r7, #20]
    while (p < end && n > 0) {
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d210      	bcs.n	8001612 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj+0x40>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00d      	beq.n	8001612 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj+0x40>
      *p++ = static_cast<char>(*s++);
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	1c53      	adds	r3, r2, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	1c58      	adds	r0, r3, #1
 8001602:	68f9      	ldr	r1, [r7, #12]
 8001604:	6048      	str	r0, [r1, #4]
 8001606:	7812      	ldrb	r2, [r2, #0]
 8001608:	701a      	strb	r2, [r3, #0]
      n--;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3b01      	subs	r3, #1
 800160e:	607b      	str	r3, [r7, #4]
    while (p < end && n > 0) {
 8001610:	e7e8      	b.n	80015e4 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj+0x12>
    }
    return size_t(p - begin);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	1ad3      	subs	r3, r2, r3
  }
 800161a:	4618      	mov	r0, r3
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_ZN11ArduinoJson8V6213HB213serializeJsonENS0_16JsonVariantConstEPvj>:
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
}
inline size_t serializeJson(JsonVariantConst source, void* buffer,
                            size_t bufferSize) {
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  using namespace detail;
  return serialize<JsonSerializer>(source, buffer, bufferSize);
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 ff02 	bl	8002440 <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_14JsonSerializerEEENS1_9enable_ifIXsrT_INS1_18StaticStringWriterEE12producesTextEjE4typeENS0_16JsonVariantConstEPvj>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>:
    return data && data->isFloat();
  }
};
template <>
struct Converter<const char*> : private detail::VariantAttorney {
  static void toJson(const char* src, JsonVariant dst) {
 8001646:	b590      	push	{r4, r7, lr}
 8001648:	b087      	sub	sp, #28
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	e883 0006 	stmia.w	r3, {r1, r2}
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	613b      	str	r3, [r7, #16]
    return data_;
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	681c      	ldr	r4, [r3, #0]
    return client.getData();
 800165c:	bf00      	nop
    variantSetString(getData(dst), detail::adaptString(src), getPool(dst));
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 ff11 	bl	8002486 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8001664:	4601      	mov	r1, r0
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	617b      	str	r3, [r7, #20]
    return pool_;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	685b      	ldr	r3, [r3, #4]
    return client.getPool();
 800166e:	bf00      	nop
    variantSetString(getData(dst), detail::adaptString(src), getPool(dst));
 8001670:	461a      	mov	r2, r3
 8001672:	4620      	mov	r0, r4
 8001674:	f000 ff13 	bl	800249e <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>
  }
 8001678:	bf00      	nop
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd90      	pop	{r4, r7, pc}

08001680 <HAL_SPI_TxCpltCallback>:
// Create a buffer where you will store the data
uint8_t buffer[kDataSize];
bool waiting_for_transmision= false;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    waiting_for_transmision=false;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_SPI_TxCpltCallback+0x24>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	2108      	movs	r1, #8
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f002 fe77 	bl	8004388 <HAL_GPIO_WritePin>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20002888 	.word	0x20002888

080016a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80016a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ac:	f5ad 5d23 	sub.w	sp, sp, #10432	; 0x28c0
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80016b4:	f002 fb1c 	bl	8003cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b8:	f000 fda0 	bl	80021fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016bc:	f000 fe56 	bl	800236c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80016c0:	f000 fe20 	bl	8002304 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 80016c4:	f000 fde0 	bl	8002288 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  // Make sure the GPIO is set to low
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2108      	movs	r1, #8
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f002 fe5a 	bl	8004388 <HAL_GPIO_WritePin>
//  for (uint16_t i = 0; i < sizeof(random_msg); i++) {
//    buffer[i] = random_msg[i];
//  }

//
  StaticJsonDocument<kDataSize> doc;
 80016d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016d8:	3b38      	subs	r3, #56	; 0x38
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fef9 	bl	80024d2 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj10000EEC1Ev>
 80016e0:	4bb6      	ldr	r3, [pc, #728]	; (80019bc <main+0x314>)
 80016e2:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80016e6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80016f0:	f103 0308 	add.w	r3, r3, #8
 80016f4:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80016f8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001702:	3b38      	subs	r3, #56	; 0x38
 8001704:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001708:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001712:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800171c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001720:	6013      	str	r3, [r2, #0]
      : upstream_(upstream), key_(key) {}
 8001722:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001726:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001730:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 800173c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001746:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	605a      	str	r2, [r3, #4]
    return {*this, key};
 800174e:	bf00      	nop
 8001750:	4b9b      	ldr	r3, [pc, #620]	; (80019c0 <main+0x318>)
 8001752:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 8001756:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8001760:	f103 0308 	add.w	r3, r3, #8
 8001764:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 8001768:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 8001772:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 800177c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 8001786:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 8001790:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 800179a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 80017a4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80017a8:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(derived());
 80017aa:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 80017ae:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	f001 f99d 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 80017be:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 80017c8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 80017d2:	f102 0220 	add.w	r2, r2, #32
 80017d6:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(upstream_);
 80017d8:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 80017dc:	f103 0320 	add.w	r3, r3, #32
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 80017e8:	f102 021c 	add.w	r2, r2, #28
 80017ec:	6013      	str	r3, [r2, #0]
    return client.getPool();
 80017ee:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 80017f2:	f103 031c 	add.w	r3, r3, #28
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	f7ff fde0 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 80017fc:	4604      	mov	r4, r0
 80017fe:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 8001800:	bf00      	nop
    return client.getPool();
 8001802:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8001804:	bf00      	nop
 8001806:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 800180a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 8001814:	f102 0218 	add.w	r2, r2, #24
 8001818:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getOrCreateData(derived());
 800181a:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 800181e:	f103 0318 	add.w	r3, r3, #24
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	f001 f965 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8001828:	4603      	mov	r3, r0
 800182a:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 800182e:	f102 0214 	add.w	r2, r2, #20
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 8001838:	f103 0314 	add.w	r3, r3, #20
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 8001842:	f102 0210 	add.w	r2, r2, #16
 8001846:	6013      	str	r3, [r2, #0]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8001848:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 800184c:	f103 0310 	add.w	r3, r3, #16
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 8001858:	f102 020c 	add.w	r2, r2, #12
 800185c:	6013      	str	r3, [r2, #0]
    return client.getOrCreateData();
 800185e:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 8001862:	f103 030c 	add.w	r3, r3, #12
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	f7ff fdb3 	bl	80013d2 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800186c:	4605      	mov	r5, r0
 800186e:	bf00      	nop
                                 adaptString(key_),
 8001870:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 8001874:	f103 0310 	add.w	r3, r3, #16
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fe02 	bl	8002486 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8001882:	4606      	mov	r6, r0
 8001884:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 8001888:	f103 0310 	add.w	r3, r3, #16
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 8001894:	f102 0208 	add.w	r2, r2, #8
 8001898:	6013      	str	r3, [r2, #0]
    return client.getPool();
 800189a:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 800189e:	f103 0308 	add.w	r3, r3, #8
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	f7ff fd8a 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 80018a8:	4603      	mov	r3, r0
 80018aa:	bf00      	nop
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 80018ac:	461a      	mov	r2, r3
 80018ae:	4631      	mov	r1, r6
 80018b0:	4628      	mov	r0, r5
 80018b2:	f001 fce7 	bl	8003284 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 80018b6:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 80018b8:	bf00      	nop
    return client.getOrCreateData();
 80018ba:	bf00      	nop
    return VariantAttorney::getOrCreateData(derived());
 80018bc:	bf00      	nop
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getPool(), getData());
}
template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
  return JsonVariant(getPool(), getOrCreateData());
 80018be:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80018c2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80018c6:	4621      	mov	r1, r4
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fcf4 	bl	80012b6 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T*>::toJson(value, getOrCreateVariant());
 80018ce:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 80018d2:	f103 0308 	add.w	r3, r3, #8
 80018d6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018de:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 80018e2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	f7ff fead 	bl	8001646 <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>
 80018ec:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 80018f0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 80018fa:	f102 0204 	add.w	r2, r2, #4
 80018fe:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(derived());
 8001900:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 8001904:	f103 0304 	add.w	r3, r3, #4
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	f001 f8f2 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800190e:	4603      	mov	r3, r0
 8001910:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	f507 5322 	add.w	r3, r7, #10368	; 0x2880
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001920:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001924:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(upstream_);
 8001926:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 800192a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001936:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800193a:	6013      	str	r3, [r2, #0]
    return client.getPool();
 800193c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001940:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f7ff fd39 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800194a:	4603      	mov	r3, r0
 800194c:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 800194e:	bf00      	nop
    return client.getPool();
 8001950:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8001952:	bf00      	nop
    MemoryPool* pool = getPool();
 8001954:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001958:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800195c:	6013      	str	r3, [r2, #0]
    return pool && !pool->overflowed();
 800195e:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001962:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00b      	beq.n	8001984 <main+0x2dc>
 800196c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001970:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	f7ff fb51 	bl	800101c <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800197a:	4603      	mov	r3, r0
 800197c:	f083 0301 	eor.w	r3, r3, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0

  // Add values in the document
  doc["sensor"] = "Test";

  int kMaxDelayTime = 20; // miliseconds
 8001984:	2314      	movs	r3, #20
 8001986:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 800198a:	6013      	str	r3, [r2, #0]
  int extra_numbers = 200;
 800198c:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8001990:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8001994:	22c8      	movs	r2, #200	; 0xc8
 8001996:	601a      	str	r2, [r3, #0]

  JsonArray data = doc.createNestedArray("data");
 8001998:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800199c:	f6a3 00c4 	subw	r0, r3, #2244	; 0x8c4
 80019a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019a4:	3b38      	subs	r3, #56	; 0x38
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <main+0x31c>)
 80019a8:	4619      	mov	r1, r3
 80019aa:	f000 fda3 	bl	80024f4 <_ZN11ArduinoJson8V6213HB212JsonDocument17createNestedArrayIKcEENS0_9JsonArrayEPT_>
   for(int i=0; i < extra_numbers; i++){
 80019ae:	2300      	movs	r3, #0
 80019b0:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 80019b4:	f102 0204 	add.w	r2, r2, #4
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e005      	b.n	80019c8 <main+0x320>
 80019bc:	0800792c 	.word	0x0800792c
 80019c0:	08007934 	.word	0x08007934
 80019c4:	0800793c 	.word	0x0800793c
 80019c8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80019cc:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 80019d6:	f102 0204 	add.w	r2, r2, #4
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f280 80d2 	bge.w	8001b86 <main+0x4de>
    return add().set(value);
 80019e2:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 80019e6:	f103 0308 	add.w	r3, r3, #8
 80019ea:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	3b04      	subs	r3, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f7ff fc8a 	bl	8001310 <_ZNK11ArduinoJson8V6213HB29JsonArray3addEv>
 80019fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a00:	3b3c      	subs	r3, #60	; 0x3c
 8001a02:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001a06:	f102 0220 	add.w	r2, r2, #32
 8001a0a:	6013      	str	r3, [r2, #0]
    Converter<T>::toJson(value, getOrCreateVariant());
 8001a0c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001a10:	f103 0320 	add.w	r3, r3, #32
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681c      	ldr	r4, [r3, #0]
 8001a18:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8001a1c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001a20:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001a24:	f102 021c 	add.w	r2, r2, #28
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001a2e:	f103 031c 	add.w	r3, r3, #28
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001a38:	f102 0218 	add.w	r2, r2, #24
 8001a3c:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(derived());
 8001a3e:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001a42:	f103 0318 	add.w	r3, r3, #24
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f000 fe46 	bl	80026d8 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001a52:	f102 0214 	add.w	r2, r2, #20
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001a5c:	f103 0314 	add.w	r3, r3, #20
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001a66:	f102 0210 	add.w	r2, r2, #16
 8001a6a:	6013      	str	r3, [r2, #0]
    return pool_;
 8001a6c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001a70:	f103 0310 	add.w	r3, r3, #16
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685d      	ldr	r5, [r3, #4]
    return client.getPool();
 8001a78:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8001a7a:	bf00      	nop
 8001a7c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001a80:	f103 031c 	add.w	r3, r3, #28
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001a8a:	f102 020c 	add.w	r2, r2, #12
 8001a8e:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getOrCreateData(derived());
 8001a90:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001a94:	f103 030c 	add.w	r3, r3, #12
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	f000 fe1d 	bl	80026d8 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001aa4:	f102 0208 	add.w	r2, r2, #8
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001aae:	f103 0308 	add.w	r3, r3, #8
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001ab8:	f102 0204 	add.w	r2, r2, #4
 8001abc:	6013      	str	r3, [r2, #0]
    return data_;
 8001abe:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001ac2:	f103 0304 	add.w	r3, r3, #4
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
    return client.getOrCreateData();
 8001aca:	bf00      	nop
    return VariantAttorney::getOrCreateData(derived());
 8001acc:	bf00      	nop
  return JsonVariant(getPool(), getOrCreateData());
 8001ace:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8001ad2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fbec 	bl	80012b6 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 8001ade:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001ae2:	f103 0308 	add.w	r3, r3, #8
 8001ae6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001aea:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001aee:	4620      	mov	r0, r4
 8001af0:	f000 fe5d 	bl	80027ae <_ZN11ArduinoJson8V6213HB29ConverterIivE6toJsonEiNS0_11JsonVariantE>
 8001af4:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8001af8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001afc:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001b00:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(derived());
 8001b02:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f000 fde6 	bl	80026d8 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001b12:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001b1c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001b26:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001b2a:	6013      	str	r3, [r2, #0]
    return pool_;
 8001b2c:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001b30:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
    return client.getPool();
 8001b38:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8001b3a:	bf00      	nop
    MemoryPool* pool = getPool();
 8001b3c:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001b40:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001b44:	6013      	str	r3, [r2, #0]
    return pool && !pool->overflowed();
 8001b46:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001b4a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00b      	beq.n	8001b6c <main+0x4c4>
 8001b54:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001b58:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	f7ff fa5d 	bl	800101c <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f083 0301 	eor.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
    return add().set(value);
 8001b6c:	bf00      	nop
 8001b6e:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001b72:	f103 0304 	add.w	r3, r3, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 8001b7e:	f102 0204 	add.w	r2, r2, #4
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e720      	b.n	80019c8 <main+0x320>
 	  data.add(extra_numbers);
   }

  // Test different delays to make sure the emulator can handle it
  srand((unsigned) HAL_GetTick());
 8001b86:	f002 f90d 	bl	8003da4 <HAL_GetTick>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 fe8d 	bl	80068ac <srand>
  int random_number = 1;// rand()%kMaxDelayTime;
 8001b92:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8001b96:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
  HAL_Delay(random_number);
 8001b9e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8001ba2:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 f907 	bl	8003dbc <HAL_Delay>
 8001bae:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001bb2:	f103 0308 	add.w	r3, r3, #8
 8001bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bba:	4adc      	ldr	r2, [pc, #880]	; (8001f2c <main+0x884>)
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8001bc2:	f102 0210 	add.w	r2, r2, #16
 8001bc6:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001bca:	f103 0308 	add.w	r3, r3, #8
 8001bce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001bd8:	f103 0308 	add.w	r3, r3, #8
 8001bdc:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8001be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001be4:	3b38      	subs	r3, #56	; 0x38
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001bec:	f103 0308 	add.w	r3, r3, #8
 8001bf0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bf4:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 8001bf8:	f102 0208 	add.w	r2, r2, #8
 8001bfc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	601a      	str	r2, [r3, #0]
      : upstream_(upstream), key_(key) {}
 8001c04:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001c08:	f103 0308 	add.w	r3, r3, #8
 8001c0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 8001c16:	f102 0208 	add.w	r2, r2, #8
 8001c1a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001c26:	f103 0308 	add.w	r3, r3, #8
 8001c2a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 8001c34:	f102 0208 	add.w	r2, r2, #8
 8001c38:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
    return {*this, key};
 8001c40:	bf00      	nop
 8001c42:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8001c46:	f103 0310 	add.w	r3, r3, #16
 8001c4a:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001c4e:	f102 021c 	add.w	r2, r2, #28
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	3b08      	subs	r3, #8
 8001c5a:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001c5e:	f102 0218 	add.w	r2, r2, #24
 8001c62:	6013      	str	r3, [r2, #0]
    Converter<T>::toJson(value, getOrCreateVariant());
 8001c64:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8001c68:	f103 0318 	add.w	r3, r3, #24
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681c      	ldr	r4, [r3, #0]
 8001c70:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8001c74:	f103 031c 	add.w	r3, r3, #28
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001c7e:	f102 0214 	add.w	r2, r2, #20
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8001c88:	f103 0314 	add.w	r3, r3, #20
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001c92:	f102 0210 	add.w	r2, r2, #16
 8001c96:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(derived());
 8001c98:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8001c9c:	f103 0310 	add.w	r3, r3, #16
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	f000 ff26 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001cac:	f102 020c 	add.w	r2, r2, #12
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001cb6:	f103 0308 	add.w	r3, r3, #8
 8001cba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cbe:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001cc2:	f102 020c 	add.w	r2, r2, #12
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 8001cca:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001cce:	f103 0308 	add.w	r3, r3, #8
 8001cd2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001cde:	f103 0308 	add.w	r3, r3, #8
 8001ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ce6:	601a      	str	r2, [r3, #0]
    return client.getPool();
 8001ce8:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001cec:	f103 0308 	add.w	r3, r3, #8
 8001cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	f7ff fb61 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8001cfa:	4605      	mov	r5, r0
 8001cfc:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 8001cfe:	bf00      	nop
    return client.getPool();
 8001d00:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8001d02:	bf00      	nop
 8001d04:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001d08:	f103 0308 	add.w	r3, r3, #8
 8001d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d10:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001d14:	f102 0214 	add.w	r2, r2, #20
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getOrCreateData(derived());
 8001d1c:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001d20:	f103 0308 	add.w	r3, r3, #8
 8001d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	f000 fee2 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001d34:	f103 0308 	add.w	r3, r3, #8
 8001d38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001d42:	f103 0308 	add.w	r3, r3, #8
 8001d46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d4a:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 8001d4e:	f102 0208 	add.w	r2, r2, #8
 8001d52:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	601a      	str	r2, [r3, #0]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8001d5a:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001d5e:	f103 0308 	add.w	r3, r3, #8
 8001d62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001d6e:	f103 0308 	add.w	r3, r3, #8
 8001d72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d76:	601a      	str	r2, [r3, #0]
    return client.getOrCreateData();
 8001d78:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001d7c:	f103 0308 	add.w	r3, r3, #8
 8001d80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	f7ff fb24 	bl	80013d2 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 8001d8a:	4606      	mov	r6, r0
 8001d8c:	bf00      	nop
                                 adaptString(key_),
 8001d8e:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001d92:	f103 0308 	add.w	r3, r3, #8
 8001d96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fb71 	bl	8002486 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8001da4:	4680      	mov	r8, r0
 8001da6:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001daa:	f103 0308 	add.w	r3, r3, #8
 8001dae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001dba:	f103 0308 	add.w	r3, r3, #8
 8001dbe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dc2:	601a      	str	r2, [r3, #0]
    return client.getPool();
 8001dc4:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001dc8:	f103 0308 	add.w	r3, r3, #8
 8001dcc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	f7ff faf3 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	bf00      	nop
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4641      	mov	r1, r8
 8001dde:	4630      	mov	r0, r6
 8001de0:	f001 fa50 	bl	8003284 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 8001de4:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 8001de6:	bf00      	nop
    return client.getOrCreateData();
 8001de8:	bf00      	nop
    return VariantAttorney::getOrCreateData(derived());
 8001dea:	bf00      	nop
  return JsonVariant(getPool(), getOrCreateData());
 8001dec:	f507 531e 	add.w	r3, r7, #10112	; 0x2780
 8001df0:	f103 0304 	add.w	r3, r3, #4
 8001df4:	4629      	mov	r1, r5
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fa5d 	bl	80012b6 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 8001dfc:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001e00:	f103 0308 	add.w	r3, r3, #8
 8001e04:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e08:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f000 fcce 	bl	80027ae <_ZN11ArduinoJson8V6213HB29ConverterIivE6toJsonEiNS0_11JsonVariantE>
 8001e12:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001e16:	f103 0308 	add.w	r3, r3, #8
 8001e1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e1e:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001e22:	f102 021c 	add.w	r2, r2, #28
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 8001e2a:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001e2e:	f103 0308 	add.w	r3, r3, #8
 8001e32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	f000 fe5b 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001e42:	f103 0308 	add.w	r3, r3, #8
 8001e46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001e50:	f103 0308 	add.w	r3, r3, #8
 8001e54:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e58:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 8001e5c:	f102 0208 	add.w	r2, r2, #8
 8001e60:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 8001e68:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001e6c:	f103 0308 	add.w	r3, r3, #8
 8001e70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001e7c:	f103 0308 	add.w	r3, r3, #8
 8001e80:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e84:	601a      	str	r2, [r3, #0]
    return client.getPool();
 8001e86:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001e8a:	f103 0308 	add.w	r3, r3, #8
 8001e8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	f7ff fa92 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 8001e9c:	bf00      	nop
    return client.getPool();
 8001e9e:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8001ea0:	bf00      	nop
    MemoryPool* pool = getPool();
 8001ea2:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001ea6:	f103 0308 	add.w	r3, r3, #8
 8001eaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001eae:	601a      	str	r2, [r3, #0]
    return pool && !pool->overflowed();
 8001eb0:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001eb4:	f103 0308 	add.w	r3, r3, #8
 8001eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <main+0x836>
 8001ec2:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001ec6:	f103 0308 	add.w	r3, r3, #8
 8001eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	f7ff f8a4 	bl	800101c <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <main+0x888>)
 8001ee0:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001ee4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8001eee:	f103 0318 	add.w	r3, r3, #24
 8001ef2:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001ef6:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f00:	3b38      	subs	r3, #56	; 0x38
 8001f02:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001f06:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8001f10:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001f1a:	f102 0220 	add.w	r2, r2, #32
 8001f1e:	6013      	str	r3, [r2, #0]
      : upstream_(upstream), key_(key) {}
 8001f20:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8001f24:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e003      	b.n	8001f34 <main+0x88c>
 8001f2c:	08007944 	.word	0x08007944
 8001f30:	0800794c 	.word	0x0800794c
 8001f34:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001f38:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8001f44:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8001f4e:	f102 0220 	add.w	r2, r2, #32
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	605a      	str	r2, [r3, #4]
    return {*this, key};
 8001f56:	bf00      	nop


  doc["time"] = random_number;
  doc["memory"] = doc.memoryUsage();
 8001f58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f5c:	3b38      	subs	r3, #56	; 0x38
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f9f7 	bl	8001352 <_ZNK11ArduinoJson8V6213HB212JsonDocument11memoryUsageEv>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8001f6a:	f103 0308 	add.w	r3, r3, #8
 8001f6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8001f78:	f103 0318 	add.w	r3, r3, #24
 8001f7c:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001f80:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8001f8a:	f103 0320 	add.w	r3, r3, #32
 8001f8e:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001f92:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001f96:	6013      	str	r3, [r2, #0]
    Converter<T>::toJson(value, getOrCreateVariant());
 8001f98:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001f9c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681c      	ldr	r4, [r3, #0]
 8001fa4:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001fa8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001fb2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001fbc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001fc6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001fca:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(derived());
 8001fcc:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001fd0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	f000 fd8c 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001fe0:	f102 0220 	add.w	r2, r2, #32
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001fea:	f103 0320 	add.w	r3, r3, #32
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001ff4:	f102 021c 	add.w	r2, r2, #28
 8001ff8:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(upstream_);
 8001ffa:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001ffe:	f103 031c 	add.w	r3, r3, #28
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 800200a:	f102 0218 	add.w	r2, r2, #24
 800200e:	6013      	str	r3, [r2, #0]
    return client.getPool();
 8002010:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002014:	f103 0318 	add.w	r3, r3, #24
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	f7ff f9cf 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800201e:	4605      	mov	r5, r0
 8002020:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 8002022:	bf00      	nop
    return client.getPool();
 8002024:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8002026:	bf00      	nop
 8002028:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800202c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002036:	f102 0214 	add.w	r2, r2, #20
 800203a:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getOrCreateData(derived());
 800203c:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002040:	f103 0314 	add.w	r3, r3, #20
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	f000 fd54 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800204a:	4603      	mov	r3, r0
 800204c:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002050:	f102 0210 	add.w	r2, r2, #16
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800205a:	f103 0310 	add.w	r3, r3, #16
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002064:	f102 020c 	add.w	r2, r2, #12
 8002068:	6013      	str	r3, [r2, #0]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800206a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800206e:	f103 030c 	add.w	r3, r3, #12
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 800207a:	f102 0208 	add.w	r2, r2, #8
 800207e:	6013      	str	r3, [r2, #0]
    return client.getOrCreateData();
 8002080:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002084:	f103 0308 	add.w	r3, r3, #8
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	f7ff f9a2 	bl	80013d2 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800208e:	4606      	mov	r6, r0
 8002090:	bf00      	nop
                                 adaptString(key_),
 8002092:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002096:	f103 030c 	add.w	r3, r3, #12
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f9f1 	bl	8002486 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 80020a4:	4680      	mov	r8, r0
 80020a6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80020aa:	f103 030c 	add.w	r3, r3, #12
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 80020b6:	f102 0204 	add.w	r2, r2, #4
 80020ba:	6013      	str	r3, [r2, #0]
    return client.getPool();
 80020bc:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80020c0:	f103 0304 	add.w	r3, r3, #4
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	f7ff f979 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 80020ca:	4603      	mov	r3, r0
 80020cc:	bf00      	nop
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 80020ce:	461a      	mov	r2, r3
 80020d0:	4641      	mov	r1, r8
 80020d2:	4630      	mov	r0, r6
 80020d4:	f001 f8d6 	bl	8003284 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 80020d8:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 80020da:	bf00      	nop
    return client.getOrCreateData();
 80020dc:	bf00      	nop
    return VariantAttorney::getOrCreateData(derived());
 80020de:	bf00      	nop
  return JsonVariant(getPool(), getOrCreateData());
 80020e0:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80020e4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80020e8:	4629      	mov	r1, r5
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f8e3 	bl	80012b6 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 80020f0:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 80020f4:	f103 0308 	add.w	r3, r3, #8
 80020f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002100:	4620      	mov	r0, r4
 8002102:	f000 fb6c 	bl	80027de <_ZN11ArduinoJson8V6213HB29ConverterIjvE6toJsonEjNS0_11JsonVariantE>
 8002106:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800210a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002114:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(derived());
 8002116:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	f000 fce9 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8002120:	4603      	mov	r3, r0
 8002122:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002126:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002130:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 800213a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800213e:	6013      	str	r3, [r2, #0]
    return VariantAttorney::getPool(upstream_);
 8002140:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002144:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002150:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002154:	6013      	str	r3, [r2, #0]
    return client.getPool();
 8002156:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800215a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	f7ff f92c 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8002164:	4603      	mov	r3, r0
 8002166:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 8002168:	bf00      	nop
    return client.getPool();
 800216a:	bf00      	nop
    return VariantAttorney::getPool(derived());
 800216c:	bf00      	nop
    MemoryPool* pool = getPool();
 800216e:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002172:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002176:	6013      	str	r3, [r2, #0]
    return pool && !pool->overflowed();
 8002178:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800217c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <main+0xaf6>
 8002186:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800218a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	f7fe ff44 	bl	800101c <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 8002194:	4603      	mov	r3, r0
 8002196:	f083 0301 	eor.w	r3, r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
    return getVariant();
 800219e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021a2:	3b38      	subs	r3, #56	; 0x38
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f8f7 	bl	8001398 <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>
 80021aa:	4603      	mov	r3, r0

  serializeJson(doc, (char*)buffer,  kDataSize);
 80021ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80021b0:	490f      	ldr	r1, [pc, #60]	; (80021f0 <main+0xb48>)
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fa37 	bl	8001626 <_ZN11ArduinoJson8V6213HB213serializeJsonENS0_16JsonVariantConstEPvj>

  waiting_for_transmision = true;
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <main+0xb4c>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_SPI_Transmit_IT(&hspi1, buffer, kDataSize);
 80021be:	f242 7210 	movw	r2, #10000	; 0x2710
 80021c2:	490b      	ldr	r1, [pc, #44]	; (80021f0 <main+0xb48>)
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <main+0xb50>)
 80021c6:	f003 fc0f 	bl	80059e8 <HAL_SPI_Transmit_IT>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 80021d0:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80021d4:	7013      	strb	r3, [r2, #0]
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_SET);
 80021d6:	2201      	movs	r2, #1
 80021d8:	2108      	movs	r1, #8
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f002 f8d3 	bl	8004388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2108      	movs	r1, #8
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ea:	f002 f8cd 	bl	8004388 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80021ee:	e7fe      	b.n	80021ee <main+0xb46>
 80021f0:	20000178 	.word	0x20000178
 80021f4:	20002888 	.word	0x20002888
 80021f8:	2000008c 	.word	0x2000008c

080021fc <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b090      	sub	sp, #64	; 0x40
 8002200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002202:	f107 0318 	add.w	r3, r7, #24
 8002206:	2228      	movs	r2, #40	; 0x28
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f004 fb46 	bl	800689c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002222:	2301      	movs	r3, #1
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002226:	2310      	movs	r3, #16
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800222a:	2300      	movs	r3, #0
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800222e:	f107 0318 	add.w	r3, r7, #24
 8002232:	4618      	mov	r0, r3
 8002234:	f002 f8c0 	bl	80043b8 <HAL_RCC_OscConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <_Z18SystemClock_Configv+0x50>
    Error_Handler();
 8002248:	f000 f8e8 	bl	800241c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800224c:	230f      	movs	r3, #15
 800224e:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f003 f8e5 	bl	8005434 <HAL_RCC_ClockConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <_Z18SystemClock_Configv+0x82>
    Error_Handler();
 800227a:	f000 f8cf 	bl	800241c <Error_Handler>
  }
}
 800227e:	bf00      	nop
 8002280:	3740      	adds	r7, #64	; 0x40
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 800228e:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <_ZL12MX_SPI1_Initv+0x78>)
 8002290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022ce:	2207      	movs	r2, #7
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80022de:	4807      	ldr	r0, [pc, #28]	; (80022fc <_ZL12MX_SPI1_Initv+0x74>)
 80022e0:	f003 fade 	bl	80058a0 <HAL_SPI_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <_ZL12MX_SPI1_Initv+0x70>
    Error_Handler();
 80022f4:	f000 f892 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000008c 	.word	0x2000008c
 8002300:	40013000 	.word	0x40013000

08002304 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <_ZL19MX_USART2_UART_Initv+0x64>)
 800230c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002310:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 800232a:	220c      	movs	r2, #12
 800232c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002346:	4807      	ldr	r0, [pc, #28]	; (8002364 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002348:	f003 fee3 	bl	8006112 <HAL_UART_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <_ZL19MX_USART2_UART_Initv+0x5c>
    Error_Handler();
 800235c:	f000 f85e 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200000f0 	.word	0x200000f0
 8002368:	40004400 	.word	0x40004400

0800236c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <_ZL12MX_GPIO_Initv+0xa8>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4a23      	ldr	r2, [pc, #140]	; (8002414 <_ZL12MX_GPIO_Initv+0xa8>)
 8002388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800238c:	6153      	str	r3, [r2, #20]
 800238e:	4b21      	ldr	r3, [pc, #132]	; (8002414 <_ZL12MX_GPIO_Initv+0xa8>)
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <_ZL12MX_GPIO_Initv+0xa8>)
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <_ZL12MX_GPIO_Initv+0xa8>)
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	6153      	str	r3, [r2, #20]
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <_ZL12MX_GPIO_Initv+0xa8>)
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <_ZL12MX_GPIO_Initv+0xa8>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <_ZL12MX_GPIO_Initv+0xa8>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6153      	str	r3, [r2, #20]
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <_ZL12MX_GPIO_Initv+0xa8>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2108      	movs	r1, #8
 80023ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d2:	f001 ffd9 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PL_Pin */
  GPIO_InitStruct.Pin = PL_Pin;
 80023d6:	2308      	movs	r3, #8
 80023d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023da:	2301      	movs	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PL_GPIO_Port, &GPIO_InitStruct);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f0:	f001 fe58 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PL_Wait_Pin */
  GPIO_InitStruct.Pin = PL_Wait_Pin;
 80023f4:	2301      	movs	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PL_Wait_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	4619      	mov	r1, r3
 8002406:	4804      	ldr	r0, [pc, #16]	; (8002418 <_ZL12MX_GPIO_Initv+0xac>)
 8002408:	f001 fe4c 	bl	80040a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	48000400 	.word	0x48000400

0800241c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002424:	e7fe      	b.n	8002424 <Error_Handler+0x8>

08002426 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 800242e:	2110      	movs	r1, #16
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7fe fe21 	bl	8001078 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>
 8002436:	4603      	mov	r3, r0
  }
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_14JsonSerializerEEENS1_9enable_ifIXsrT_INS1_18StaticStringWriterEE12producesTextEjE4typeENS0_16JsonVariantConstEPvj>:
serialize(ArduinoJson::JsonVariantConst source, void* buffer,
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  StaticStringWriter writer(reinterpret_cast<char*>(buffer), bufferSize);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff f88b 	bl	8001570 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriterC1EPcj>
  size_t n = doSerialize<TSerializer>(source, writer);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f86a 	bl	800253c <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_14JsonSerializerENS1_18StaticStringWriterEEEjNS0_16JsonVariantConstET0_>
 8002468:	61f8      	str	r0, [r7, #28]
  if (n < bufferSize)
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	429a      	cmp	r2, r3
 8002470:	d204      	bcs.n	800247c <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_14JsonSerializerEEENS1_9enable_ifIXsrT_INS1_18StaticStringWriterEE12producesTextEjE4typeENS0_16JsonVariantConstEPvj+0x3c>
    reinterpret_cast<char*>(buffer)[n] = 0;
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
  return n;
 800247c:	69fb      	ldr	r3, [r7, #28]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  return StringAdapter<TChar*>::adapt(p);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fc70 	bl	8000d74 <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline bool variantSetString(VariantData* var, TAdaptedString value,
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
  return var != 0 ? var->setString(value, pool) : 0;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x20>
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f861 	bl	800257c <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>
 80024ba:	4603      	mov	r3, r0
 80024bc:	e000      	b.n	80024c0 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x22>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj10000EEC1Ev>:
  StaticJsonDocument() : JsonDocument(buffer_, capacity_) {}
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3328      	adds	r3, #40	; 0x28
 80024e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80024e4:	4619      	mov	r1, r3
 80024e6:	f7fe ff41 	bl	800136c <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_ZN11ArduinoJson8V6213HB212JsonDocument17createNestedArrayIKcEENS0_9JsonArrayEPT_>:
  JsonArray createNestedArray(TChar* key) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	6a3a      	ldr	r2, [r7, #32]
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	605a      	str	r2, [r3, #4]
    return {*this, key};
 8002522:	bf00      	nop
    return operator[](key).template to<JsonArray>();
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f107 0214 	add.w	r2, r7, #20
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f881 	bl	8002634 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE2toINS0_9JsonArrayEEENS1_9enable_ifIXsrNS1_7is_sameIT_SB_EE5valueESB_E4typeEv>
 8002532:	bf00      	nop
  }
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	3730      	adds	r7, #48	; 0x30
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_14JsonSerializerENS1_18StaticStringWriterEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	e883 0006 	stmia.w	r3, {r1, r2}
  TSerializer<TWriter> serializer(writer);
 800254a:	f107 0014 	add.w	r0, r7, #20
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002554:	f000 f8cb 	bl	80026ee <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEEC1ES3_>
    return client.getData();
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fe8d 	bl	800127c <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 8002562:	4602      	mov	r2, r0
 8002564:	bf00      	nop
  return variantAccept(VariantAttorney::getData(source), serializer);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f000 f8d0 	bl	8002712 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeEPKNS1_11VariantDataERS6_>
 8002572:	4603      	mov	r3, r0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>:
  inline bool setString(TAdaptedString value, MemoryPool* pool) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
    if (value.isNull()) {
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fb96 	bl	8000cbe <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x26>
      setNull();
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7fe fdc0 	bl	800111e <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
      return true;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00c      	b.n	80025bc <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x40>
    return storeString(pool, value, VariantStringSetter(this));
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	68f9      	ldr	r1, [r7, #12]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fe38 	bl	800121e <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8c4 	bl	8002740 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>
 80025b8:	4603      	mov	r3, r0
 80025ba:	bf00      	nop
  }
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	4904      	ldr	r1, [pc, #16]	; (80025e0 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f8cc 	bl	800276c <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 80025d4:	687b      	ldr	r3, [r7, #4]
  }
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	08007978 	.word	0x08007978

080025e4 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	4904      	ldr	r1, [pc, #16]	; (8002600 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f8bc 	bl	800276c <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 80025f4:	687b      	ldr	r3, [r7, #4]
  }
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	080079c0 	.word	0x080079c0

08002604 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>:
  T operator[](intptr_t index) const {
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f8b6 	bl	800278a <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>
 800261e:	eeb0 7a40 	vmov.f32	s14, s0
 8002622:	eef0 7a60 	vmov.f32	s15, s1
  }
 8002626:	eeb0 0a47 	vmov.f32	s0, s14
 800262a:	eef0 0a67 	vmov.f32	s1, s15
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE2toINS0_9JsonArrayEEENS1_9enable_ifIXsrNS1_7is_sameIT_SB_EE5valueESB_E4typeEv>:
}
template <typename TDerived>
template <typename T>
inline typename enable_if<is_same<T, JsonArray>::value, JsonArray>::type
VariantRefBase<TDerived>::to() const {
 8002634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002636:	b08f      	sub	sp, #60	; 0x3c
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	61bb      	str	r3, [r7, #24]
    return VariantAttorney::getPool(derived());
 8002642:	69b8      	ldr	r0, [r7, #24]
 8002644:	f000 fa55 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8002648:	4603      	mov	r3, r0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
    return VariantAttorney::getPool(upstream_);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
    return client.getPool();
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7fe feb0 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800265c:	4604      	mov	r4, r0
 800265e:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 8002660:	bf00      	nop
    return client.getPool();
 8002662:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8002664:	bf00      	nop
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
    return VariantAttorney::getOrCreateData(derived());
 800266a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800266c:	f000 fa41 	bl	8002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8002670:	4603      	mov	r3, r0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	623b      	str	r3, [r7, #32]
    return client.getOrCreateData();
 800267e:	6a38      	ldr	r0, [r7, #32]
 8002680:	f7fe fea7 	bl	80013d2 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 8002684:	4605      	mov	r5, r0
 8002686:	bf00      	nop
                                 adaptString(key_),
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fefa 	bl	8002486 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8002692:	4606      	mov	r6, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61fb      	str	r3, [r7, #28]
    return client.getPool();
 800269a:	69f8      	ldr	r0, [r7, #28]
 800269c:	f7fe fe8e 	bl	80013bc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 80026a0:	4603      	mov	r3, r0
 80026a2:	bf00      	nop
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 80026a4:	461a      	mov	r2, r3
 80026a6:	4631      	mov	r1, r6
 80026a8:	4628      	mov	r0, r5
 80026aa:	f000 fdeb 	bl	8003284 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 80026ae:	4603      	mov	r3, r0
                                 VariantAttorney::getPool(upstream_));
 80026b0:	bf00      	nop
    return client.getOrCreateData();
 80026b2:	bf00      	nop
    return VariantAttorney::getOrCreateData(derived());
 80026b4:	bf00      	nop
  return JsonArray(getPool(), variantToArray(getOrCreateData()));
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fdc0 	bl	800123c <_ZN11ArduinoJson8V6213HB26detail14variantToArrayEPNS1_11VariantDataE>
 80026bc:	4603      	mov	r3, r0
 80026be:	637c      	str	r4, [r7, #52]	; 0x34
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
      : data_(data), pool_(pool) {}
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026cc:	605a      	str	r2, [r3, #4]
  return JsonArray(getPool(), variantToArray(getOrCreateData()));
 80026ce:	bf00      	nop
}
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	373c      	adds	r7, #60	; 0x3c
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026d8 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80026e0:	687b      	ldr	r3, [r7, #4]
  }
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEEC1ES3_>:
  JsonSerializer(TWriter writer) : formatter_(writer) {}
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	e883 0006 	stmia.w	r3, {r1, r2}
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002704:	f000 f883 	bl	800280e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEEC1ES3_>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeEPKNS1_11VariantDataERS6_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeEPKNS1_11VariantDataERS6_+0x1c>
    return var->accept(visitor);
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f885 	bl	8002834 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_>
 800272a:	4603      	mov	r3, r0
 800272c:	e004      	b.n	8002738 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeEPKNS1_11VariantDataERS6_+0x26>
    return visitor.visitNull();
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	f000 f98a 	bl	8002a48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE9visitNullEv>
 8002734:	4603      	mov	r3, r0
 8002736:	bf00      	nop
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>:
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fb04 	bl	8000d5e <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4622      	mov	r2, r4
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f987 	bl	8002a70 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 8002762:	4603      	mov	r3, r0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}

0800276c <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  return *p;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	ec43 2b17 	vmov	d7, r2, r3
}
 800279c:	eeb0 0a47 	vmov.f32	s0, s14
 80027a0:	eef0 0a67 	vmov.f32	s1, s15
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <_ZN11ArduinoJson8V6213HB29ConverterIivE6toJsonEiNS0_11JsonVariantE>:
  static void toJson(T src, JsonVariant dst) {
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	e883 0006 	stmia.w	r3, {r1, r2}
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	613b      	str	r3, [r7, #16]
    return data_;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	681b      	ldr	r3, [r3, #0]
    return client.getData();
 80027c4:	bf00      	nop
    auto data = getData(dst);
 80027c6:	617b      	str	r3, [r7, #20]
    if (data)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <_ZN11ArduinoJson8V6213HB29ConverterIivE6toJsonEiNS0_11JsonVariantE+0x28>
      data->setInteger(src);
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	6978      	ldr	r0, [r7, #20]
 80027d2:	f000 f999 	bl	8002b08 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>
  }
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_ZN11ArduinoJson8V6213HB29ConverterIjvE6toJsonEjNS0_11JsonVariantE>:
  static void toJson(T src, JsonVariant dst) {
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	e883 0006 	stmia.w	r3, {r1, r2}
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	613b      	str	r3, [r7, #16]
    return data_;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	681b      	ldr	r3, [r3, #0]
    return client.getData();
 80027f4:	bf00      	nop
    auto data = getData(dst);
 80027f6:	617b      	str	r3, [r7, #20]
    if (data)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <_ZN11ArduinoJson8V6213HB29ConverterIjvE6toJsonEjNS0_11JsonVariantE+0x28>
      data->setInteger(src);
 80027fe:	68f9      	ldr	r1, [r7, #12]
 8002800:	6978      	ldr	r0, [r7, #20]
 8002802:	f000 f995 	bl	8002b30 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIjEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>
  }
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEEC1ES3_>:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	e883 0006 	stmia.w	r3, {r1, r2}
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1d3a      	adds	r2, r7, #4
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f950 	bl	8002ac8 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEEC1ERS3_>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe fcc4 	bl	80011cc <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 8002844:	4603      	mov	r3, r0
 8002846:	3b02      	subs	r3, #2
 8002848:	2b3e      	cmp	r3, #62	; 0x3e
 800284a:	f200 80f3 	bhi.w	8002a34 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x200>
 800284e:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	080029e7 	.word	0x080029e7
 8002858:	080029e7 	.word	0x080029e7
 800285c:	080029d3 	.word	0x080029d3
 8002860:	080029d3 	.word	0x080029d3
 8002864:	08002a1b 	.word	0x08002a1b
 8002868:	08002a35 	.word	0x08002a35
 800286c:	08002a0b 	.word	0x08002a0b
 8002870:	08002a35 	.word	0x08002a35
 8002874:	080029fb 	.word	0x080029fb
 8002878:	08002a35 	.word	0x08002a35
 800287c:	08002951 	.word	0x08002951
 8002880:	08002a35 	.word	0x08002a35
 8002884:	08002a35 	.word	0x08002a35
 8002888:	08002a35 	.word	0x08002a35
 800288c:	08002a35 	.word	0x08002a35
 8002890:	08002a35 	.word	0x08002a35
 8002894:	08002a35 	.word	0x08002a35
 8002898:	08002a35 	.word	0x08002a35
 800289c:	08002a35 	.word	0x08002a35
 80028a0:	08002a35 	.word	0x08002a35
 80028a4:	08002a35 	.word	0x08002a35
 80028a8:	08002a35 	.word	0x08002a35
 80028ac:	08002a35 	.word	0x08002a35
 80028b0:	08002a35 	.word	0x08002a35
 80028b4:	08002a35 	.word	0x08002a35
 80028b8:	08002a35 	.word	0x08002a35
 80028bc:	08002a35 	.word	0x08002a35
 80028c0:	08002a35 	.word	0x08002a35
 80028c4:	08002a35 	.word	0x08002a35
 80028c8:	08002a35 	.word	0x08002a35
 80028cc:	080029c5 	.word	0x080029c5
 80028d0:	08002a35 	.word	0x08002a35
 80028d4:	08002a35 	.word	0x08002a35
 80028d8:	08002a35 	.word	0x08002a35
 80028dc:	08002a35 	.word	0x08002a35
 80028e0:	08002a35 	.word	0x08002a35
 80028e4:	08002a35 	.word	0x08002a35
 80028e8:	08002a35 	.word	0x08002a35
 80028ec:	08002a35 	.word	0x08002a35
 80028f0:	08002a35 	.word	0x08002a35
 80028f4:	08002a35 	.word	0x08002a35
 80028f8:	08002a35 	.word	0x08002a35
 80028fc:	08002a35 	.word	0x08002a35
 8002900:	08002a35 	.word	0x08002a35
 8002904:	08002a35 	.word	0x08002a35
 8002908:	08002a35 	.word	0x08002a35
 800290c:	08002a35 	.word	0x08002a35
 8002910:	08002a35 	.word	0x08002a35
 8002914:	08002a35 	.word	0x08002a35
 8002918:	08002a35 	.word	0x08002a35
 800291c:	08002a35 	.word	0x08002a35
 8002920:	08002a35 	.word	0x08002a35
 8002924:	08002a35 	.word	0x08002a35
 8002928:	08002a35 	.word	0x08002a35
 800292c:	08002a35 	.word	0x08002a35
 8002930:	08002a35 	.word	0x08002a35
 8002934:	08002a35 	.word	0x08002a35
 8002938:	08002a35 	.word	0x08002a35
 800293c:	08002a35 	.word	0x08002a35
 8002940:	08002a35 	.word	0x08002a35
 8002944:	08002a35 	.word	0x08002a35
 8002948:	08002a35 	.word	0x08002a35
 800294c:	08002969 	.word	0x08002969
        return visitor.visitFloat(content_.asFloat);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	ed93 7b00 	vldr	d7, [r3]
 8002956:	eeb0 0a47 	vmov.f32	s0, s14
 800295a:	eef0 0a67 	vmov.f32	s1, s15
 800295e:	6838      	ldr	r0, [r7, #0]
 8002960:	f000 f8fa 	bl	8002b58 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE10visitFloatEd>
 8002964:	4603      	mov	r3, r0
 8002966:	e06a      	b.n	8002a3e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20a>
        return visitor.visitArray(content_.asCollection);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	617a      	str	r2, [r7, #20]
 800296e:	613b      	str	r3, [r7, #16]
    write('[');
 8002970:	215b      	movs	r1, #91	; 0x5b
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f000 fa5e 	bl	8002e34 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEc>
    const VariantSlot* slot = array.head();
 8002978:	6938      	ldr	r0, [r7, #16]
 800297a:	f7fe fa5b 	bl	8000e34 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 800297e:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d014      	beq.n	80029b0 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x17c>
      slot->data()->accept(*this);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7fe fa6b 	bl	8000e62 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800298c:	4603      	mov	r3, r0
 800298e:	6979      	ldr	r1, [r7, #20]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff4f 	bl	8002834 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_>
      slot = slot->next();
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7fe fa85 	bl	8000ea6 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800299c:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x17a>
      write(',');
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f000 fa44 	bl	8002e34 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEc>
    while (slot != 0) {
 80029ac:	e7e8      	b.n	8002980 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x14c>
        break;
 80029ae:	bf00      	nop
    write(']');
 80029b0:	215d      	movs	r1, #93	; 0x5d
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f000 fa3e 	bl	8002e34 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEc>
    return bytesWritten();
 80029b8:	6978      	ldr	r0, [r7, #20]
 80029ba:	f000 f996 	bl	8002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 80029be:	4603      	mov	r3, r0
 80029c0:	bf00      	nop
        return visitor.visitArray(content_.asCollection);
 80029c2:	e03c      	b.n	8002a3e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20a>
        return visitor.visitObject(content_.asCollection);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4619      	mov	r1, r3
 80029c8:	6838      	ldr	r0, [r7, #0]
 80029ca:	f000 f8d9 	bl	8002b80 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE>
 80029ce:	4603      	mov	r3, r0
 80029d0:	e035      	b.n	8002a3e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20a>
        return visitor.visitString(content_.asString.data,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6819      	ldr	r1, [r3, #0]
                                   content_.asString.size);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(content_.asString.data,
 80029da:	461a      	mov	r2, r3
 80029dc:	6838      	ldr	r0, [r7, #0]
 80029de:	f000 f90d 	bl	8002bfc <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitStringEPKcj>
 80029e2:	4603      	mov	r3, r0
                                   content_.asString.size);
 80029e4:	e02b      	b.n	8002a3e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20a>
        return visitor.visitRawJson(content_.asString.data,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6819      	ldr	r1, [r3, #0]
                                    content_.asString.size);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(content_.asString.data,
 80029ee:	461a      	mov	r2, r3
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	f000 f917 	bl	8002c24 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12visitRawJsonEPKcj>
 80029f6:	4603      	mov	r3, r0
                                    content_.asString.size);
 80029f8:	e021      	b.n	8002a3e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20a>
        return visitor.visitSignedInteger(content_.asSignedInteger);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	6838      	ldr	r0, [r7, #0]
 8002a02:	f000 f923 	bl	8002c4c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE18visitSignedIntegerEx>
 8002a06:	4603      	mov	r3, r0
 8002a08:	e019      	b.n	8002a3e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20a>
        return visitor.visitUnsignedInteger(content_.asUnsignedInteger);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	6838      	ldr	r0, [r7, #0]
 8002a12:	f000 f92f 	bl	8002c74 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE20visitUnsignedIntegerEy>
 8002a16:	4603      	mov	r3, r0
 8002a18:	e011      	b.n	8002a3e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20a>
        return visitor.visitBoolean(content_.asBoolean != 0);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6838      	ldr	r0, [r7, #0]
 8002a2c:	f000 f936 	bl	8002c9c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12visitBooleanEb>
 8002a30:	4603      	mov	r3, r0
 8002a32:	e004      	b.n	8002a3e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20a>
        return visitor.visitNull();
 8002a34:	6838      	ldr	r0, [r7, #0]
 8002a36:	f000 f807 	bl	8002a48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE9visitNullEv>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	bf00      	nop
  }
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop

08002a48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE9visitNullEv>:
  size_t visitNull() {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
    formatter_.writeRaw("null");
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4906      	ldr	r1, [pc, #24]	; (8002a6c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE9visitNullEv+0x24>)
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f935 	bl	8002cc4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
    return bytesWritten();
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f945 	bl	8002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002a60:	4603      	mov	r3, r0
  }
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	08007954 	.word	0x08007954

08002a70 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	713a      	strb	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f950 	bl	8000d28 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 8002a88:	4604      	mov	r4, r0
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe f926 	bl	8000ce0 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f107 0014 	add.w	r0, r7, #20
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	f7fe f978 	bl	8000d92 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 8002aa2:	4638      	mov	r0, r7
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aaa:	f000 f92b 	bl	8002d04 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe f903 	bl	8000cbe <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f083 0301 	eor.w	r3, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3724      	adds	r7, #36	; 0x24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd90      	pop	{r4, r7, pc}

08002ac8 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEEC1ERS3_>:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ada:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>:
  const TDerived& derived() const {
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8002afa:	687b      	ldr	r3, [r7, #4]
  }
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_SIGNED_INTEGER);
 8002b12:	210a      	movs	r1, #10
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7fe fb68 	bl	80011ea <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asSignedInteger = value;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	17da      	asrs	r2, r3, #31
 8002b1e:	461c      	mov	r4, r3
 8002b20:	4615      	mov	r5, r2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bdb0      	pop	{r4, r5, r7, pc}

08002b30 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIjEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_unsigned<T>::value>::type setInteger(T value) {
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_UNSIGNED_INTEGER);
 8002b3a:	2108      	movs	r1, #8
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7fe fb54 	bl	80011ea <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asUnsignedInteger = static_cast<JsonUInt>(value);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	461c      	mov	r4, r3
 8002b48:	4615      	mov	r5, r2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bdb0      	pop	{r4, r5, r7, pc}

08002b58 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE10visitFloatEd>:
  size_t visitFloat(JsonFloat value) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	ed97 0b00 	vldr	d0, [r7]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f904 	bl	8002d78 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_>
    return bytesWritten();
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f8ba 	bl	8002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002b76:	4603      	mov	r3, r0
  }
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE>:
  size_t visitObject(const CollectionData& object) {
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
    write('{');
 8002b8a:	217b      	movs	r1, #123	; 0x7b
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f951 	bl	8002e34 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEc>
    const VariantSlot* slot = object.head();
 8002b92:	6838      	ldr	r0, [r7, #0]
 8002b94:	f7fe f94e 	bl	8000e34 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 8002b98:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d021      	beq.n	8002be4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0x64>
      formatter_.writeString(slot->key());
 8002ba0:	687c      	ldr	r4, [r7, #4]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7fe f9dc 	bl	8000f60 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4619      	mov	r1, r3
 8002bac:	4620      	mov	r0, r4
 8002bae:	f000 f951 	bl	8002e54 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKc>
      write(':');
 8002bb2:	213a      	movs	r1, #58	; 0x3a
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f93d 	bl	8002e34 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEc>
      slot->data()->accept(*this);
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7fe f951 	bl	8000e62 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe35 	bl	8002834 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_>
      slot = slot->next();
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7fe f96b 	bl	8000ea6 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8002bd0:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0x62>
      write(',');
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f92a 	bl	8002e34 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEc>
    while (slot != 0) {
 8002be0:	e7db      	b.n	8002b9a <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0x1a>
        break;
 8002be2:	bf00      	nop
    write('}');
 8002be4:	217d      	movs	r1, #125	; 0x7d
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f924 	bl	8002e34 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEc>
    return bytesWritten();
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f87c 	bl	8002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002bf2:	4603      	mov	r3, r0
  }
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd90      	pop	{r4, r7, pc}

08002bfc <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitStringEPKcj>:
  size_t visitString(const char* value, size_t n) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
    formatter_.writeString(value, n);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f93e 	bl	8002e90 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKcj>
    return bytesWritten();
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f868 	bl	8002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002c1a:	4603      	mov	r3, r0
  }
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12visitRawJsonEPKcj>:
  size_t visitRawJson(const char* data, size_t n) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
    formatter_.writeRaw(data, n);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f94f 	bl	8002eda <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcj>
    return bytesWritten();
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f854 	bl	8002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002c42:	4603      	mov	r3, r0
  }
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE18visitSignedIntegerEx>:
  size_t visitSignedInteger(JsonInteger value) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8002c58:	68f9      	ldr	r1, [r7, #12]
 8002c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c5e:	4608      	mov	r0, r1
 8002c60:	f000 f94b 	bl	8002efa <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_>
    return bytesWritten();
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f840 	bl	8002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002c6a:	4603      	mov	r3, r0
  }
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE20visitUnsignedIntegerEy>:
  size_t visitUnsignedInteger(JsonUInt value) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8002c80:	68f9      	ldr	r1, [r7, #12]
 8002c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c86:	4608      	mov	r0, r1
 8002c88:	f000 f95b 	bl	8002f42 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>
    return bytesWritten();
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f82c 	bl	8002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002c92:	4603      	mov	r3, r0
  }
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12visitBooleanEb>:
  size_t visitBoolean(bool value) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f97e 	bl	8002fb0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb>
    return bytesWritten();
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f818 	bl	8002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002cba:	4603      	mov	r3, r0
  }
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>:
  void writeRaw(const char* s) {
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 8002cce:	687c      	ldr	r4, [r7, #4]
 8002cd0:	6838      	ldr	r0, [r7, #0]
 8002cd2:	f7fd fa7d 	bl	80001d0 <strlen>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f000 f981 	bl	8002fe4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEPKhj>
  }
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd90      	pop	{r4, r7, pc}

08002cea <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f98b 	bl	8003010 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002cfa:	4603      	mov	r3, r0
  }
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>:
    void operator()(TStoredString s) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      if (s)
 8002d12:	463b      	mov	r3, r7
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe f87c 	bl	8000e12 <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x2a>
        instance_->setString(s);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	463b      	mov	r3, r7
 8002d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d28:	f7fe fa05 	bl	8001136 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>
    }
 8002d2c:	e004      	b.n	8002d38 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x34>
        instance_->setNull();
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f9f3 	bl	800111e <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
    }
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>:
  void operator()(TStoredString s) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	4638      	mov	r0, r7
 8002d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!s)
 8002d4e:	463b      	mov	r3, r7
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe f85e 	bl	8000e12 <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x30>
    instance_->setKey(s);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	463b      	mov	r3, r7
 8002d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d6a:	f7fe f8d1 	bl	8000f10 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>
 8002d6e:	e000      	b.n	8002d72 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x32>
      return;
 8002d70:	bf00      	nop
  }
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	ed87 0b00 	vstr	d0, [r7]
    if (isnan(value))
 8002d84:	ed97 0b00 	vldr	d0, [r7]
 8002d88:	f000 f94f 	bl	800302a <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0x24>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 8002d92:	4927      	ldr	r1, [pc, #156]	; (8002e30 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb8>)
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff ff95 	bl	8002cc4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
 8002d9a:	e045      	b.n	8002e28 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb0>
    if (isinf(value))
 8002d9c:	ed97 0b00 	vldr	d0, [r7]
 8002da0:	f000 f95a 	bl	8003058 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0x3c>
      return writeRaw("null");
 8002daa:	4921      	ldr	r1, [pc, #132]	; (8002e30 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb8>)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff ff89 	bl	8002cc4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
 8002db2:	e039      	b.n	8002e28 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb0>
    if (value < 0.0) {
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc0:	f7fd fda4 	bl	800090c <__aeabi_dcmplt>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0x66>
      writeRaw('-');
 8002dca:	212d      	movs	r1, #45	; 0x2d
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fa6f 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      value = -value;
 8002dd2:	683c      	ldr	r4, [r7, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002dda:	e9c7 4500 	strd	r4, r5, [r7]
    FloatParts<T> parts(value);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	ed97 0b00 	vldr	d0, [r7]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f95c 	bl	80030a4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>
    writeInteger(parts.integral);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	4619      	mov	r1, r3
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fa6d 	bl	80032d0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>
    if (parts.decimalPlaces)
 8002df6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0x94>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8002e04:	4619      	mov	r1, r3
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fa94 	bl	8003334 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma>
    if (parts.exponent) {
 8002e0c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb0>
      writeRaw('e');
 8002e14:	2165      	movs	r1, #101	; 0x65
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fa4a 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      writeInteger(parts.exponent);
 8002e1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002e20:	4619      	mov	r1, r3
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 faca 	bl	80033bc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_>
  }
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	08007954 	.word	0x08007954

08002e34 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEc>:
  void write(char c) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fa32 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
  }
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKc>:
  void writeString(const char* value) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
    writeRaw('\"');
 8002e5e:	2122      	movs	r1, #34	; 0x22
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fa25 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
    while (*value)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKc+0x2c>
      writeChar(*value++);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	603a      	str	r2, [r7, #0]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fabd 	bl	80033f8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc>
    while (*value)
 8002e7e:	e7f2      	b.n	8002e66 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKc+0x12>
    writeRaw('\"');
 8002e80:	2122      	movs	r1, #34	; 0x22
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fa14 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
  }
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 8002e9c:	2122      	movs	r1, #34	; 0x22
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa06 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
    while (n--)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1e5a      	subs	r2, r3, #1
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKcj+0x3a>
      writeChar(*value++);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	60ba      	str	r2, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fa98 	bl	80033f8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc>
    while (n--)
 8002ec8:	e7ec      	b.n	8002ea4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKcj+0x14>
    writeRaw('\"');
 8002eca:	2122      	movs	r1, #34	; 0x22
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f9ef 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
  }
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcj>:
  void writeRaw(const char* s, size_t n) {
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 f879 	bl	8002fe4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEPKhj>
  }
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 8002efa:	b5b0      	push	{r4, r5, r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 8002f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	da0c      	bge.n	8002f28 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_+0x2e>
      writeRaw('-');
 8002f0e:	212d      	movs	r1, #45	; 0x2d
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f9cd 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8002f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4254      	negs	r4, r2
 8002f1e:	eb61 0503 	sbc.w	r5, r1, r3
 8002f22:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8002f26:	e003      	b.n	8002f30 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_+0x36>
      unsigned_value = unsigned_type(value);
 8002f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 8002f30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f804 	bl	8002f42 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>
  }
 8002f3a:	bf00      	nop
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bdb0      	pop	{r4, r5, r7, pc}

08002f42 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b08c      	sub	sp, #48	; 0x30
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	3316      	adds	r3, #22
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
    char* begin = end;
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      *--begin = char(value % 10 + '0');
 8002f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f5e:	f04f 020a 	mov.w	r2, #10
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	f7fd fd19 	bl	800099c <__aeabi_uldivmod>
 8002f6a:	b2d3      	uxtb	r3, r2
 8002f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f72:	3330      	adds	r3, #48	; 0x30
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8002f7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f7e:	f04f 020a 	mov.w	r2, #10
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	f7fd fd09 	bl	800099c <__aeabi_uldivmod>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 8002f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	d000      	beq.n	8002f9c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x5a>
    do {
 8002f9a:	e7de      	b.n	8002f5a <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x18>
    writeRaw(begin, end);
 8002f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fa55 	bl	8003450 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>
  }
 8002fa6:	bf00      	nop
 8002fa8:	3730      	adds	r7, #48	; 0x30
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
    if (value)
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb+0x1c>
      writeRaw("true");
 8002fc2:	4906      	ldr	r1, [pc, #24]	; (8002fdc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb+0x2c>)
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fe7d 	bl	8002cc4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
  }
 8002fca:	e003      	b.n	8002fd4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb+0x24>
      writeRaw("false");
 8002fcc:	4904      	ldr	r1, [pc, #16]	; (8002fe0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb+0x30>)
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff fe78 	bl	8002cc4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
  }
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	0800795c 	.word	0x0800795c
 8002fe0:	08007964 	.word	0x08007964

08002fe4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEPKhj>:
  void write(const uint8_t* s, size_t n) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe faeb 	bl	80015d2 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	441a      	add	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	609a      	str	r2, [r3, #8]
  }
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
    return writer_.count();
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f926 	bl	800326c <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5countEv>
 8003020:	4603      	mov	r3, r0
  }
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>:
bool isnan(T x) {
 800302a:	b590      	push	{r4, r7, lr}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 8003034:	2301      	movs	r3, #1
 8003036:	461c      	mov	r4, r3
 8003038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800303c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003040:	f7fd fc5a 	bl	80008f8 <__aeabi_dcmpeq>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_+0x24>
 800304a:	2300      	movs	r3, #0
 800304c:	461c      	mov	r4, r3
 800304e:	b2e3      	uxtb	r3, r4
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}

08003058 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>:
bool isinf(T x) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800306e:	f7fd fc43 	bl	80008f8 <__aeabi_dcmpeq>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d110      	bne.n	800309a <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 8003078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	f7fd fa2e 	bl	80004e0 <__adddf3>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800308c:	f7fd fc34 	bl	80008f8 <__aeabi_dcmpeq>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x44>
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>:
  FloatParts(TFloat value) {
 80030a4:	b5b0      	push	{r4, r5, r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	ed87 0b00 	vstr	d0, [r7]
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
 80030b0:	4b61      	ldr	r3, [pc, #388]	; (8003238 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x194>)
 80030b2:	61fb      	str	r3, [r7, #28]
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2209      	movs	r2, #9
 80030b8:	729a      	strb	r2, [r3, #10]
    exponent = normalize(value);
 80030ba:	463b      	mov	r3, r7
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f9db 	bl	8003478 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>
 80030c2:	4603      	mov	r3, r0
 80030c4:	461a      	mov	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	811a      	strh	r2, [r3, #8]
    integral = uint32_t(value);
 80030ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	f7fd fc43 	bl	800095c <__aeabi_d2uiz>
 80030d6:	4602      	mov	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	601a      	str	r2, [r3, #0]
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2b09      	cmp	r3, #9
 80030e6:	d915      	bls.n	8003114 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x70>
      maxDecimalPart /= 10;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	4a54      	ldr	r2, [pc, #336]	; (800323c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	08db      	lsrs	r3, r3, #3
 80030f2:	61fb      	str	r3, [r7, #28]
      decimalPlaces--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	b25a      	sxtb	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	729a      	strb	r2, [r3, #10]
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4a4c      	ldr	r2, [pc, #304]	; (800323c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e7e6      	b.n	80030e2 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x3e>
    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
 8003114:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd fb1b 	bl	8000758 <__aeabi_ui2d>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4620      	mov	r0, r4
 8003128:	4629      	mov	r1, r5
 800312a:	f7fd f9d7 	bl	80004dc <__aeabi_dsub>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4614      	mov	r4, r2
 8003134:	461d      	mov	r5, r3
 8003136:	69f8      	ldr	r0, [r7, #28]
 8003138:	f7fd fb0e 	bl	8000758 <__aeabi_ui2d>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd f89c 	bl	8000280 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    decimal = uint32_t(remainder);
 8003150:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003154:	f7fd fc02 	bl	800095c <__aeabi_d2uiz>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]
    remainder = remainder - TFloat(decimal);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd faf8 	bl	8000758 <__aeabi_ui2d>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003170:	f7fd f9b4 	bl	80004dc <__aeabi_dsub>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	e9c7 2304 	strd	r2, r3, [r7, #16]
    decimal += uint32_t(remainder * 2);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685c      	ldr	r4, [r3, #4]
 8003180:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	f7fd f9aa 	bl	80004e0 <__adddf3>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	f7fd fbe2 	bl	800095c <__aeabi_d2uiz>
 8003198:	4603      	mov	r3, r0
 800319a:	18e2      	adds	r2, r4, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	605a      	str	r2, [r3, #4]
    if (decimal >= maxDecimalPart) {
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d81c      	bhi.n	80031e4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x140>
      decimal = 0;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
      integral++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	601a      	str	r2, [r3, #0]
      if (exponent && integral >= 10) {
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00f      	beq.n	80031e4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x140>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b09      	cmp	r3, #9
 80031ca:	d90b      	bls.n	80031e4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x140>
        exponent++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	b21a      	sxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	811a      	strh	r2, [r3, #8]
        integral = 1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 80031ea:	fba3 2301 	umull	r2, r3, r3, r1
 80031ee:	08da      	lsrs	r2, r3, #3
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	1aca      	subs	r2, r1, r3
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d116      	bne.n	800322c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x188>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003204:	2b00      	cmp	r3, #0
 8003206:	dd11      	ble.n	800322c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x188>
      decimal /= 10;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a0b      	ldr	r2, [pc, #44]	; (800323c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	605a      	str	r2, [r3, #4]
      decimalPlaces--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	b25a      	sxtb	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	729a      	strb	r2, [r3, #10]
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 800322a:	e7db      	b.n	80031e4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x140>
  }
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bdb0      	pop	{r4, r5, r7, pc}
 8003236:	bf00      	nop
 8003238:	3b9aca00 	.word	0x3b9aca00
 800323c:	cccccccd 	.word	0xcccccccd

08003240 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEh>:
  void write(uint8_t c) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe f9a1 	bl	800159a <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEh>
 8003258:	4602      	mov	r2, r0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	441a      	add	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
  }
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5countEv>:
  size_t count() const {
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
    return count_;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
  }
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>:
VariantData* variantGetOrAddMember(VariantData* var, TAdaptedString key,
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  if (!var)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x16>
    return 0;
 8003296:	2300      	movs	r3, #0
 8003298:	e006      	b.n	80032a8 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x24>
  return var->getOrAddMember(key, pool);
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f9c8 	bl	8003634 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>
 80032a4:	4603      	mov	r3, r0
 80032a6:	bf00      	nop
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>:
  void writeRaw(char c) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ffbc 	bl	8003240 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEh>
  }
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	3316      	adds	r3, #22
 80032e0:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x60>)
 80032ea:	fba3 2301 	umull	r2, r3, r3, r1
 80032ee:	08da      	lsrs	r2, r3, #3
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	1aca      	subs	r2, r1, r3
 80032fa:	b2d3      	uxtb	r3, r2
 80032fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fe:	3a01      	subs	r2, #1
 8003300:	627a      	str	r2, [r7, #36]	; 0x24
 8003302:	3330      	adds	r3, #48	; 0x30
 8003304:	b2da      	uxtb	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	4a08      	ldr	r2, [pc, #32]	; (8003330 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x60>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	08db      	lsrs	r3, r3, #3
 8003314:	603b      	str	r3, [r7, #0]
    } while (value);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d000      	beq.n	800331e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x4e>
    do {
 800331c:	e7e3      	b.n	80032e6 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x16>
    writeRaw(begin, end);
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f894 	bl	8003450 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>
  }
 8003328:	bf00      	nop
 800332a:	3728      	adds	r7, #40	; 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	cccccccd 	.word	0xcccccccd

08003334 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 8003342:	f107 0310 	add.w	r3, r7, #16
 8003346:	3310      	adds	r3, #16
 8003348:	623b      	str	r3, [r7, #32]
    char* begin = end;
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    while (width--) {
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	3a01      	subs	r2, #1
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	71fa      	strb	r2, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d018      	beq.n	800339a <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma+0x66>
      *--begin = char(value % 10 + '0');
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma+0x84>)
 800336c:	fba3 2301 	umull	r2, r3, r3, r1
 8003370:	08da      	lsrs	r2, r3, #3
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	1aca      	subs	r2, r1, r3
 800337c:	b2d3      	uxtb	r3, r2
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	3a01      	subs	r2, #1
 8003382:	627a      	str	r2, [r7, #36]	; 0x24
 8003384:	3330      	adds	r3, #48	; 0x30
 8003386:	b2da      	uxtb	r2, r3
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	701a      	strb	r2, [r3, #0]
      value /= 10;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma+0x84>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	60bb      	str	r3, [r7, #8]
    while (width--) {
 8003398:	e7d9      	b.n	800334e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma+0x1a>
    *--begin = '.';
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	3b01      	subs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	222e      	movs	r2, #46	; 0x2e
 80033a4:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 80033a6:	6a3a      	ldr	r2, [r7, #32]
 80033a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f850 	bl	8003450 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>
  }
 80033b0:	bf00      	nop
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	cccccccd 	.word	0xcccccccd

080033bc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 80033c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da07      	bge.n	80033e0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_+0x24>
      writeRaw('-');
 80033d0:	212d      	movs	r1, #45	; 0x2d
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ff6c 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	425b      	negs	r3, r3
 80033dc:	81fb      	strh	r3, [r7, #14]
 80033de:	e001      	b.n	80033e4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_+0x28>
      unsigned_value = unsigned_type(value);
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f949 	bl	8003680 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>
  }
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc>:
  void writeChar(char c) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe f87f 	bl	800150a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x32>
      writeRaw('\\');
 8003416:	215c      	movs	r1, #92	; 0x5c
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff49 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      writeRaw(specialChar);
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ff44 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
  }
 8003428:	e00c      	b.n	8003444 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x4c>
    } else if (c) {
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x44>
      writeRaw(c);
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff3b 	bl	80032b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
  }
 800343a:	e003      	b.n	8003444 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 800343c:	4903      	ldr	r1, [pc, #12]	; (800344c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x54>)
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fc40 	bl	8002cc4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
  }
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	0800796c 	.word	0x0800796c

08003450 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>:
  void writeRaw(const char* begin, const char* end) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 800345c:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8003464:	461a      	mov	r2, r3
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	f7ff fdbc 	bl	8002fe4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEPKhj>
  }
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	0000      	movs	r0, r0
	...

08003478 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>:
  static int16_t normalize(TFloat& value) {
 8003478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
    int16_t powersOf10 = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	83fb      	strh	r3, [r7, #30]
    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8003484:	2308      	movs	r3, #8
 8003486:	777b      	strb	r3, [r7, #29]
    int bit = 1 << index;
 8003488:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800348c:	2201      	movs	r2, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	61bb      	str	r3, [r7, #24]
    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800349a:	a362      	add	r3, pc, #392	; (adr r3, 8003624 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1ac>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f7fd fa48 	bl	8000934 <__aeabi_dcmpge>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d04a      	beq.n	8003540 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc8>
      for (; index >= 0; index--) {
 80034aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	db46      	blt.n	8003540 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc8>
        if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80034b8:	f7ff f884 	bl	80025c4 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80034bc:	4603      	mov	r3, r0
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80034c4:	f107 0308 	add.w	r3, r7, #8
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f89a 	bl	8002604 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 80034d0:	ec53 2b10 	vmov	r2, r3, d0
 80034d4:	2101      	movs	r1, #1
 80034d6:	460e      	mov	r6, r1
 80034d8:	4620      	mov	r0, r4
 80034da:	4629      	mov	r1, r5
 80034dc:	f7fd fa2a 	bl	8000934 <__aeabi_dcmpge>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x72>
 80034e6:	2300      	movs	r3, #0
 80034e8:	461e      	mov	r6, r3
 80034ea:	b2f3      	uxtb	r3, r6
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01d      	beq.n	800352c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xb4>
          value *= traits::negativeBinaryPowersOfTen()[index];
 80034f0:	f7ff f878 	bl	80025e4 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80034fc:	f107 030c 	add.w	r3, r7, #12
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff f87e 	bl	8002604 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 8003508:	ec51 0b10 	vmov	r0, r1, d0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f7fc feb5 	bl	8000280 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 + bit);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	b29a      	uxth	r2, r3
 8003524:	8bfb      	ldrh	r3, [r7, #30]
 8003526:	4413      	add	r3, r2
 8003528:	b29b      	uxth	r3, r3
 800352a:	83fb      	strh	r3, [r7, #30]
        bit >>= 1;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	105b      	asrs	r3, r3, #1
 8003530:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 8003532:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	777b      	strb	r3, [r7, #29]
 800353e:	e7b4      	b.n	80034aa <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x32>
    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	f7fd f9fb 	bl	8000948 <__aeabi_dcmpgt>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d05c      	beq.n	8003612 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800355e:	a333      	add	r3, pc, #204	; (adr r3, 800362c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1b4>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fd f9dc 	bl	8000920 <__aeabi_dcmple>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d051      	beq.n	8003612 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
      for (; index >= 0; index--) {
 800356e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003572:	2b00      	cmp	r3, #0
 8003574:	db4d      	blt.n	8003612 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
        if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	e9d3 4500 	ldrd	r4, r5, [r3]
 800357c:	f7ff f832 	bl	80025e4 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8003580:	4603      	mov	r3, r0
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff f838 	bl	8002604 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 8003594:	ec51 0b10 	vmov	r0, r1, d0
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1a8>)
 800359e:	f7fc fe6f 	bl	8000280 <__aeabi_dmul>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	2101      	movs	r1, #1
 80035a8:	460e      	mov	r6, r1
 80035aa:	4620      	mov	r0, r4
 80035ac:	4629      	mov	r1, r5
 80035ae:	f7fd f9ad 	bl	800090c <__aeabi_dcmplt>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x144>
 80035b8:	2300      	movs	r3, #0
 80035ba:	461e      	mov	r6, r3
 80035bc:	b2f3      	uxtb	r3, r6
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01d      	beq.n	80035fe <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x186>
          value *= traits::positiveBinaryPowersOfTen()[index];
 80035c2:	f7fe ffff 	bl	80025c4 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80035c6:	4603      	mov	r3, r0
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff f815 	bl	8002604 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 80035da:	ec51 0b10 	vmov	r0, r1, d0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fc fe4c 	bl	8000280 <__aeabi_dmul>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 - bit);
 80035f2:	8bfa      	ldrh	r2, [r7, #30]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	83fb      	strh	r3, [r7, #30]
        bit >>= 1;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	105b      	asrs	r3, r3, #1
 8003602:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 8003604:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	777b      	strb	r3, [r7, #29]
 8003610:	e7ad      	b.n	800356e <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xf6>
    return powersOf10;
 8003612:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  }
 8003616:	4618      	mov	r0, r3
 8003618:	3724      	adds	r7, #36	; 0x24
 800361a:	46bd      	mov	sp, r7
 800361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361e:	bf00      	nop
 8003620:	40240000 	.word	0x40240000
 8003624:	00000000 	.word	0x00000000
 8003628:	416312d0 	.word	0x416312d0
 800362c:	88e368f1 	.word	0x88e368f1
 8003630:	3ee4f8b5 	.word	0x3ee4f8b5

08003634 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>:
  VariantData* getOrAddMember(TAdaptedString key, MemoryPool* pool) {
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
    if (isNull())
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f7fd fd5b 	bl	80010fc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x1e>
      toObject();
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7fd fdac 	bl	80011aa <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>
    if (!isObject())
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7fd fd3f 	bl	80010d6 <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>
 8003658:	4603      	mov	r3, r0
 800365a:	f083 0301 	eor.w	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x34>
      return 0;
 8003664:	2300      	movs	r3, #0
 8003666:	e007      	b.n	8003678 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x44>
    return content_.asCollection.getOrAddMember(key, pool);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f83a 	bl	80036e8 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 8003674:	4603      	mov	r3, r0
 8003676:	bf00      	nop
  }
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	; 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 800368c:	f107 0308 	add.w	r3, r7, #8
 8003690:	3316      	adds	r3, #22
 8003692:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 8003698:	887a      	ldrh	r2, [r7, #2]
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x64>)
 800369c:	fba3 1302 	umull	r1, r3, r3, r2
 80036a0:	08d9      	lsrs	r1, r3, #3
 80036a2:	460b      	mov	r3, r1
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	3a01      	subs	r2, #1
 80036b4:	627a      	str	r2, [r7, #36]	; 0x24
 80036b6:	3330      	adds	r3, #48	; 0x30
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x64>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	08db      	lsrs	r3, r3, #3
 80036c8:	807b      	strh	r3, [r7, #2]
    } while (value);
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d000      	beq.n	80036d2 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x52>
    do {
 80036d0:	e7e2      	b.n	8003698 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x18>
    writeRaw(begin, end);
 80036d2:	6a3a      	ldr	r2, [r7, #32]
 80036d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff feba 	bl	8003450 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>
  }
 80036dc:	bf00      	nop
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	cccccccd 	.word	0xcccccccd

080036e8 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::getOrAddMember(TAdaptedString key,
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  if (key.isNull())
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fae0 	bl	8000cbe <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x20>
    return 0;
 8003704:	2300      	movs	r3, #0
 8003706:	e013      	b.n	8003730 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  VariantSlot* slot = getSlot(key);
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f814 	bl	8003738 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>
 8003710:	6178      	str	r0, [r7, #20]
  if (slot)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x3a>
    return slot->data();
 8003718:	6978      	ldr	r0, [r7, #20]
 800371a:	f7fd fb97 	bl	8000e4c <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800371e:	4603      	mov	r3, r0
 8003720:	e006      	b.n	8003730 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  return addMember(key, pool);
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f834 	bl	8003794 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 800372c:	4603      	mov	r3, r0
 800372e:	bf00      	nop
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  if (key.isNull())
 8003742:	463b      	mov	r3, r7
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd faba 	bl	8000cbe <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x1c>
    return 0;
 8003750:	2300      	movs	r3, #0
 8003752:	e01b      	b.n	800378c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x54>
  VariantSlot* slot = head_;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
  while (slot) {
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d014      	beq.n	800378a <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x52>
    if (stringEquals(key, adaptString(slot->key())))
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7fd fbfd 	bl	8000f60 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 8003766:	4603      	mov	r3, r0
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe fe8c 	bl	8002486 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800376e:	4603      	mov	r3, r0
 8003770:	4619      	mov	r1, r3
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	f000 f833 	bl	80037de <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x50>
    slot = slot->next();
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7fd fb7a 	bl	8000e78 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8003784:	60f8      	str	r0, [r7, #12]
  while (slot) {
 8003786:	e7e8      	b.n	800375a <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x22>
      break;
 8003788:	bf00      	nop
  return slot;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::addMember(TAdaptedString key,
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  VariantSlot* slot = addSlot(pool);
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7fd fe21 	bl	80013ea <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 80037a8:	6178      	str	r0, [r7, #20]
  if (!slotSetKey(slot, key, pool)) {
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	6978      	ldr	r0, [r7, #20]
 80037b0:	f000 f84f 	bl	8003852 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f083 0301 	eor.w	r3, r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x38>
    removeSlot(slot);
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7fd fe7a 	bl	80014bc <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>
    return 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e004      	b.n	80037d6 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x42>
  return slot->data();
 80037cc:	6978      	ldr	r0, [r7, #20]
 80037ce:	f7fd fb3d 	bl	8000e4c <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 80037d2:	4603      	mov	r3, r0
 80037d4:	bf00      	nop
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 80037de:	b590      	push	{r4, r7, lr}
 80037e0:	b087      	sub	sp, #28
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  size_t size1 = s1.size();
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fa78 	bl	8000ce0 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 80037f0:	6138      	str	r0, [r7, #16]
  size_t size2 = s2.size();
 80037f2:	463b      	mov	r3, r7
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd fa73 	bl	8000ce0 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 80037fa:	60f8      	str	r0, [r7, #12]
  if (size1 != size2)
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x2a>
    return false;
 8003804:	2300      	movs	r3, #0
 8003806:	e020      	b.n	800384a <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d219      	bcs.n	8003848 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6a>
    if (s1[i] != s2[i])
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	6979      	ldr	r1, [r7, #20]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fa75 	bl	8000d08 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 800381e:	4603      	mov	r3, r0
 8003820:	461c      	mov	r4, r3
 8003822:	463b      	mov	r3, r7
 8003824:	6979      	ldr	r1, [r7, #20]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fa6e 	bl	8000d08 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 800382c:	4603      	mov	r3, r0
 800382e:	429c      	cmp	r4, r3
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x62>
      return false;
 800383c:	2300      	movs	r3, #0
 800383e:	e004      	b.n	800384a <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e7e1      	b.n	800380c <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x2e>
  return true;
 8003848:	2301      	movs	r3, #1
}
 800384a:	4618      	mov	r0, r3
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	bd90      	pop	{r4, r7, pc}

08003852 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>:
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  if (!var)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x16>
    return false;
 8003864:	2300      	movs	r3, #0
 8003866:	e00c      	b.n	8003882 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x30>
  return storeString(pool, key, SlotKeySetter(var));
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	68f9      	ldr	r1, [r7, #12]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd fd34 	bl	80012dc <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f806 	bl	800388a <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>
 800387e:	4603      	mov	r3, r0
 8003880:	bf00      	nop
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>:
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 800388a:	b590      	push	{r4, r7, lr}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 8003896:	f107 0308 	add.w	r3, r7, #8
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fa5f 	bl	8000d5e <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4622      	mov	r2, r4
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f805 	bl	80038b6 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 80038ac:	4603      	mov	r3, r0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd90      	pop	{r4, r7, pc}

080038b6 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 80038b6:	b590      	push	{r4, r7, lr}
 80038b8:	b089      	sub	sp, #36	; 0x24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	713a      	strb	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 80038c4:	f107 0308 	add.w	r3, r7, #8
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fa2d 	bl	8000d28 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 80038ce:	4604      	mov	r4, r0
 80038d0:	f107 0308 	add.w	r3, r7, #8
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fa03 	bl	8000ce0 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 80038da:	4602      	mov	r2, r0
 80038dc:	f107 0014 	add.w	r0, r7, #20
 80038e0:	2301      	movs	r3, #1
 80038e2:	4621      	mov	r1, r4
 80038e4:	f7fd fa55 	bl	8000d92 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 80038e8:	4638      	mov	r0, r7
 80038ea:	f107 0314 	add.w	r3, r7, #20
 80038ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038f0:	f7ff fa26 	bl	8002d40 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 80038f4:	f107 0308 	add.w	r3, r7, #8
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd f9e0 	bl	8000cbe <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 80038fe:	4603      	mov	r3, r0
 8003900:	f083 0301 	eor.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd90      	pop	{r4, r7, pc}
	...

08003910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <HAL_MspInit+0x44>)
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	4a0e      	ldr	r2, [pc, #56]	; (8003954 <HAL_MspInit+0x44>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6193      	str	r3, [r2, #24]
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <HAL_MspInit+0x44>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_MspInit+0x44>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4a08      	ldr	r2, [pc, #32]	; (8003954 <HAL_MspInit+0x44>)
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003938:	61d3      	str	r3, [r2, #28]
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_MspInit+0x44>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <HAL_SPI_MspInit+0x8c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d130      	bne.n	80039dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_SPI_MspInit+0x90>)
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_SPI_MspInit+0x90>)
 8003980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003984:	6193      	str	r3, [r2, #24]
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_SPI_MspInit+0x90>)
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <HAL_SPI_MspInit+0x90>)
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <HAL_SPI_MspInit+0x90>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	6153      	str	r3, [r2, #20]
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_SPI_MspInit+0x90>)
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039aa:	23e0      	movs	r3, #224	; 0xe0
 80039ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ae:	2302      	movs	r3, #2
 80039b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039b6:	2303      	movs	r3, #3
 80039b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039ba:	2305      	movs	r3, #5
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039be:	f107 0314 	add.w	r3, r7, #20
 80039c2:	4619      	mov	r1, r3
 80039c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c8:	f000 fb6c 	bl	80040a4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80039cc:	2200      	movs	r2, #0
 80039ce:	2105      	movs	r1, #5
 80039d0:	2023      	movs	r0, #35	; 0x23
 80039d2:	f000 faf2 	bl	8003fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039d6:	2023      	movs	r0, #35	; 0x23
 80039d8:	f000 fb0b 	bl	8003ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039dc:	bf00      	nop
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40013000 	.word	0x40013000
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_UART_MspInit+0x80>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d129      	bne.n	8003a62 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a0e:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <HAL_UART_MspInit+0x84>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_UART_MspInit+0x84>)
 8003a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a18:	61d3      	str	r3, [r2, #28]
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <HAL_UART_MspInit+0x84>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_UART_MspInit+0x84>)
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	4a11      	ldr	r2, [pc, #68]	; (8003a70 <HAL_UART_MspInit+0x84>)
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a30:	6153      	str	r3, [r2, #20]
 8003a32:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <HAL_UART_MspInit+0x84>)
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003a3e:	f248 0304 	movw	r3, #32772	; 0x8004
 8003a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a50:	2307      	movs	r3, #7
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a5e:	f000 fb21 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a62:	bf00      	nop
 8003a64:	3728      	adds	r7, #40	; 0x28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40004400 	.word	0x40004400
 8003a70:	40021000 	.word	0x40021000

08003a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <NMI_Handler+0x4>

08003a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a7e:	e7fe      	b.n	8003a7e <HardFault_Handler+0x4>

08003a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a84:	e7fe      	b.n	8003a84 <MemManage_Handler+0x4>

08003a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a8a:	e7fe      	b.n	8003a8a <BusFault_Handler+0x4>

08003a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a90:	e7fe      	b.n	8003a90 <UsageFault_Handler+0x4>

08003a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ac0:	f000 f95c 	bl	8003d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
	myCount++;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <SPI1_IRQHandler+0x1c>)
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <SPI1_IRQHandler+0x1c>)
 8003ad8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ada:	4803      	ldr	r0, [pc, #12]	; (8003ae8 <SPI1_IRQHandler+0x20>)
 8003adc:	f002 f812 	bl	8005b04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003ae0:	bf00      	nop
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2000288a 	.word	0x2000288a
 8003ae8:	2000008c 	.word	0x2000008c

08003aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return 1;
 8003af0:	2301      	movs	r3, #1
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_kill>:

int _kill(int pid, int sig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b06:	f002 fe9f 	bl	8006848 <__errno>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2216      	movs	r2, #22
 8003b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_exit>:

void _exit (int status)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ffe7 	bl	8003afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b2e:	e7fe      	b.n	8003b2e <_exit+0x12>

08003b30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	e00a      	b.n	8003b58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b42:	f3af 8000 	nop.w
 8003b46:	4601      	mov	r1, r0
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	60ba      	str	r2, [r7, #8]
 8003b4e:	b2ca      	uxtb	r2, r1
 8003b50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	3301      	adds	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	dbf0      	blt.n	8003b42 <_read+0x12>
  }

  return len;
 8003b60:	687b      	ldr	r3, [r7, #4]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e009      	b.n	8003b90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	60ba      	str	r2, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	dbf1      	blt.n	8003b7c <_write+0x12>
  }
  return len;
 8003b98:	687b      	ldr	r3, [r7, #4]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_close>:

int _close(int file)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bca:	605a      	str	r2, [r3, #4]
  return 0;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_isatty>:

int _isatty(int file)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003be2:	2301      	movs	r3, #1
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c14:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <_sbrk+0x5c>)
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <_sbrk+0x60>)
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <_sbrk+0x64>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c28:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <_sbrk+0x64>)
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <_sbrk+0x68>)
 8003c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <_sbrk+0x64>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d207      	bcs.n	8003c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c3c:	f002 fe04 	bl	8006848 <__errno>
 8003c40:	4603      	mov	r3, r0
 8003c42:	220c      	movs	r2, #12
 8003c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c4a:	e009      	b.n	8003c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <_sbrk+0x64>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <_sbrk+0x64>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <_sbrk+0x64>)
 8003c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20003000 	.word	0x20003000
 8003c6c:	00000400 	.word	0x00000400
 8003c70:	2000288c 	.word	0x2000288c
 8003c74:	200028a8 	.word	0x200028a8

08003c78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <SystemInit+0x20>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <SystemInit+0x20>)
 8003c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
 }
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cd4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ca0:	f7ff ffea 	bl	8003c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ca4:	480c      	ldr	r0, [pc, #48]	; (8003cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ca6:	490d      	ldr	r1, [pc, #52]	; (8003cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <LoopForever+0xe>)
  movs r3, #0
 8003caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cac:	e002      	b.n	8003cb4 <LoopCopyDataInit>

08003cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cb2:	3304      	adds	r3, #4

08003cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cb8:	d3f9      	bcc.n	8003cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cbc:	4c0a      	ldr	r4, [pc, #40]	; (8003ce8 <LoopForever+0x16>)
  movs r3, #0
 8003cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cc0:	e001      	b.n	8003cc6 <LoopFillZerobss>

08003cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cc4:	3204      	adds	r2, #4

08003cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cc8:	d3fb      	bcc.n	8003cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cca:	f002 fdc3 	bl	8006854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cce:	f7fd fceb 	bl	80016a8 <main>

08003cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8003cd2:	e7fe      	b.n	8003cd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003cd4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003ce0:	08007b98 	.word	0x08007b98
  ldr r2, =_sbss
 8003ce4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003ce8:	200028a4 	.word	0x200028a4

08003cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003cec:	e7fe      	b.n	8003cec <ADC1_2_IRQHandler>
	...

08003cf0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_Init+0x28>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a07      	ldr	r2, [pc, #28]	; (8003d18 <HAL_Init+0x28>)
 8003cfa:	f043 0310 	orr.w	r3, r3, #16
 8003cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d00:	2003      	movs	r0, #3
 8003d02:	f000 f94f 	bl	8003fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d06:	2000      	movs	r0, #0
 8003d08:	f000 f808 	bl	8003d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d0c:	f7ff fe00 	bl	8003910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40022000 	.word	0x40022000

08003d1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d24:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_InitTick+0x54>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <HAL_InitTick+0x58>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f967 	bl	800400e <HAL_SYSTICK_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00e      	b.n	8003d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b0f      	cmp	r3, #15
 8003d4e:	d80a      	bhi.n	8003d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d50:	2200      	movs	r2, #0
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d58:	f000 f92f 	bl	8003fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d5c:	4a06      	ldr	r2, [pc, #24]	; (8003d78 <HAL_InitTick+0x5c>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000000 	.word	0x20000000
 8003d74:	20000008 	.word	0x20000008
 8003d78:	20000004 	.word	0x20000004

08003d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_IncTick+0x20>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_IncTick+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_IncTick+0x24>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000008 	.word	0x20000008
 8003da0:	20002890 	.word	0x20002890

08003da4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;  
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_GetTick+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20002890 	.word	0x20002890

08003dbc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7ff ffee 	bl	8003da4 <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dd4:	d005      	beq.n	8003de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <HAL_Delay+0x44>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003de2:	bf00      	nop
 8003de4:	f7ff ffde 	bl	8003da4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d8f7      	bhi.n	8003de4 <HAL_Delay+0x28>
  {
  }
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000008 	.word	0x20000008

08003e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <__NVIC_SetPriorityGrouping+0x44>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e20:	4013      	ands	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e36:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <__NVIC_SetPriorityGrouping+0x44>)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	60d3      	str	r3, [r2, #12]
}
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <__NVIC_GetPriorityGrouping+0x18>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	f003 0307 	and.w	r3, r3, #7
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db0b      	blt.n	8003e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	4907      	ldr	r1, [pc, #28]	; (8003ea0 <__NVIC_EnableIRQ+0x38>)
 8003e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2001      	movs	r0, #1
 8003e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000e100 	.word	0xe000e100

08003ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	6039      	str	r1, [r7, #0]
 8003eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	db0a      	blt.n	8003ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	490c      	ldr	r1, [pc, #48]	; (8003ef0 <__NVIC_SetPriority+0x4c>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	0112      	lsls	r2, r2, #4
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ecc:	e00a      	b.n	8003ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4908      	ldr	r1, [pc, #32]	; (8003ef4 <__NVIC_SetPriority+0x50>)
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3b04      	subs	r3, #4
 8003edc:	0112      	lsls	r2, r2, #4
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	761a      	strb	r2, [r3, #24]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000e100 	.word	0xe000e100
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b089      	sub	sp, #36	; 0x24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f1c3 0307 	rsb	r3, r3, #7
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	bf28      	it	cs
 8003f16:	2304      	movcs	r3, #4
 8003f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d902      	bls.n	8003f28 <NVIC_EncodePriority+0x30>
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3b03      	subs	r3, #3
 8003f26:	e000      	b.n	8003f2a <NVIC_EncodePriority+0x32>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43da      	mvns	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	43d9      	mvns	r1, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f50:	4313      	orrs	r3, r2
         );
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3724      	adds	r7, #36	; 0x24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f70:	d301      	bcc.n	8003f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f72:	2301      	movs	r3, #1
 8003f74:	e00f      	b.n	8003f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <SysTick_Config+0x40>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f7e:	210f      	movs	r1, #15
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f84:	f7ff ff8e 	bl	8003ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <SysTick_Config+0x40>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f8e:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <SysTick_Config+0x40>)
 8003f90:	2207      	movs	r2, #7
 8003f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	e000e010 	.word	0xe000e010

08003fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff29 	bl	8003e04 <__NVIC_SetPriorityGrouping>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b086      	sub	sp, #24
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fcc:	f7ff ff3e 	bl	8003e4c <__NVIC_GetPriorityGrouping>
 8003fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f7ff ff8e 	bl	8003ef8 <NVIC_EncodePriority>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff5d 	bl	8003ea4 <__NVIC_SetPriority>
}
 8003fea:	bf00      	nop
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff31 	bl	8003e68 <__NVIC_EnableIRQ>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ffa2 	bl	8003f60 <SysTick_Config>
 800401c:	4603      	mov	r3, r0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004038:	2b02      	cmp	r3, #2
 800403a:	d005      	beq.n	8004048 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2204      	movs	r2, #4
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	e027      	b.n	8004098 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 020e 	bic.w	r2, r2, #14
 8004056:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f202 	lsl.w	r2, r1, r2
 8004076:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
    } 
  }
  return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b2:	e14e      	b.n	8004352 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8140 	beq.w	800434c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x40>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 0201 	and.w	r2, r3, #1
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d017      	beq.n	8004182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d123      	bne.n	80041d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	220f      	movs	r2, #15
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	6939      	ldr	r1, [r7, #16]
 80041d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 0203 	and.w	r2, r3, #3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 809a 	beq.w	800434c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004218:	4b55      	ldr	r3, [pc, #340]	; (8004370 <HAL_GPIO_Init+0x2cc>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	4a54      	ldr	r2, [pc, #336]	; (8004370 <HAL_GPIO_Init+0x2cc>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6193      	str	r3, [r2, #24]
 8004224:	4b52      	ldr	r3, [pc, #328]	; (8004370 <HAL_GPIO_Init+0x2cc>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004230:	4a50      	ldr	r2, [pc, #320]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	3302      	adds	r3, #2
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	220f      	movs	r2, #15
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800425a:	d013      	beq.n	8004284 <HAL_GPIO_Init+0x1e0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a46      	ldr	r2, [pc, #280]	; (8004378 <HAL_GPIO_Init+0x2d4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00d      	beq.n	8004280 <HAL_GPIO_Init+0x1dc>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a45      	ldr	r2, [pc, #276]	; (800437c <HAL_GPIO_Init+0x2d8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d007      	beq.n	800427c <HAL_GPIO_Init+0x1d8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a44      	ldr	r2, [pc, #272]	; (8004380 <HAL_GPIO_Init+0x2dc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <HAL_GPIO_Init+0x1d4>
 8004274:	2303      	movs	r3, #3
 8004276:	e006      	b.n	8004286 <HAL_GPIO_Init+0x1e2>
 8004278:	2305      	movs	r3, #5
 800427a:	e004      	b.n	8004286 <HAL_GPIO_Init+0x1e2>
 800427c:	2302      	movs	r3, #2
 800427e:	e002      	b.n	8004286 <HAL_GPIO_Init+0x1e2>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_GPIO_Init+0x1e2>
 8004284:	2300      	movs	r3, #0
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	f002 0203 	and.w	r2, r2, #3
 800428c:	0092      	lsls	r2, r2, #2
 800428e:	4093      	lsls	r3, r2
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004296:	4937      	ldr	r1, [pc, #220]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	089b      	lsrs	r3, r3, #2
 800429c:	3302      	adds	r3, #2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042a4:	4b37      	ldr	r3, [pc, #220]	; (8004384 <HAL_GPIO_Init+0x2e0>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042c8:	4a2e      	ldr	r2, [pc, #184]	; (8004384 <HAL_GPIO_Init+0x2e0>)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ce:	4b2d      	ldr	r3, [pc, #180]	; (8004384 <HAL_GPIO_Init+0x2e0>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	43db      	mvns	r3, r3
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80042f2:	4a24      	ldr	r2, [pc, #144]	; (8004384 <HAL_GPIO_Init+0x2e0>)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042f8:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_GPIO_Init+0x2e0>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	43db      	mvns	r3, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800431c:	4a19      	ldr	r2, [pc, #100]	; (8004384 <HAL_GPIO_Init+0x2e0>)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004322:	4b18      	ldr	r3, [pc, #96]	; (8004384 <HAL_GPIO_Init+0x2e0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	43db      	mvns	r3, r3
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4013      	ands	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004346:	4a0f      	ldr	r2, [pc, #60]	; (8004384 <HAL_GPIO_Init+0x2e0>)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3301      	adds	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f aea9 	bne.w	80040b4 <HAL_GPIO_Init+0x10>
  }
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40021000 	.word	0x40021000
 8004374:	40010000 	.word	0x40010000
 8004378:	48000400 	.word	0x48000400
 800437c:	48000800 	.word	0x48000800
 8004380:	48000c00 	.word	0x48000c00
 8004384:	40010400 	.word	0x40010400

08004388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
 8004394:	4613      	mov	r3, r2
 8004396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004398:	787b      	ldrb	r3, [r7, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043a4:	e002      	b.n	80043ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80043be:	af00      	add	r7, sp, #0
 80043c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	f001 b823 	b.w	8005424 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 817d 	beq.w	80046ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043f4:	4bbc      	ldr	r3, [pc, #752]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d00c      	beq.n	800441a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004400:	4bb9      	ldr	r3, [pc, #740]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b08      	cmp	r3, #8
 800440a:	d15c      	bne.n	80044c6 <HAL_RCC_OscConfig+0x10e>
 800440c:	4bb6      	ldr	r3, [pc, #728]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004418:	d155      	bne.n	80044c6 <HAL_RCC_OscConfig+0x10e>
 800441a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800441e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800442e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004432:	fab3 f383 	clz	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d102      	bne.n	800444c <HAL_RCC_OscConfig+0x94>
 8004446:	4ba8      	ldr	r3, [pc, #672]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	e015      	b.n	8004478 <HAL_RCC_OscConfig+0xc0>
 800444c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004450:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004464:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004468:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004474:	4b9c      	ldr	r3, [pc, #624]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800447c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004480:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004484:	fa92 f2a2 	rbit	r2, r2
 8004488:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800448c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004490:	fab2 f282 	clz	r2, r2
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	f042 0220 	orr.w	r2, r2, #32
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	f002 021f 	and.w	r2, r2, #31
 80044a0:	2101      	movs	r1, #1
 80044a2:	fa01 f202 	lsl.w	r2, r1, r2
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 811f 	beq.w	80046ec <HAL_RCC_OscConfig+0x334>
 80044ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 8116 	bne.w	80046ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f000 bfaf 	b.w	8005424 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d6:	d106      	bne.n	80044e6 <HAL_RCC_OscConfig+0x12e>
 80044d8:	4b83      	ldr	r3, [pc, #524]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a82      	ldr	r2, [pc, #520]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 80044de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e036      	b.n	8004554 <HAL_RCC_OscConfig+0x19c>
 80044e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0x158>
 80044f6:	4b7c      	ldr	r3, [pc, #496]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7b      	ldr	r2, [pc, #492]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b79      	ldr	r3, [pc, #484]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a78      	ldr	r2, [pc, #480]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e021      	b.n	8004554 <HAL_RCC_OscConfig+0x19c>
 8004510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004514:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x184>
 8004522:	4b71      	ldr	r3, [pc, #452]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a70      	ldr	r2, [pc, #448]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b6e      	ldr	r3, [pc, #440]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6d      	ldr	r2, [pc, #436]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0x19c>
 800453c:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a69      	ldr	r2, [pc, #420]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b67      	ldr	r3, [pc, #412]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a66      	ldr	r2, [pc, #408]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 800454e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004552:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004554:	4b64      	ldr	r3, [pc, #400]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	f023 020f 	bic.w	r2, r3, #15
 800455c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	495f      	ldr	r1, [pc, #380]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 800456a:	4313      	orrs	r3, r2
 800456c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800456e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d059      	beq.n	8004632 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457e:	f7ff fc11 	bl	8003da4 <HAL_GetTick>
 8004582:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	e00a      	b.n	800459e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004588:	f7ff fc0c 	bl	8003da4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b64      	cmp	r3, #100	; 0x64
 8004596:	d902      	bls.n	800459e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	f000 bf43 	b.w	8005424 <HAL_RCC_OscConfig+0x106c>
 800459e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80045b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_RCC_OscConfig+0x218>
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	e015      	b.n	80045fc <HAL_RCC_OscConfig+0x244>
 80045d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80045e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80045ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80045f8:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004600:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004604:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004608:	fa92 f2a2 	rbit	r2, r2
 800460c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004610:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004614:	fab2 f282 	clz	r2, r2
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	f042 0220 	orr.w	r2, r2, #32
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	f002 021f 	and.w	r2, r2, #31
 8004624:	2101      	movs	r1, #1
 8004626:	fa01 f202 	lsl.w	r2, r1, r2
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0ab      	beq.n	8004588 <HAL_RCC_OscConfig+0x1d0>
 8004630:	e05d      	b.n	80046ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7ff fbb7 	bl	8003da4 <HAL_GetTick>
 8004636:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800463c:	f7ff fbb2 	bl	8003da4 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b64      	cmp	r3, #100	; 0x64
 800464a:	d902      	bls.n	8004652 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	f000 bee9 	b.w	8005424 <HAL_RCC_OscConfig+0x106c>
 8004652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004656:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004666:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d102      	bne.n	8004684 <HAL_RCC_OscConfig+0x2cc>
 800467e:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	e015      	b.n	80046b0 <HAL_RCC_OscConfig+0x2f8>
 8004684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004688:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800469c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80046a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80046a4:	fa93 f3a3 	rbit	r3, r3
 80046a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_RCC_OscConfig+0x330>)
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046b4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80046b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80046bc:	fa92 f2a2 	rbit	r2, r2
 80046c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80046c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80046c8:	fab2 f282 	clz	r2, r2
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	f042 0220 	orr.w	r2, r2, #32
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	f002 021f 	and.w	r2, r2, #31
 80046d8:	2101      	movs	r1, #1
 80046da:	fa01 f202 	lsl.w	r2, r1, r2
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ab      	bne.n	800463c <HAL_RCC_OscConfig+0x284>
 80046e4:	e003      	b.n	80046ee <HAL_RCC_OscConfig+0x336>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 817d 	beq.w	80049fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004704:	4ba6      	ldr	r3, [pc, #664]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004710:	4ba3      	ldr	r3, [pc, #652]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b08      	cmp	r3, #8
 800471a:	d172      	bne.n	8004802 <HAL_RCC_OscConfig+0x44a>
 800471c:	4ba0      	ldr	r3, [pc, #640]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d16c      	bne.n	8004802 <HAL_RCC_OscConfig+0x44a>
 8004728:	2302      	movs	r3, #2
 800472a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800473a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b01      	cmp	r3, #1
 8004750:	d102      	bne.n	8004758 <HAL_RCC_OscConfig+0x3a0>
 8004752:	4b93      	ldr	r3, [pc, #588]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	e013      	b.n	8004780 <HAL_RCC_OscConfig+0x3c8>
 8004758:	2302      	movs	r3, #2
 800475a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004762:	fa93 f3a3 	rbit	r3, r3
 8004766:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800476a:	2302      	movs	r3, #2
 800476c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004770:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004774:	fa93 f3a3 	rbit	r3, r3
 8004778:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800477c:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	2202      	movs	r2, #2
 8004782:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004786:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800478a:	fa92 f2a2 	rbit	r2, r2
 800478e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004792:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004796:	fab2 f282 	clz	r2, r2
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	f042 0220 	orr.w	r2, r2, #32
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	f002 021f 	and.w	r2, r2, #31
 80047a6:	2101      	movs	r1, #1
 80047a8:	fa01 f202 	lsl.w	r2, r1, r2
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCC_OscConfig+0x410>
 80047b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d002      	beq.n	80047c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f000 be2e 	b.w	8005424 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b75      	ldr	r3, [pc, #468]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	21f8      	movs	r1, #248	; 0xf8
 80047de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80047e6:	fa91 f1a1 	rbit	r1, r1
 80047ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80047ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80047f2:	fab1 f181 	clz	r1, r1
 80047f6:	b2c9      	uxtb	r1, r1
 80047f8:	408b      	lsls	r3, r1
 80047fa:	4969      	ldr	r1, [pc, #420]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004800:	e0fd      	b.n	80049fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8088 	beq.w	8004924 <HAL_RCC_OscConfig+0x56c>
 8004814:	2301      	movs	r3, #1
 8004816:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004826:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800482a:	fab3 f383 	clz	r3, r3
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004834:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	461a      	mov	r2, r3
 800483c:	2301      	movs	r3, #1
 800483e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7ff fab0 	bl	8003da4 <HAL_GetTick>
 8004844:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	e00a      	b.n	8004860 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800484a:	f7ff faab 	bl	8003da4 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d902      	bls.n	8004860 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	f000 bde2 	b.w	8005424 <HAL_RCC_OscConfig+0x106c>
 8004860:	2302      	movs	r3, #2
 8004862:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004872:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d102      	bne.n	8004890 <HAL_RCC_OscConfig+0x4d8>
 800488a:	4b45      	ldr	r3, [pc, #276]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	e013      	b.n	80048b8 <HAL_RCC_OscConfig+0x500>
 8004890:	2302      	movs	r3, #2
 8004892:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80048a2:	2302      	movs	r3, #2
 80048a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80048a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80048b4:	4b3a      	ldr	r3, [pc, #232]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	2202      	movs	r2, #2
 80048ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80048be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80048c2:	fa92 f2a2 	rbit	r2, r2
 80048c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80048ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80048ce:	fab2 f282 	clz	r2, r2
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	f042 0220 	orr.w	r2, r2, #32
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	f002 021f 	and.w	r2, r2, #31
 80048de:	2101      	movs	r1, #1
 80048e0:	fa01 f202 	lsl.w	r2, r1, r2
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0af      	beq.n	800484a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ea:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	21f8      	movs	r1, #248	; 0xf8
 8004900:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004904:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004908:	fa91 f1a1 	rbit	r1, r1
 800490c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004910:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004914:	fab1 f181 	clz	r1, r1
 8004918:	b2c9      	uxtb	r1, r1
 800491a:	408b      	lsls	r3, r1
 800491c:	4920      	ldr	r1, [pc, #128]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 800491e:	4313      	orrs	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
 8004922:	e06c      	b.n	80049fe <HAL_RCC_OscConfig+0x646>
 8004924:	2301      	movs	r3, #1
 8004926:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004936:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	fab3 f383 	clz	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	461a      	mov	r2, r3
 800494c:	2300      	movs	r3, #0
 800494e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7ff fa28 	bl	8003da4 <HAL_GetTick>
 8004954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004958:	e00a      	b.n	8004970 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800495a:	f7ff fa23 	bl	8003da4 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d902      	bls.n	8004970 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	f000 bd5a 	b.w	8005424 <HAL_RCC_OscConfig+0x106c>
 8004970:	2302      	movs	r3, #2
 8004972:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d104      	bne.n	80049a4 <HAL_RCC_OscConfig+0x5ec>
 800499a:	4b01      	ldr	r3, [pc, #4]	; (80049a0 <HAL_RCC_OscConfig+0x5e8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	e015      	b.n	80049cc <HAL_RCC_OscConfig+0x614>
 80049a0:	40021000 	.word	0x40021000
 80049a4:	2302      	movs	r3, #2
 80049a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80049b6:	2302      	movs	r3, #2
 80049b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80049bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049c0:	fa93 f3a3 	rbit	r3, r3
 80049c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049c8:	4bc8      	ldr	r3, [pc, #800]	; (8004cec <HAL_RCC_OscConfig+0x934>)
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2202      	movs	r2, #2
 80049ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80049d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80049d6:	fa92 f2a2 	rbit	r2, r2
 80049da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80049de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80049e2:	fab2 f282 	clz	r2, r2
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	f042 0220 	orr.w	r2, r2, #32
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	f002 021f 	and.w	r2, r2, #31
 80049f2:	2101      	movs	r1, #1
 80049f4:	fa01 f202 	lsl.w	r2, r1, r2
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1ad      	bne.n	800495a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 8110 	beq.w	8004c34 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d079      	beq.n	8004b18 <HAL_RCC_OscConfig+0x760>
 8004a24:	2301      	movs	r3, #1
 8004a26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	4bab      	ldr	r3, [pc, #684]	; (8004cf0 <HAL_RCC_OscConfig+0x938>)
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4e:	f7ff f9a9 	bl	8003da4 <HAL_GetTick>
 8004a52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a56:	e00a      	b.n	8004a6e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a58:	f7ff f9a4 	bl	8003da4 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d902      	bls.n	8004a6e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	f000 bcdb 	b.w	8005424 <HAL_RCC_OscConfig+0x106c>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a88:	2202      	movs	r2, #2
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	fa93 f2a3 	rbit	r2, r3
 8004a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aac:	2202      	movs	r2, #2
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	fa93 f2a3 	rbit	r2, r3
 8004abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ac6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac8:	4b88      	ldr	r3, [pc, #544]	; (8004cec <HAL_RCC_OscConfig+0x934>)
 8004aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	6019      	str	r1, [r3, #0]
 8004ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004adc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	fa93 f1a3 	rbit	r1, r3
 8004ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004aee:	6019      	str	r1, [r3, #0]
  return result;
 8004af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0a0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x6a0>
 8004b16:	e08d      	b.n	8004c34 <HAL_RCC_OscConfig+0x87c>
 8004b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	fa93 f2a3 	rbit	r2, r3
 8004b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b3a:	601a      	str	r2, [r3, #0]
  return result;
 8004b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b46:	fab3 f383 	clz	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b68      	ldr	r3, [pc, #416]	; (8004cf0 <HAL_RCC_OscConfig+0x938>)
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	461a      	mov	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5a:	f7ff f923 	bl	8003da4 <HAL_GetTick>
 8004b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b64:	f7ff f91e 	bl	8003da4 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d902      	bls.n	8004b7a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	f000 bc55 	b.w	8005424 <HAL_RCC_OscConfig+0x106c>
 8004b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b82:	2202      	movs	r2, #2
 8004b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	fa93 f2a3 	rbit	r2, r3
 8004b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	fa93 f2a3 	rbit	r2, r3
 8004bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bca:	2202      	movs	r2, #2
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	fa93 f2a3 	rbit	r2, r3
 8004bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004be4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be6:	4b41      	ldr	r3, [pc, #260]	; (8004cec <HAL_RCC_OscConfig+0x934>)
 8004be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	6019      	str	r1, [r3, #0]
 8004bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	fa93 f1a3 	rbit	r1, r3
 8004c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c0c:	6019      	str	r1, [r3, #0]
  return result;
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	2101      	movs	r1, #1
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d197      	bne.n	8004b64 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 81a1 	beq.w	8004f8c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c50:	4b26      	ldr	r3, [pc, #152]	; (8004cec <HAL_RCC_OscConfig+0x934>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5c:	4b23      	ldr	r3, [pc, #140]	; (8004cec <HAL_RCC_OscConfig+0x934>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	4a22      	ldr	r2, [pc, #136]	; (8004cec <HAL_RCC_OscConfig+0x934>)
 8004c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c66:	61d3      	str	r3, [r2, #28]
 8004c68:	4b20      	ldr	r3, [pc, #128]	; (8004cec <HAL_RCC_OscConfig+0x934>)
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c74:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c82:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <HAL_RCC_OscConfig+0x93c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d11a      	bne.n	8004ccc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c96:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <HAL_RCC_OscConfig+0x93c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <HAL_RCC_OscConfig+0x93c>)
 8004c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca2:	f7ff f87f 	bl	8003da4 <HAL_GetTick>
 8004ca6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	e009      	b.n	8004cc0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cac:	f7ff f87a 	bl	8003da4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b64      	cmp	r3, #100	; 0x64
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e3b1      	b.n	8005424 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <HAL_RCC_OscConfig+0x93c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0ef      	beq.n	8004cac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d10d      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x940>
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_RCC_OscConfig+0x934>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	4a02      	ldr	r2, [pc, #8]	; (8004cec <HAL_RCC_OscConfig+0x934>)
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	6213      	str	r3, [r2, #32]
 8004ce8:	e03c      	b.n	8004d64 <HAL_RCC_OscConfig+0x9ac>
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	10908120 	.word	0x10908120
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10c      	bne.n	8004d22 <HAL_RCC_OscConfig+0x96a>
 8004d08:	4bc1      	ldr	r3, [pc, #772]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	4ac0      	ldr	r2, [pc, #768]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	6213      	str	r3, [r2, #32]
 8004d14:	4bbe      	ldr	r3, [pc, #760]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	4abd      	ldr	r2, [pc, #756]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d1a:	f023 0304 	bic.w	r3, r3, #4
 8004d1e:	6213      	str	r3, [r2, #32]
 8004d20:	e020      	b.n	8004d64 <HAL_RCC_OscConfig+0x9ac>
 8004d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0x994>
 8004d32:	4bb7      	ldr	r3, [pc, #732]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4ab6      	ldr	r2, [pc, #728]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d38:	f043 0304 	orr.w	r3, r3, #4
 8004d3c:	6213      	str	r3, [r2, #32]
 8004d3e:	4bb4      	ldr	r3, [pc, #720]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	4ab3      	ldr	r2, [pc, #716]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	6213      	str	r3, [r2, #32]
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0x9ac>
 8004d4c:	4bb0      	ldr	r3, [pc, #704]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	4aaf      	ldr	r2, [pc, #700]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	6213      	str	r3, [r2, #32]
 8004d58:	4bad      	ldr	r3, [pc, #692]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4aac      	ldr	r2, [pc, #688]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004d5e:	f023 0304 	bic.w	r3, r3, #4
 8004d62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8081 	beq.w	8004e78 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d76:	f7ff f815 	bl	8003da4 <HAL_GetTick>
 8004d7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	e00b      	b.n	8004d98 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7ff f810 	bl	8003da4 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e345      	b.n	8005424 <HAL_RCC_OscConfig+0x106c>
 8004d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004da0:	2202      	movs	r2, #2
 8004da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	fa93 f2a3 	rbit	r2, r3
 8004db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dcc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	fa93 f2a3 	rbit	r2, r3
 8004dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dda:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004dde:	601a      	str	r2, [r3, #0]
  return result;
 8004de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004de8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f043 0302 	orr.w	r3, r3, #2
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d102      	bne.n	8004e04 <HAL_RCC_OscConfig+0xa4c>
 8004dfe:	4b84      	ldr	r3, [pc, #528]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	e013      	b.n	8004e2c <HAL_RCC_OscConfig+0xa74>
 8004e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	fa93 f2a3 	rbit	r2, r3
 8004e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e22:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	4b79      	ldr	r3, [pc, #484]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e34:	2102      	movs	r1, #2
 8004e36:	6011      	str	r1, [r2, #0]
 8004e38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	fa92 f1a2 	rbit	r1, r2
 8004e46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e4a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e4e:	6011      	str	r1, [r2, #0]
  return result;
 8004e50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e54:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	fab2 f282 	clz	r2, r2
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	f002 021f 	and.w	r2, r2, #31
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d084      	beq.n	8004d80 <HAL_RCC_OscConfig+0x9c8>
 8004e76:	e07f      	b.n	8004f78 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e78:	f7fe ff94 	bl	8003da4 <HAL_GetTick>
 8004e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e80:	e00b      	b.n	8004e9a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fe ff8f 	bl	8003da4 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e2c4      	b.n	8005424 <HAL_RCC_OscConfig+0x106c>
 8004e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eaa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	fa93 f2a3 	rbit	r2, r3
 8004eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ece:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	fa93 f2a3 	rbit	r2, r3
 8004ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004edc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ee0:	601a      	str	r2, [r3, #0]
  return result;
 8004ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004eea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eec:	fab3 f383 	clz	r3, r3
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f043 0302 	orr.w	r3, r3, #2
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d102      	bne.n	8004f06 <HAL_RCC_OscConfig+0xb4e>
 8004f00:	4b43      	ldr	r3, [pc, #268]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	e013      	b.n	8004f2e <HAL_RCC_OscConfig+0xb76>
 8004f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f0e:	2202      	movs	r2, #2
 8004f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	fa93 f2a3 	rbit	r2, r3
 8004f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	4b39      	ldr	r3, [pc, #228]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f36:	2102      	movs	r1, #2
 8004f38:	6011      	str	r1, [r2, #0]
 8004f3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	fa92 f1a2 	rbit	r1, r2
 8004f48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f4c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f50:	6011      	str	r1, [r2, #0]
  return result;
 8004f52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f56:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	fab2 f282 	clz	r2, r2
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	f002 021f 	and.w	r2, r2, #31
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d184      	bne.n	8004e82 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f78:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b23      	ldr	r3, [pc, #140]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	4a22      	ldr	r2, [pc, #136]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8242 	beq.w	8005422 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f9e:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <HAL_RCC_OscConfig+0xc58>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	f000 8213 	beq.w	80053d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	f040 8162 	bne.w	8005282 <HAL_RCC_OscConfig+0xeca>
 8004fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004fc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	fa93 f2a3 	rbit	r2, r3
 8004fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fde:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fe2:	601a      	str	r2, [r3, #0]
  return result;
 8004fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fee:	fab3 f383 	clz	r3, r3
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ff8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	461a      	mov	r2, r3
 8005000:	2300      	movs	r3, #0
 8005002:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fe fece 	bl	8003da4 <HAL_GetTick>
 8005008:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800500c:	e00c      	b.n	8005028 <HAL_RCC_OscConfig+0xc70>
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005014:	f7fe fec6 	bl	8003da4 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e1fd      	b.n	8005424 <HAL_RCC_OscConfig+0x106c>
 8005028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	fa93 f2a3 	rbit	r2, r3
 8005044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005048:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800504c:	601a      	str	r2, [r3, #0]
  return result;
 800504e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005052:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005056:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005058:	fab3 f383 	clz	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d102      	bne.n	8005072 <HAL_RCC_OscConfig+0xcba>
 800506c:	4bb0      	ldr	r3, [pc, #704]	; (8005330 <HAL_RCC_OscConfig+0xf78>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	e027      	b.n	80050c2 <HAL_RCC_OscConfig+0xd0a>
 8005072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005076:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800507a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800507e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005084:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	fa93 f2a3 	rbit	r2, r3
 800508e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005092:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80050a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	fa93 f2a3 	rbit	r2, r3
 80050b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	4b9c      	ldr	r3, [pc, #624]	; (8005330 <HAL_RCC_OscConfig+0xf78>)
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80050ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050ce:	6011      	str	r1, [r2, #0]
 80050d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	fa92 f1a2 	rbit	r1, r2
 80050de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050e6:	6011      	str	r1, [r2, #0]
  return result;
 80050e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	fab2 f282 	clz	r2, r2
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	f042 0220 	orr.w	r2, r2, #32
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	f002 021f 	and.w	r2, r2, #31
 8005102:	2101      	movs	r1, #1
 8005104:	fa01 f202 	lsl.w	r2, r1, r2
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d182      	bne.n	8005014 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800510e:	4b88      	ldr	r3, [pc, #544]	; (8005330 <HAL_RCC_OscConfig+0xf78>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	430b      	orrs	r3, r1
 8005130:	497f      	ldr	r1, [pc, #508]	; (8005330 <HAL_RCC_OscConfig+0xf78>)
 8005132:	4313      	orrs	r3, r2
 8005134:	604b      	str	r3, [r1, #4]
 8005136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800513e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005148:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	fa93 f2a3 	rbit	r2, r3
 8005152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005156:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800515a:	601a      	str	r2, [r3, #0]
  return result;
 800515c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005160:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005164:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005170:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	461a      	mov	r2, r3
 8005178:	2301      	movs	r3, #1
 800517a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fe fe12 	bl	8003da4 <HAL_GetTick>
 8005180:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005184:	e009      	b.n	800519a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005186:	f7fe fe0d 	bl	8003da4 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e144      	b.n	8005424 <HAL_RCC_OscConfig+0x106c>
 800519a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80051a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	fa93 f2a3 	rbit	r2, r3
 80051b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80051be:	601a      	str	r2, [r3, #0]
  return result;
 80051c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80051c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051ca:	fab3 f383 	clz	r3, r3
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d102      	bne.n	80051e4 <HAL_RCC_OscConfig+0xe2c>
 80051de:	4b54      	ldr	r3, [pc, #336]	; (8005330 <HAL_RCC_OscConfig+0xf78>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	e027      	b.n	8005234 <HAL_RCC_OscConfig+0xe7c>
 80051e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	fa93 f2a3 	rbit	r2, r3
 8005200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005204:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005212:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	fa93 f2a3 	rbit	r2, r3
 8005226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800522a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	4b3f      	ldr	r3, [pc, #252]	; (8005330 <HAL_RCC_OscConfig+0xf78>)
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005238:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800523c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005240:	6011      	str	r1, [r2, #0]
 8005242:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005246:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	fa92 f1a2 	rbit	r1, r2
 8005250:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005254:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005258:	6011      	str	r1, [r2, #0]
  return result;
 800525a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800525e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	fab2 f282 	clz	r2, r2
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	f042 0220 	orr.w	r2, r2, #32
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	f002 021f 	and.w	r2, r2, #31
 8005274:	2101      	movs	r1, #1
 8005276:	fa01 f202 	lsl.w	r2, r1, r2
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d082      	beq.n	8005186 <HAL_RCC_OscConfig+0xdce>
 8005280:	e0cf      	b.n	8005422 <HAL_RCC_OscConfig+0x106a>
 8005282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005286:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800528a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800528e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005294:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	fa93 f2a3 	rbit	r2, r3
 800529e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80052a6:	601a      	str	r2, [r3, #0]
  return result;
 80052a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80052b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	461a      	mov	r2, r3
 80052c4:	2300      	movs	r3, #0
 80052c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7fe fd6c 	bl	8003da4 <HAL_GetTick>
 80052cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052d0:	e009      	b.n	80052e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d2:	f7fe fd67 	bl	8003da4 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e09e      	b.n	8005424 <HAL_RCC_OscConfig+0x106c>
 80052e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	fa93 f2a3 	rbit	r2, r3
 8005302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005306:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800530a:	601a      	str	r2, [r3, #0]
  return result;
 800530c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005310:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005314:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005316:	fab3 f383 	clz	r3, r3
 800531a:	b2db      	uxtb	r3, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d104      	bne.n	8005334 <HAL_RCC_OscConfig+0xf7c>
 800532a:	4b01      	ldr	r3, [pc, #4]	; (8005330 <HAL_RCC_OscConfig+0xf78>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	e029      	b.n	8005384 <HAL_RCC_OscConfig+0xfcc>
 8005330:	40021000 	.word	0x40021000
 8005334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005338:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800533c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005346:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	fa93 f2a3 	rbit	r2, r3
 8005350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005354:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800536c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	fa93 f2a3 	rbit	r2, r3
 8005376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <HAL_RCC_OscConfig+0x1078>)
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005388:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800538c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005390:	6011      	str	r1, [r2, #0]
 8005392:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005396:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	fa92 f1a2 	rbit	r1, r2
 80053a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80053a8:	6011      	str	r1, [r2, #0]
  return result;
 80053aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	fab2 f282 	clz	r2, r2
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	f042 0220 	orr.w	r2, r2, #32
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	f002 021f 	and.w	r2, r2, #31
 80053c4:	2101      	movs	r1, #1
 80053c6:	fa01 f202 	lsl.w	r2, r1, r2
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d180      	bne.n	80052d2 <HAL_RCC_OscConfig+0xf1a>
 80053d0:	e027      	b.n	8005422 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e01e      	b.n	8005424 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_RCC_OscConfig+0x1078>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	429a      	cmp	r2, r3
 8005404:	d10b      	bne.n	800541e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005406:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800540a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800540e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800541a:	429a      	cmp	r2, r3
 800541c:	d001      	beq.n	8005422 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40021000 	.word	0x40021000

08005434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b09e      	sub	sp, #120	; 0x78
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e162      	b.n	8005712 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800544c:	4b90      	ldr	r3, [pc, #576]	; (8005690 <HAL_RCC_ClockConfig+0x25c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d910      	bls.n	800547c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545a:	4b8d      	ldr	r3, [pc, #564]	; (8005690 <HAL_RCC_ClockConfig+0x25c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f023 0207 	bic.w	r2, r3, #7
 8005462:	498b      	ldr	r1, [pc, #556]	; (8005690 <HAL_RCC_ClockConfig+0x25c>)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	4313      	orrs	r3, r2
 8005468:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546a:	4b89      	ldr	r3, [pc, #548]	; (8005690 <HAL_RCC_ClockConfig+0x25c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d001      	beq.n	800547c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e14a      	b.n	8005712 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b82      	ldr	r3, [pc, #520]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	497f      	ldr	r1, [pc, #508]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80dc 	beq.w	8005660 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d13c      	bne.n	800552a <HAL_RCC_ClockConfig+0xf6>
 80054b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80054be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c0:	fab3 f383 	clz	r3, r3
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d102      	bne.n	80054da <HAL_RCC_ClockConfig+0xa6>
 80054d4:	4b6f      	ldr	r3, [pc, #444]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	e00f      	b.n	80054fa <HAL_RCC_ClockConfig+0xc6>
 80054da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054e2:	fa93 f3a3 	rbit	r3, r3
 80054e6:	667b      	str	r3, [r7, #100]	; 0x64
 80054e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ec:	663b      	str	r3, [r7, #96]	; 0x60
 80054ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f0:	fa93 f3a3 	rbit	r3, r3
 80054f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054f6:	4b67      	ldr	r3, [pc, #412]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005500:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005502:	fa92 f2a2 	rbit	r2, r2
 8005506:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800550a:	fab2 f282 	clz	r2, r2
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	f042 0220 	orr.w	r2, r2, #32
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	f002 021f 	and.w	r2, r2, #31
 800551a:	2101      	movs	r1, #1
 800551c:	fa01 f202 	lsl.w	r2, r1, r2
 8005520:	4013      	ands	r3, r2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d17b      	bne.n	800561e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e0f3      	b.n	8005712 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d13c      	bne.n	80055ac <HAL_RCC_ClockConfig+0x178>
 8005532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005536:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553a:	fa93 f3a3 	rbit	r3, r3
 800553e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005542:	fab3 f383 	clz	r3, r3
 8005546:	b2db      	uxtb	r3, r3
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	d102      	bne.n	800555c <HAL_RCC_ClockConfig+0x128>
 8005556:	4b4f      	ldr	r3, [pc, #316]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	e00f      	b.n	800557c <HAL_RCC_ClockConfig+0x148>
 800555c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005560:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005564:	fa93 f3a3 	rbit	r3, r3
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
 800556a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800556e:	643b      	str	r3, [r7, #64]	; 0x40
 8005570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005572:	fa93 f3a3 	rbit	r3, r3
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005578:	4b46      	ldr	r3, [pc, #280]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005580:	63ba      	str	r2, [r7, #56]	; 0x38
 8005582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005584:	fa92 f2a2 	rbit	r2, r2
 8005588:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800558a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800558c:	fab2 f282 	clz	r2, r2
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	f042 0220 	orr.w	r2, r2, #32
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	f002 021f 	and.w	r2, r2, #31
 800559c:	2101      	movs	r1, #1
 800559e:	fa01 f202 	lsl.w	r2, r1, r2
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d13a      	bne.n	800561e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0b2      	b.n	8005712 <HAL_RCC_ClockConfig+0x2de>
 80055ac:	2302      	movs	r3, #2
 80055ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	fa93 f3a3 	rbit	r3, r3
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ba:	fab3 f383 	clz	r3, r3
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d102      	bne.n	80055d4 <HAL_RCC_ClockConfig+0x1a0>
 80055ce:	4b31      	ldr	r3, [pc, #196]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	e00d      	b.n	80055f0 <HAL_RCC_ClockConfig+0x1bc>
 80055d4:	2302      	movs	r3, #2
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	fa93 f3a3 	rbit	r3, r3
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	2302      	movs	r3, #2
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	fa93 f3a3 	rbit	r3, r3
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	4b29      	ldr	r3, [pc, #164]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	2202      	movs	r2, #2
 80055f2:	61ba      	str	r2, [r7, #24]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	fa92 f2a2 	rbit	r2, r2
 80055fa:	617a      	str	r2, [r7, #20]
  return result;
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	fab2 f282 	clz	r2, r2
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	f042 0220 	orr.w	r2, r2, #32
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	f002 021f 	and.w	r2, r2, #31
 800560e:	2101      	movs	r1, #1
 8005610:	fa01 f202 	lsl.w	r2, r1, r2
 8005614:	4013      	ands	r3, r2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e079      	b.n	8005712 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800561e:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f023 0203 	bic.w	r2, r3, #3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	491a      	ldr	r1, [pc, #104]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 800562c:	4313      	orrs	r3, r2
 800562e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005630:	f7fe fbb8 	bl	8003da4 <HAL_GetTick>
 8005634:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	e00a      	b.n	800564e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005638:	f7fe fbb4 	bl	8003da4 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f241 3288 	movw	r2, #5000	; 0x1388
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e061      	b.n	8005712 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <HAL_RCC_ClockConfig+0x260>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f003 020c 	and.w	r2, r3, #12
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	429a      	cmp	r2, r3
 800565e:	d1eb      	bne.n	8005638 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <HAL_RCC_ClockConfig+0x25c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d214      	bcs.n	8005698 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b08      	ldr	r3, [pc, #32]	; (8005690 <HAL_RCC_ClockConfig+0x25c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f023 0207 	bic.w	r2, r3, #7
 8005676:	4906      	ldr	r1, [pc, #24]	; (8005690 <HAL_RCC_ClockConfig+0x25c>)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567e:	4b04      	ldr	r3, [pc, #16]	; (8005690 <HAL_RCC_ClockConfig+0x25c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d005      	beq.n	8005698 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e040      	b.n	8005712 <HAL_RCC_ClockConfig+0x2de>
 8005690:	40022000 	.word	0x40022000
 8005694:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d008      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a4:	4b1d      	ldr	r3, [pc, #116]	; (800571c <HAL_RCC_ClockConfig+0x2e8>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	491a      	ldr	r1, [pc, #104]	; (800571c <HAL_RCC_ClockConfig+0x2e8>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056c2:	4b16      	ldr	r3, [pc, #88]	; (800571c <HAL_RCC_ClockConfig+0x2e8>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4912      	ldr	r1, [pc, #72]	; (800571c <HAL_RCC_ClockConfig+0x2e8>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056d6:	f000 f829 	bl	800572c <HAL_RCC_GetSysClockFreq>
 80056da:	4601      	mov	r1, r0
 80056dc:	4b0f      	ldr	r3, [pc, #60]	; (800571c <HAL_RCC_ClockConfig+0x2e8>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e4:	22f0      	movs	r2, #240	; 0xf0
 80056e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	fa92 f2a2 	rbit	r2, r2
 80056ee:	60fa      	str	r2, [r7, #12]
  return result;
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	fab2 f282 	clz	r2, r2
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	40d3      	lsrs	r3, r2
 80056fa:	4a09      	ldr	r2, [pc, #36]	; (8005720 <HAL_RCC_ClockConfig+0x2ec>)
 80056fc:	5cd3      	ldrb	r3, [r2, r3]
 80056fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005702:	4a08      	ldr	r2, [pc, #32]	; (8005724 <HAL_RCC_ClockConfig+0x2f0>)
 8005704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005706:	4b08      	ldr	r3, [pc, #32]	; (8005728 <HAL_RCC_ClockConfig+0x2f4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe fb06 	bl	8003d1c <HAL_InitTick>
  
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3778      	adds	r7, #120	; 0x78
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40021000 	.word	0x40021000
 8005720:	08007a08 	.word	0x08007a08
 8005724:	20000000 	.word	0x20000000
 8005728:	20000004 	.word	0x20000004

0800572c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800572c:	b480      	push	{r7}
 800572e:	b08b      	sub	sp, #44	; 0x2c
 8005730:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	2300      	movs	r3, #0
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005746:	4b29      	ldr	r3, [pc, #164]	; (80057ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	2b04      	cmp	r3, #4
 8005754:	d002      	beq.n	800575c <HAL_RCC_GetSysClockFreq+0x30>
 8005756:	2b08      	cmp	r3, #8
 8005758:	d003      	beq.n	8005762 <HAL_RCC_GetSysClockFreq+0x36>
 800575a:	e03c      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800575c:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800575e:	623b      	str	r3, [r7, #32]
      break;
 8005760:	e03c      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005768:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800576c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	fa92 f2a2 	rbit	r2, r2
 8005774:	607a      	str	r2, [r7, #4]
  return result;
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	fab2 f282 	clz	r2, r2
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	40d3      	lsrs	r3, r2
 8005780:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005782:	5cd3      	ldrb	r3, [r2, r3]
 8005784:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005786:	4b19      	ldr	r3, [pc, #100]	; (80057ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	220f      	movs	r2, #15
 8005790:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	fa92 f2a2 	rbit	r2, r2
 8005798:	60fa      	str	r2, [r7, #12]
  return result;
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	fab2 f282 	clz	r2, r2
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	40d3      	lsrs	r3, r2
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80057a6:	5cd3      	ldrb	r3, [r2, r3]
 80057a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057b4:	4a0e      	ldr	r2, [pc, #56]	; (80057f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	fb02 f303 	mul.w	r3, r2, r3
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
 80057c4:	e004      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	4a0c      	ldr	r2, [pc, #48]	; (80057fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	623b      	str	r3, [r7, #32]
      break;
 80057d4:	e002      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057d8:	623b      	str	r3, [r7, #32]
      break;
 80057da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057dc:	6a3b      	ldr	r3, [r7, #32]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	372c      	adds	r7, #44	; 0x2c
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40021000 	.word	0x40021000
 80057f0:	007a1200 	.word	0x007a1200
 80057f4:	08007a20 	.word	0x08007a20
 80057f8:	08007a30 	.word	0x08007a30
 80057fc:	003d0900 	.word	0x003d0900

08005800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005804:	4b03      	ldr	r3, [pc, #12]	; (8005814 <HAL_RCC_GetHCLKFreq+0x14>)
 8005806:	681b      	ldr	r3, [r3, #0]
}
 8005808:	4618      	mov	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000000 	.word	0x20000000

08005818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800581e:	f7ff ffef 	bl	8005800 <HAL_RCC_GetHCLKFreq>
 8005822:	4601      	mov	r1, r0
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800582c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005830:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	fa92 f2a2 	rbit	r2, r2
 8005838:	603a      	str	r2, [r7, #0]
  return result;
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	fab2 f282 	clz	r2, r2
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	40d3      	lsrs	r3, r2
 8005844:	4a04      	ldr	r2, [pc, #16]	; (8005858 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005846:	5cd3      	ldrb	r3, [r2, r3]
 8005848:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40021000 	.word	0x40021000
 8005858:	08007a18 	.word	0x08007a18

0800585c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005862:	f7ff ffcd 	bl	8005800 <HAL_RCC_GetHCLKFreq>
 8005866:	4601      	mov	r1, r0
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005870:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005874:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	fa92 f2a2 	rbit	r2, r2
 800587c:	603a      	str	r2, [r7, #0]
  return result;
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	fab2 f282 	clz	r2, r2
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	40d3      	lsrs	r3, r2
 8005888:	4a04      	ldr	r2, [pc, #16]	; (800589c <HAL_RCC_GetPCLK2Freq+0x40>)
 800588a:	5cd3      	ldrb	r3, [r2, r3]
 800588c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40021000 	.word	0x40021000
 800589c:	08007a18 	.word	0x08007a18

080058a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e095      	b.n	80059de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d108      	bne.n	80058cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c2:	d009      	beq.n	80058d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	61da      	str	r2, [r3, #28]
 80058ca:	e005      	b.n	80058d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fe f830 	bl	8003958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005918:	d902      	bls.n	8005920 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e002      	b.n	8005926 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005924:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800592e:	d007      	beq.n	8005940 <HAL_SPI_Init+0xa0>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005938:	d002      	beq.n	8005940 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	ea42 0103 	orr.w	r1, r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	f003 0204 	and.w	r2, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059bc:	ea42 0103 	orr.w	r1, r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_SPI_Transmit_IT+0x20>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e072      	b.n	8005aee <HAL_SPI_Transmit_IT+0x106>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_SPI_Transmit_IT+0x34>
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a20:	e060      	b.n	8005ae4 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d002      	beq.n	8005a34 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005a2e:	2302      	movs	r3, #2
 8005a30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a32:	e057      	b.n	8005ae4 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2203      	movs	r2, #3
 8005a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a78:	d903      	bls.n	8005a82 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <HAL_SPI_Transmit_IT+0x114>)
 8005a7e:	651a      	str	r2, [r3, #80]	; 0x50
 8005a80:	e002      	b.n	8005a88 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <HAL_SPI_Transmit_IT+0x118>)
 8005a86:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a90:	d10f      	bne.n	8005ab2 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ab0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005ac0:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d008      	beq.n	8005ae2 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e000      	b.n	8005ae4 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8005ae2:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	08005d89 	.word	0x08005d89
 8005b00:	08005d43 	.word	0x08005d43

08005b04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	099b      	lsrs	r3, r3, #6
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10f      	bne.n	8005b48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	099b      	lsrs	r3, r3, #6
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d004      	beq.n	8005b48 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	4798      	blx	r3
    return;
 8005b46:	e0d7      	b.n	8005cf8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_SPI_IRQHandler+0x66>
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	09db      	lsrs	r3, r3, #7
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
    return;
 8005b68:	e0c6      	b.n	8005cf8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10c      	bne.n	8005b90 <HAL_SPI_IRQHandler+0x8c>
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	099b      	lsrs	r3, r3, #6
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80b4 	beq.w	8005cf8 <HAL_SPI_IRQHandler+0x1f4>
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80ad 	beq.w	8005cf8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	099b      	lsrs	r3, r3, #6
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d023      	beq.n	8005bf2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d011      	beq.n	8005bda <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bba:	f043 0204 	orr.w	r2, r3, #4
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	e00b      	b.n	8005bf2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	693b      	ldr	r3, [r7, #16]
        return;
 8005bf0:	e082      	b.n	8005cf8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d014      	beq.n	8005c28 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c02:	f043 0201 	orr.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00c      	beq.n	8005c4e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c38:	f043 0208 	orr.w	r2, r3, #8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c40:	2300      	movs	r3, #0
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60bb      	str	r3, [r7, #8]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d04f      	beq.n	8005cf6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c64:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <HAL_SPI_IRQHandler+0x17e>
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d034      	beq.n	8005cec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0203 	bic.w	r2, r2, #3
 8005c90:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d011      	beq.n	8005cbe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	4a18      	ldr	r2, [pc, #96]	; (8005d00 <HAL_SPI_IRQHandler+0x1fc>)
 8005ca0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe f9bd 	bl	8004026 <HAL_DMA_Abort_IT>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d016      	beq.n	8005cf4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	4a0d      	ldr	r2, [pc, #52]	; (8005d00 <HAL_SPI_IRQHandler+0x1fc>)
 8005ccc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe f9a7 	bl	8004026 <HAL_DMA_Abort_IT>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005cea:	e003      	b.n	8005cf4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f809 	bl	8005d04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005cf2:	e000      	b.n	8005cf6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005cf4:	bf00      	nop
    return;
 8005cf6:	bf00      	nop
  }
}
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	08005d19 	.word	0x08005d19

08005d04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff ffe5 	bl	8005d04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	330c      	adds	r3, #12
 8005d54:	7812      	ldrb	r2, [r2, #0]
 8005d56:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d102      	bne.n	8005d80 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f98a 	bl	8006094 <SPI_CloseTx_ISR>
  }
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	1c9a      	adds	r2, r3, #2
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f968 	bl	8006094 <SPI_CloseTx_ISR>
  }
}
 8005dc4:	bf00      	nop
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ddc:	f7fd ffe2 	bl	8003da4 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	4413      	add	r3, r2
 8005dea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dec:	f7fd ffda 	bl	8003da4 <HAL_GetTick>
 8005df0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005df2:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	015b      	lsls	r3, r3, #5
 8005df8:	0d1b      	lsrs	r3, r3, #20
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e02:	e054      	b.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0a:	d050      	beq.n	8005eae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e0c:	f7fd ffca 	bl	8003da4 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d902      	bls.n	8005e22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d13d      	bne.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3a:	d111      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	d004      	beq.n	8005e50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4e:	d107      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e68:	d10f      	bne.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e017      	b.n	8005ece <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d19b      	bne.n	8005e04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000000 	.word	0x20000000

08005edc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005eee:	f7fd ff59 	bl	8003da4 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	4413      	add	r3, r2
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005efe:	f7fd ff51 	bl	8003da4 <HAL_GetTick>
 8005f02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f0c:	4b3d      	ldr	r3, [pc, #244]	; (8006004 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	00da      	lsls	r2, r3, #3
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	0d1b      	lsrs	r3, r3, #20
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f24:	e060      	b.n	8005fe8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f2c:	d107      	bne.n	8005f3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f44:	d050      	beq.n	8005fe8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f46:	f7fd ff2d 	bl	8003da4 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d902      	bls.n	8005f5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d13d      	bne.n	8005fd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f74:	d111      	bne.n	8005f9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7e:	d004      	beq.n	8005f8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f88:	d107      	bne.n	8005f9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa2:	d10f      	bne.n	8005fc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e010      	b.n	8005ffa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d196      	bne.n	8005f26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	; 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000000 	.word	0x20000000

08006008 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2200      	movs	r2, #0
 800601c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff ff5b 	bl	8005edc <SPI_WaitFifoStateUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e027      	b.n	800608c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	2180      	movs	r1, #128	; 0x80
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff fec0 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e014      	b.n	800608c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2200      	movs	r2, #0
 800606a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff ff34 	bl	8005edc <SPI_WaitFifoStateUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607e:	f043 0220 	orr.w	r2, r3, #32
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e000      	b.n	800608c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800609c:	f7fd fe82 	bl	8003da4 <HAL_GetTick>
 80060a0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060b0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	2164      	movs	r1, #100	; 0x64
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ffa6 	bl	8006008 <SPI_EndRxTxTransaction>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	60bb      	str	r3, [r7, #8]
 80060ea:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff fe01 	bl	8005d04 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006102:	e002      	b.n	800610a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7fb fabb 	bl	8001680 <HAL_SPI_TxCpltCallback>
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e040      	b.n	80061a6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7fd fc59 	bl	80039ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2224      	movs	r2, #36	; 0x24
 800613e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f82d 	bl	80061b0 <UART_SetConfig>
 8006156:	4603      	mov	r3, r0
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e022      	b.n	80061a6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f957 	bl	800641c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800617c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800618c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9de 	bl	8006560 <UART_CheckIdleState>
 80061a4:	4603      	mov	r3, r0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b8a      	ldr	r3, [pc, #552]	; (8006404 <UART_SetConfig+0x254>)
 80061dc:	4013      	ands	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	430a      	orrs	r2, r1
 8006220:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a78      	ldr	r2, [pc, #480]	; (8006408 <UART_SetConfig+0x258>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d120      	bne.n	800626e <UART_SetConfig+0xbe>
 800622c:	4b77      	ldr	r3, [pc, #476]	; (800640c <UART_SetConfig+0x25c>)
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	2b03      	cmp	r3, #3
 8006236:	d817      	bhi.n	8006268 <UART_SetConfig+0xb8>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0x90>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006251 	.word	0x08006251
 8006244:	0800625d 	.word	0x0800625d
 8006248:	08006263 	.word	0x08006263
 800624c:	08006257 	.word	0x08006257
 8006250:	2300      	movs	r3, #0
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e01d      	b.n	8006292 <UART_SetConfig+0xe2>
 8006256:	2302      	movs	r3, #2
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e01a      	b.n	8006292 <UART_SetConfig+0xe2>
 800625c:	2304      	movs	r3, #4
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e017      	b.n	8006292 <UART_SetConfig+0xe2>
 8006262:	2308      	movs	r3, #8
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e014      	b.n	8006292 <UART_SetConfig+0xe2>
 8006268:	2310      	movs	r3, #16
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e011      	b.n	8006292 <UART_SetConfig+0xe2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a67      	ldr	r2, [pc, #412]	; (8006410 <UART_SetConfig+0x260>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d102      	bne.n	800627e <UART_SetConfig+0xce>
 8006278:	2300      	movs	r3, #0
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e009      	b.n	8006292 <UART_SetConfig+0xe2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a64      	ldr	r2, [pc, #400]	; (8006414 <UART_SetConfig+0x264>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d102      	bne.n	800628e <UART_SetConfig+0xde>
 8006288:	2300      	movs	r3, #0
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e001      	b.n	8006292 <UART_SetConfig+0xe2>
 800628e:	2310      	movs	r3, #16
 8006290:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800629a:	d15a      	bne.n	8006352 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800629c:	7ffb      	ldrb	r3, [r7, #31]
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d827      	bhi.n	80062f2 <UART_SetConfig+0x142>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0xf8>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062d5 	.word	0x080062d5
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	080062f3 	.word	0x080062f3
 80062b8:	080062e3 	.word	0x080062e3
 80062bc:	080062f3 	.word	0x080062f3
 80062c0:	080062f3 	.word	0x080062f3
 80062c4:	080062f3 	.word	0x080062f3
 80062c8:	080062eb 	.word	0x080062eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062cc:	f7ff faa4 	bl	8005818 <HAL_RCC_GetPCLK1Freq>
 80062d0:	61b8      	str	r0, [r7, #24]
        break;
 80062d2:	e013      	b.n	80062fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7ff fac2 	bl	800585c <HAL_RCC_GetPCLK2Freq>
 80062d8:	61b8      	str	r0, [r7, #24]
        break;
 80062da:	e00f      	b.n	80062fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062dc:	4b4e      	ldr	r3, [pc, #312]	; (8006418 <UART_SetConfig+0x268>)
 80062de:	61bb      	str	r3, [r7, #24]
        break;
 80062e0:	e00c      	b.n	80062fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062e2:	f7ff fa23 	bl	800572c <HAL_RCC_GetSysClockFreq>
 80062e6:	61b8      	str	r0, [r7, #24]
        break;
 80062e8:	e008      	b.n	80062fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ee:	61bb      	str	r3, [r7, #24]
        break;
 80062f0:	e004      	b.n	80062fc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	77bb      	strb	r3, [r7, #30]
        break;
 80062fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d074      	beq.n	80063ec <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	005a      	lsls	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	441a      	add	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	fbb2 f3f3 	udiv	r3, r2, r3
 8006316:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b0f      	cmp	r3, #15
 800631c:	d916      	bls.n	800634c <UART_SetConfig+0x19c>
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006324:	d212      	bcs.n	800634c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f023 030f 	bic.w	r3, r3, #15
 800632e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	085b      	lsrs	r3, r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	b29a      	uxth	r2, r3
 800633c:	89fb      	ldrh	r3, [r7, #14]
 800633e:	4313      	orrs	r3, r2
 8006340:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	89fa      	ldrh	r2, [r7, #14]
 8006348:	60da      	str	r2, [r3, #12]
 800634a:	e04f      	b.n	80063ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	77bb      	strb	r3, [r7, #30]
 8006350:	e04c      	b.n	80063ec <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006352:	7ffb      	ldrb	r3, [r7, #31]
 8006354:	2b08      	cmp	r3, #8
 8006356:	d828      	bhi.n	80063aa <UART_SetConfig+0x1fa>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <UART_SetConfig+0x1b0>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006385 	.word	0x08006385
 8006364:	0800638d 	.word	0x0800638d
 8006368:	08006395 	.word	0x08006395
 800636c:	080063ab 	.word	0x080063ab
 8006370:	0800639b 	.word	0x0800639b
 8006374:	080063ab 	.word	0x080063ab
 8006378:	080063ab 	.word	0x080063ab
 800637c:	080063ab 	.word	0x080063ab
 8006380:	080063a3 	.word	0x080063a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006384:	f7ff fa48 	bl	8005818 <HAL_RCC_GetPCLK1Freq>
 8006388:	61b8      	str	r0, [r7, #24]
        break;
 800638a:	e013      	b.n	80063b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800638c:	f7ff fa66 	bl	800585c <HAL_RCC_GetPCLK2Freq>
 8006390:	61b8      	str	r0, [r7, #24]
        break;
 8006392:	e00f      	b.n	80063b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006394:	4b20      	ldr	r3, [pc, #128]	; (8006418 <UART_SetConfig+0x268>)
 8006396:	61bb      	str	r3, [r7, #24]
        break;
 8006398:	e00c      	b.n	80063b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800639a:	f7ff f9c7 	bl	800572c <HAL_RCC_GetSysClockFreq>
 800639e:	61b8      	str	r0, [r7, #24]
        break;
 80063a0:	e008      	b.n	80063b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a6:	61bb      	str	r3, [r7, #24]
        break;
 80063a8:	e004      	b.n	80063b4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	77bb      	strb	r3, [r7, #30]
        break;
 80063b2:	bf00      	nop
    }

    if (pclk != 0U)
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d018      	beq.n	80063ec <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	085a      	lsrs	r2, r3, #1
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	441a      	add	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b0f      	cmp	r3, #15
 80063d2:	d909      	bls.n	80063e8 <UART_SetConfig+0x238>
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063da:	d205      	bcs.n	80063e8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	b29a      	uxth	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60da      	str	r2, [r3, #12]
 80063e6:	e001      	b.n	80063ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80063f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	efff69f3 	.word	0xefff69f3
 8006408:	40013800 	.word	0x40013800
 800640c:	40021000 	.word	0x40021000
 8006410:	40004400 	.word	0x40004400
 8006414:	40004800 	.word	0x40004800
 8006418:	007a1200 	.word	0x007a1200

0800641c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01a      	beq.n	8006532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800651a:	d10a      	bne.n	8006532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	605a      	str	r2, [r3, #4]
  }
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b098      	sub	sp, #96	; 0x60
 8006564:	af02      	add	r7, sp, #8
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006570:	f7fd fc18 	bl	8003da4 <HAL_GetTick>
 8006574:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b08      	cmp	r3, #8
 8006582:	d12e      	bne.n	80065e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800658c:	2200      	movs	r2, #0
 800658e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f88c 	bl	80066b0 <UART_WaitOnFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d021      	beq.n	80065e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b2:	653b      	str	r3, [r7, #80]	; 0x50
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065bc:	647b      	str	r3, [r7, #68]	; 0x44
 80065be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e6      	bne.n	800659e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e062      	b.n	80066a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d149      	bne.n	8006684 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f8:	2200      	movs	r2, #0
 80065fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f856 	bl	80066b0 <UART_WaitOnFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d03c      	beq.n	8006684 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	623b      	str	r3, [r7, #32]
   return(result);
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800661e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006628:	633b      	str	r3, [r7, #48]	; 0x30
 800662a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800662e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e6      	bne.n	800660a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	60fb      	str	r3, [r7, #12]
   return(result);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	64bb      	str	r3, [r7, #72]	; 0x48
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800665c:	61fa      	str	r2, [r7, #28]
 800665e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	69b9      	ldr	r1, [r7, #24]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	617b      	str	r3, [r7, #20]
   return(result);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e5      	bne.n	800663c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e011      	b.n	80066a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3758      	adds	r7, #88	; 0x58
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	4613      	mov	r3, r2
 80066be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c0:	e049      	b.n	8006756 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066c8:	d045      	beq.n	8006756 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ca:	f7fd fb6b 	bl	8003da4 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d302      	bcc.n	80066e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e048      	b.n	8006776 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d031      	beq.n	8006756 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d110      	bne.n	8006722 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2208      	movs	r2, #8
 8006706:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 f838 	bl	800677e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2208      	movs	r2, #8
 8006712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e029      	b.n	8006776 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800672c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006730:	d111      	bne.n	8006756 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800673a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f81e 	bl	800677e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e00f      	b.n	8006776 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4013      	ands	r3, r2
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	429a      	cmp	r2, r3
 8006764:	bf0c      	ite	eq
 8006766:	2301      	moveq	r3, #1
 8006768:	2300      	movne	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	429a      	cmp	r2, r3
 8006772:	d0a6      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800677e:	b480      	push	{r7}
 8006780:	b095      	sub	sp, #84	; 0x54
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800679a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	461a      	mov	r2, r3
 80067a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a4:	643b      	str	r3, [r7, #64]	; 0x40
 80067a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e6      	bne.n	8006786 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3308      	adds	r3, #8
 80067be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f023 0301 	bic.w	r3, r3, #1
 80067ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3308      	adds	r3, #8
 80067d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e5      	bne.n	80067b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d118      	bne.n	8006826 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	60bb      	str	r3, [r7, #8]
   return(result);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f023 0310 	bic.w	r3, r3, #16
 8006808:	647b      	str	r3, [r7, #68]	; 0x44
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006812:	61bb      	str	r3, [r7, #24]
 8006814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6979      	ldr	r1, [r7, #20]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	613b      	str	r3, [r7, #16]
   return(result);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e6      	bne.n	80067f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	669a      	str	r2, [r3, #104]	; 0x68
}
 800683a:	bf00      	nop
 800683c:	3754      	adds	r7, #84	; 0x54
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <__errno>:
 8006848:	4b01      	ldr	r3, [pc, #4]	; (8006850 <__errno+0x8>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	2000000c 	.word	0x2000000c

08006854 <__libc_init_array>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	4d0d      	ldr	r5, [pc, #52]	; (800688c <__libc_init_array+0x38>)
 8006858:	4c0d      	ldr	r4, [pc, #52]	; (8006890 <__libc_init_array+0x3c>)
 800685a:	1b64      	subs	r4, r4, r5
 800685c:	10a4      	asrs	r4, r4, #2
 800685e:	2600      	movs	r6, #0
 8006860:	42a6      	cmp	r6, r4
 8006862:	d109      	bne.n	8006878 <__libc_init_array+0x24>
 8006864:	4d0b      	ldr	r5, [pc, #44]	; (8006894 <__libc_init_array+0x40>)
 8006866:	4c0c      	ldr	r4, [pc, #48]	; (8006898 <__libc_init_array+0x44>)
 8006868:	f001 f848 	bl	80078fc <_init>
 800686c:	1b64      	subs	r4, r4, r5
 800686e:	10a4      	asrs	r4, r4, #2
 8006870:	2600      	movs	r6, #0
 8006872:	42a6      	cmp	r6, r4
 8006874:	d105      	bne.n	8006882 <__libc_init_array+0x2e>
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	f855 3b04 	ldr.w	r3, [r5], #4
 800687c:	4798      	blx	r3
 800687e:	3601      	adds	r6, #1
 8006880:	e7ee      	b.n	8006860 <__libc_init_array+0xc>
 8006882:	f855 3b04 	ldr.w	r3, [r5], #4
 8006886:	4798      	blx	r3
 8006888:	3601      	adds	r6, #1
 800688a:	e7f2      	b.n	8006872 <__libc_init_array+0x1e>
 800688c:	08007b90 	.word	0x08007b90
 8006890:	08007b90 	.word	0x08007b90
 8006894:	08007b90 	.word	0x08007b90
 8006898:	08007b94 	.word	0x08007b94

0800689c <memset>:
 800689c:	4402      	add	r2, r0
 800689e:	4603      	mov	r3, r0
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d100      	bne.n	80068a6 <memset+0xa>
 80068a4:	4770      	bx	lr
 80068a6:	f803 1b01 	strb.w	r1, [r3], #1
 80068aa:	e7f9      	b.n	80068a0 <memset+0x4>

080068ac <srand>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <srand+0x44>)
 80068b0:	681d      	ldr	r5, [r3, #0]
 80068b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80068b4:	4604      	mov	r4, r0
 80068b6:	b9b3      	cbnz	r3, 80068e6 <srand+0x3a>
 80068b8:	2018      	movs	r0, #24
 80068ba:	f000 f855 	bl	8006968 <malloc>
 80068be:	4602      	mov	r2, r0
 80068c0:	63a8      	str	r0, [r5, #56]	; 0x38
 80068c2:	b920      	cbnz	r0, 80068ce <srand+0x22>
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <srand+0x48>)
 80068c6:	480c      	ldr	r0, [pc, #48]	; (80068f8 <srand+0x4c>)
 80068c8:	2142      	movs	r1, #66	; 0x42
 80068ca:	f000 f81d 	bl	8006908 <__assert_func>
 80068ce:	490b      	ldr	r1, [pc, #44]	; (80068fc <srand+0x50>)
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <srand+0x54>)
 80068d2:	e9c0 1300 	strd	r1, r3, [r0]
 80068d6:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <srand+0x58>)
 80068d8:	6083      	str	r3, [r0, #8]
 80068da:	230b      	movs	r3, #11
 80068dc:	8183      	strh	r3, [r0, #12]
 80068de:	2100      	movs	r1, #0
 80068e0:	2001      	movs	r0, #1
 80068e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80068e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80068e8:	2200      	movs	r2, #0
 80068ea:	611c      	str	r4, [r3, #16]
 80068ec:	615a      	str	r2, [r3, #20]
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	2000000c 	.word	0x2000000c
 80068f4:	08007a44 	.word	0x08007a44
 80068f8:	08007a5b 	.word	0x08007a5b
 80068fc:	abcd330e 	.word	0xabcd330e
 8006900:	e66d1234 	.word	0xe66d1234
 8006904:	0005deec 	.word	0x0005deec

08006908 <__assert_func>:
 8006908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800690a:	4614      	mov	r4, r2
 800690c:	461a      	mov	r2, r3
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <__assert_func+0x2c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4605      	mov	r5, r0
 8006914:	68d8      	ldr	r0, [r3, #12]
 8006916:	b14c      	cbz	r4, 800692c <__assert_func+0x24>
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <__assert_func+0x30>)
 800691a:	9100      	str	r1, [sp, #0]
 800691c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006920:	4906      	ldr	r1, [pc, #24]	; (800693c <__assert_func+0x34>)
 8006922:	462b      	mov	r3, r5
 8006924:	f000 f80e 	bl	8006944 <fiprintf>
 8006928:	f000 fcc4 	bl	80072b4 <abort>
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <__assert_func+0x38>)
 800692e:	461c      	mov	r4, r3
 8006930:	e7f3      	b.n	800691a <__assert_func+0x12>
 8006932:	bf00      	nop
 8006934:	2000000c 	.word	0x2000000c
 8006938:	08007ab6 	.word	0x08007ab6
 800693c:	08007ac3 	.word	0x08007ac3
 8006940:	08007af1 	.word	0x08007af1

08006944 <fiprintf>:
 8006944:	b40e      	push	{r1, r2, r3}
 8006946:	b503      	push	{r0, r1, lr}
 8006948:	4601      	mov	r1, r0
 800694a:	ab03      	add	r3, sp, #12
 800694c:	4805      	ldr	r0, [pc, #20]	; (8006964 <fiprintf+0x20>)
 800694e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006952:	6800      	ldr	r0, [r0, #0]
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	f000 f919 	bl	8006b8c <_vfiprintf_r>
 800695a:	b002      	add	sp, #8
 800695c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006960:	b003      	add	sp, #12
 8006962:	4770      	bx	lr
 8006964:	2000000c 	.word	0x2000000c

08006968 <malloc>:
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <malloc+0xc>)
 800696a:	4601      	mov	r1, r0
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	f000 b86f 	b.w	8006a50 <_malloc_r>
 8006972:	bf00      	nop
 8006974:	2000000c 	.word	0x2000000c

08006978 <_free_r>:
 8006978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800697a:	2900      	cmp	r1, #0
 800697c:	d044      	beq.n	8006a08 <_free_r+0x90>
 800697e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006982:	9001      	str	r0, [sp, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f1a1 0404 	sub.w	r4, r1, #4
 800698a:	bfb8      	it	lt
 800698c:	18e4      	addlt	r4, r4, r3
 800698e:	f000 feb9 	bl	8007704 <__malloc_lock>
 8006992:	4a1e      	ldr	r2, [pc, #120]	; (8006a0c <_free_r+0x94>)
 8006994:	9801      	ldr	r0, [sp, #4]
 8006996:	6813      	ldr	r3, [r2, #0]
 8006998:	b933      	cbnz	r3, 80069a8 <_free_r+0x30>
 800699a:	6063      	str	r3, [r4, #4]
 800699c:	6014      	str	r4, [r2, #0]
 800699e:	b003      	add	sp, #12
 80069a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069a4:	f000 beb4 	b.w	8007710 <__malloc_unlock>
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	d908      	bls.n	80069be <_free_r+0x46>
 80069ac:	6825      	ldr	r5, [r4, #0]
 80069ae:	1961      	adds	r1, r4, r5
 80069b0:	428b      	cmp	r3, r1
 80069b2:	bf01      	itttt	eq
 80069b4:	6819      	ldreq	r1, [r3, #0]
 80069b6:	685b      	ldreq	r3, [r3, #4]
 80069b8:	1949      	addeq	r1, r1, r5
 80069ba:	6021      	streq	r1, [r4, #0]
 80069bc:	e7ed      	b.n	800699a <_free_r+0x22>
 80069be:	461a      	mov	r2, r3
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	b10b      	cbz	r3, 80069c8 <_free_r+0x50>
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	d9fa      	bls.n	80069be <_free_r+0x46>
 80069c8:	6811      	ldr	r1, [r2, #0]
 80069ca:	1855      	adds	r5, r2, r1
 80069cc:	42a5      	cmp	r5, r4
 80069ce:	d10b      	bne.n	80069e8 <_free_r+0x70>
 80069d0:	6824      	ldr	r4, [r4, #0]
 80069d2:	4421      	add	r1, r4
 80069d4:	1854      	adds	r4, r2, r1
 80069d6:	42a3      	cmp	r3, r4
 80069d8:	6011      	str	r1, [r2, #0]
 80069da:	d1e0      	bne.n	800699e <_free_r+0x26>
 80069dc:	681c      	ldr	r4, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	6053      	str	r3, [r2, #4]
 80069e2:	4421      	add	r1, r4
 80069e4:	6011      	str	r1, [r2, #0]
 80069e6:	e7da      	b.n	800699e <_free_r+0x26>
 80069e8:	d902      	bls.n	80069f0 <_free_r+0x78>
 80069ea:	230c      	movs	r3, #12
 80069ec:	6003      	str	r3, [r0, #0]
 80069ee:	e7d6      	b.n	800699e <_free_r+0x26>
 80069f0:	6825      	ldr	r5, [r4, #0]
 80069f2:	1961      	adds	r1, r4, r5
 80069f4:	428b      	cmp	r3, r1
 80069f6:	bf04      	itt	eq
 80069f8:	6819      	ldreq	r1, [r3, #0]
 80069fa:	685b      	ldreq	r3, [r3, #4]
 80069fc:	6063      	str	r3, [r4, #4]
 80069fe:	bf04      	itt	eq
 8006a00:	1949      	addeq	r1, r1, r5
 8006a02:	6021      	streq	r1, [r4, #0]
 8006a04:	6054      	str	r4, [r2, #4]
 8006a06:	e7ca      	b.n	800699e <_free_r+0x26>
 8006a08:	b003      	add	sp, #12
 8006a0a:	bd30      	pop	{r4, r5, pc}
 8006a0c:	20002894 	.word	0x20002894

08006a10 <sbrk_aligned>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	4e0e      	ldr	r6, [pc, #56]	; (8006a4c <sbrk_aligned+0x3c>)
 8006a14:	460c      	mov	r4, r1
 8006a16:	6831      	ldr	r1, [r6, #0]
 8006a18:	4605      	mov	r5, r0
 8006a1a:	b911      	cbnz	r1, 8006a22 <sbrk_aligned+0x12>
 8006a1c:	f000 fb7a 	bl	8007114 <_sbrk_r>
 8006a20:	6030      	str	r0, [r6, #0]
 8006a22:	4621      	mov	r1, r4
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 fb75 	bl	8007114 <_sbrk_r>
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	d00a      	beq.n	8006a44 <sbrk_aligned+0x34>
 8006a2e:	1cc4      	adds	r4, r0, #3
 8006a30:	f024 0403 	bic.w	r4, r4, #3
 8006a34:	42a0      	cmp	r0, r4
 8006a36:	d007      	beq.n	8006a48 <sbrk_aligned+0x38>
 8006a38:	1a21      	subs	r1, r4, r0
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 fb6a 	bl	8007114 <_sbrk_r>
 8006a40:	3001      	adds	r0, #1
 8006a42:	d101      	bne.n	8006a48 <sbrk_aligned+0x38>
 8006a44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a48:	4620      	mov	r0, r4
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	20002898 	.word	0x20002898

08006a50 <_malloc_r>:
 8006a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a54:	1ccd      	adds	r5, r1, #3
 8006a56:	f025 0503 	bic.w	r5, r5, #3
 8006a5a:	3508      	adds	r5, #8
 8006a5c:	2d0c      	cmp	r5, #12
 8006a5e:	bf38      	it	cc
 8006a60:	250c      	movcc	r5, #12
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	4607      	mov	r7, r0
 8006a66:	db01      	blt.n	8006a6c <_malloc_r+0x1c>
 8006a68:	42a9      	cmp	r1, r5
 8006a6a:	d905      	bls.n	8006a78 <_malloc_r+0x28>
 8006a6c:	230c      	movs	r3, #12
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	2600      	movs	r6, #0
 8006a72:	4630      	mov	r0, r6
 8006a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a78:	4e2e      	ldr	r6, [pc, #184]	; (8006b34 <_malloc_r+0xe4>)
 8006a7a:	f000 fe43 	bl	8007704 <__malloc_lock>
 8006a7e:	6833      	ldr	r3, [r6, #0]
 8006a80:	461c      	mov	r4, r3
 8006a82:	bb34      	cbnz	r4, 8006ad2 <_malloc_r+0x82>
 8006a84:	4629      	mov	r1, r5
 8006a86:	4638      	mov	r0, r7
 8006a88:	f7ff ffc2 	bl	8006a10 <sbrk_aligned>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	4604      	mov	r4, r0
 8006a90:	d14d      	bne.n	8006b2e <_malloc_r+0xde>
 8006a92:	6834      	ldr	r4, [r6, #0]
 8006a94:	4626      	mov	r6, r4
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	d140      	bne.n	8006b1c <_malloc_r+0xcc>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	eb04 0803 	add.w	r8, r4, r3
 8006aa4:	f000 fb36 	bl	8007114 <_sbrk_r>
 8006aa8:	4580      	cmp	r8, r0
 8006aaa:	d13a      	bne.n	8006b22 <_malloc_r+0xd2>
 8006aac:	6821      	ldr	r1, [r4, #0]
 8006aae:	3503      	adds	r5, #3
 8006ab0:	1a6d      	subs	r5, r5, r1
 8006ab2:	f025 0503 	bic.w	r5, r5, #3
 8006ab6:	3508      	adds	r5, #8
 8006ab8:	2d0c      	cmp	r5, #12
 8006aba:	bf38      	it	cc
 8006abc:	250c      	movcc	r5, #12
 8006abe:	4629      	mov	r1, r5
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	f7ff ffa5 	bl	8006a10 <sbrk_aligned>
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d02b      	beq.n	8006b22 <_malloc_r+0xd2>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	442b      	add	r3, r5
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	e00e      	b.n	8006af0 <_malloc_r+0xa0>
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	1b52      	subs	r2, r2, r5
 8006ad6:	d41e      	bmi.n	8006b16 <_malloc_r+0xc6>
 8006ad8:	2a0b      	cmp	r2, #11
 8006ada:	d916      	bls.n	8006b0a <_malloc_r+0xba>
 8006adc:	1961      	adds	r1, r4, r5
 8006ade:	42a3      	cmp	r3, r4
 8006ae0:	6025      	str	r5, [r4, #0]
 8006ae2:	bf18      	it	ne
 8006ae4:	6059      	strne	r1, [r3, #4]
 8006ae6:	6863      	ldr	r3, [r4, #4]
 8006ae8:	bf08      	it	eq
 8006aea:	6031      	streq	r1, [r6, #0]
 8006aec:	5162      	str	r2, [r4, r5]
 8006aee:	604b      	str	r3, [r1, #4]
 8006af0:	4638      	mov	r0, r7
 8006af2:	f104 060b 	add.w	r6, r4, #11
 8006af6:	f000 fe0b 	bl	8007710 <__malloc_unlock>
 8006afa:	f026 0607 	bic.w	r6, r6, #7
 8006afe:	1d23      	adds	r3, r4, #4
 8006b00:	1af2      	subs	r2, r6, r3
 8006b02:	d0b6      	beq.n	8006a72 <_malloc_r+0x22>
 8006b04:	1b9b      	subs	r3, r3, r6
 8006b06:	50a3      	str	r3, [r4, r2]
 8006b08:	e7b3      	b.n	8006a72 <_malloc_r+0x22>
 8006b0a:	6862      	ldr	r2, [r4, #4]
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	bf0c      	ite	eq
 8006b10:	6032      	streq	r2, [r6, #0]
 8006b12:	605a      	strne	r2, [r3, #4]
 8006b14:	e7ec      	b.n	8006af0 <_malloc_r+0xa0>
 8006b16:	4623      	mov	r3, r4
 8006b18:	6864      	ldr	r4, [r4, #4]
 8006b1a:	e7b2      	b.n	8006a82 <_malloc_r+0x32>
 8006b1c:	4634      	mov	r4, r6
 8006b1e:	6876      	ldr	r6, [r6, #4]
 8006b20:	e7b9      	b.n	8006a96 <_malloc_r+0x46>
 8006b22:	230c      	movs	r3, #12
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4638      	mov	r0, r7
 8006b28:	f000 fdf2 	bl	8007710 <__malloc_unlock>
 8006b2c:	e7a1      	b.n	8006a72 <_malloc_r+0x22>
 8006b2e:	6025      	str	r5, [r4, #0]
 8006b30:	e7de      	b.n	8006af0 <_malloc_r+0xa0>
 8006b32:	bf00      	nop
 8006b34:	20002894 	.word	0x20002894

08006b38 <__sfputc_r>:
 8006b38:	6893      	ldr	r3, [r2, #8]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	b410      	push	{r4}
 8006b40:	6093      	str	r3, [r2, #8]
 8006b42:	da08      	bge.n	8006b56 <__sfputc_r+0x1e>
 8006b44:	6994      	ldr	r4, [r2, #24]
 8006b46:	42a3      	cmp	r3, r4
 8006b48:	db01      	blt.n	8006b4e <__sfputc_r+0x16>
 8006b4a:	290a      	cmp	r1, #10
 8006b4c:	d103      	bne.n	8006b56 <__sfputc_r+0x1e>
 8006b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b52:	f000 baef 	b.w	8007134 <__swbuf_r>
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	1c58      	adds	r0, r3, #1
 8006b5a:	6010      	str	r0, [r2, #0]
 8006b5c:	7019      	strb	r1, [r3, #0]
 8006b5e:	4608      	mov	r0, r1
 8006b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <__sfputs_r>:
 8006b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b68:	4606      	mov	r6, r0
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	18d5      	adds	r5, r2, r3
 8006b70:	42ac      	cmp	r4, r5
 8006b72:	d101      	bne.n	8006b78 <__sfputs_r+0x12>
 8006b74:	2000      	movs	r0, #0
 8006b76:	e007      	b.n	8006b88 <__sfputs_r+0x22>
 8006b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7c:	463a      	mov	r2, r7
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7ff ffda 	bl	8006b38 <__sfputc_r>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d1f3      	bne.n	8006b70 <__sfputs_r+0xa>
 8006b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b8c <_vfiprintf_r>:
 8006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	460d      	mov	r5, r1
 8006b92:	b09d      	sub	sp, #116	; 0x74
 8006b94:	4614      	mov	r4, r2
 8006b96:	4698      	mov	r8, r3
 8006b98:	4606      	mov	r6, r0
 8006b9a:	b118      	cbz	r0, 8006ba4 <_vfiprintf_r+0x18>
 8006b9c:	6983      	ldr	r3, [r0, #24]
 8006b9e:	b90b      	cbnz	r3, 8006ba4 <_vfiprintf_r+0x18>
 8006ba0:	f000 fcaa 	bl	80074f8 <__sinit>
 8006ba4:	4b89      	ldr	r3, [pc, #548]	; (8006dcc <_vfiprintf_r+0x240>)
 8006ba6:	429d      	cmp	r5, r3
 8006ba8:	d11b      	bne.n	8006be2 <_vfiprintf_r+0x56>
 8006baa:	6875      	ldr	r5, [r6, #4]
 8006bac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bae:	07d9      	lsls	r1, r3, #31
 8006bb0:	d405      	bmi.n	8006bbe <_vfiprintf_r+0x32>
 8006bb2:	89ab      	ldrh	r3, [r5, #12]
 8006bb4:	059a      	lsls	r2, r3, #22
 8006bb6:	d402      	bmi.n	8006bbe <_vfiprintf_r+0x32>
 8006bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bba:	f000 fd3b 	bl	8007634 <__retarget_lock_acquire_recursive>
 8006bbe:	89ab      	ldrh	r3, [r5, #12]
 8006bc0:	071b      	lsls	r3, r3, #28
 8006bc2:	d501      	bpl.n	8006bc8 <_vfiprintf_r+0x3c>
 8006bc4:	692b      	ldr	r3, [r5, #16]
 8006bc6:	b9eb      	cbnz	r3, 8006c04 <_vfiprintf_r+0x78>
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f000 fb04 	bl	80071d8 <__swsetup_r>
 8006bd0:	b1c0      	cbz	r0, 8006c04 <_vfiprintf_r+0x78>
 8006bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bd4:	07dc      	lsls	r4, r3, #31
 8006bd6:	d50e      	bpl.n	8006bf6 <_vfiprintf_r+0x6a>
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bdc:	b01d      	add	sp, #116	; 0x74
 8006bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be2:	4b7b      	ldr	r3, [pc, #492]	; (8006dd0 <_vfiprintf_r+0x244>)
 8006be4:	429d      	cmp	r5, r3
 8006be6:	d101      	bne.n	8006bec <_vfiprintf_r+0x60>
 8006be8:	68b5      	ldr	r5, [r6, #8]
 8006bea:	e7df      	b.n	8006bac <_vfiprintf_r+0x20>
 8006bec:	4b79      	ldr	r3, [pc, #484]	; (8006dd4 <_vfiprintf_r+0x248>)
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	bf08      	it	eq
 8006bf2:	68f5      	ldreq	r5, [r6, #12]
 8006bf4:	e7da      	b.n	8006bac <_vfiprintf_r+0x20>
 8006bf6:	89ab      	ldrh	r3, [r5, #12]
 8006bf8:	0598      	lsls	r0, r3, #22
 8006bfa:	d4ed      	bmi.n	8006bd8 <_vfiprintf_r+0x4c>
 8006bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bfe:	f000 fd1a 	bl	8007636 <__retarget_lock_release_recursive>
 8006c02:	e7e9      	b.n	8006bd8 <_vfiprintf_r+0x4c>
 8006c04:	2300      	movs	r3, #0
 8006c06:	9309      	str	r3, [sp, #36]	; 0x24
 8006c08:	2320      	movs	r3, #32
 8006c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c12:	2330      	movs	r3, #48	; 0x30
 8006c14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006dd8 <_vfiprintf_r+0x24c>
 8006c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1c:	f04f 0901 	mov.w	r9, #1
 8006c20:	4623      	mov	r3, r4
 8006c22:	469a      	mov	sl, r3
 8006c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c28:	b10a      	cbz	r2, 8006c2e <_vfiprintf_r+0xa2>
 8006c2a:	2a25      	cmp	r2, #37	; 0x25
 8006c2c:	d1f9      	bne.n	8006c22 <_vfiprintf_r+0x96>
 8006c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c32:	d00b      	beq.n	8006c4c <_vfiprintf_r+0xc0>
 8006c34:	465b      	mov	r3, fp
 8006c36:	4622      	mov	r2, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff ff93 	bl	8006b66 <__sfputs_r>
 8006c40:	3001      	adds	r0, #1
 8006c42:	f000 80aa 	beq.w	8006d9a <_vfiprintf_r+0x20e>
 8006c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c48:	445a      	add	r2, fp
 8006c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80a2 	beq.w	8006d9a <_vfiprintf_r+0x20e>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c60:	f10a 0a01 	add.w	sl, sl, #1
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6e:	4654      	mov	r4, sl
 8006c70:	2205      	movs	r2, #5
 8006c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c76:	4858      	ldr	r0, [pc, #352]	; (8006dd8 <_vfiprintf_r+0x24c>)
 8006c78:	f7f9 fab2 	bl	80001e0 <memchr>
 8006c7c:	9a04      	ldr	r2, [sp, #16]
 8006c7e:	b9d8      	cbnz	r0, 8006cb8 <_vfiprintf_r+0x12c>
 8006c80:	06d1      	lsls	r1, r2, #27
 8006c82:	bf44      	itt	mi
 8006c84:	2320      	movmi	r3, #32
 8006c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c8a:	0713      	lsls	r3, r2, #28
 8006c8c:	bf44      	itt	mi
 8006c8e:	232b      	movmi	r3, #43	; 0x2b
 8006c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c94:	f89a 3000 	ldrb.w	r3, [sl]
 8006c98:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9a:	d015      	beq.n	8006cc8 <_vfiprintf_r+0x13c>
 8006c9c:	9a07      	ldr	r2, [sp, #28]
 8006c9e:	4654      	mov	r4, sl
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f04f 0c0a 	mov.w	ip, #10
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cac:	3b30      	subs	r3, #48	; 0x30
 8006cae:	2b09      	cmp	r3, #9
 8006cb0:	d94e      	bls.n	8006d50 <_vfiprintf_r+0x1c4>
 8006cb2:	b1b0      	cbz	r0, 8006ce2 <_vfiprintf_r+0x156>
 8006cb4:	9207      	str	r2, [sp, #28]
 8006cb6:	e014      	b.n	8006ce2 <_vfiprintf_r+0x156>
 8006cb8:	eba0 0308 	sub.w	r3, r0, r8
 8006cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	46a2      	mov	sl, r4
 8006cc6:	e7d2      	b.n	8006c6e <_vfiprintf_r+0xe2>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	1d19      	adds	r1, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	9103      	str	r1, [sp, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bfbb      	ittet	lt
 8006cd4:	425b      	neglt	r3, r3
 8006cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cda:	9307      	strge	r3, [sp, #28]
 8006cdc:	9307      	strlt	r3, [sp, #28]
 8006cde:	bfb8      	it	lt
 8006ce0:	9204      	strlt	r2, [sp, #16]
 8006ce2:	7823      	ldrb	r3, [r4, #0]
 8006ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce6:	d10c      	bne.n	8006d02 <_vfiprintf_r+0x176>
 8006ce8:	7863      	ldrb	r3, [r4, #1]
 8006cea:	2b2a      	cmp	r3, #42	; 0x2a
 8006cec:	d135      	bne.n	8006d5a <_vfiprintf_r+0x1ce>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	9203      	str	r2, [sp, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfb8      	it	lt
 8006cfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cfe:	3402      	adds	r4, #2
 8006d00:	9305      	str	r3, [sp, #20]
 8006d02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006de8 <_vfiprintf_r+0x25c>
 8006d06:	7821      	ldrb	r1, [r4, #0]
 8006d08:	2203      	movs	r2, #3
 8006d0a:	4650      	mov	r0, sl
 8006d0c:	f7f9 fa68 	bl	80001e0 <memchr>
 8006d10:	b140      	cbz	r0, 8006d24 <_vfiprintf_r+0x198>
 8006d12:	2340      	movs	r3, #64	; 0x40
 8006d14:	eba0 000a 	sub.w	r0, r0, sl
 8006d18:	fa03 f000 	lsl.w	r0, r3, r0
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	4303      	orrs	r3, r0
 8006d20:	3401      	adds	r4, #1
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d28:	482c      	ldr	r0, [pc, #176]	; (8006ddc <_vfiprintf_r+0x250>)
 8006d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d2e:	2206      	movs	r2, #6
 8006d30:	f7f9 fa56 	bl	80001e0 <memchr>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d03f      	beq.n	8006db8 <_vfiprintf_r+0x22c>
 8006d38:	4b29      	ldr	r3, [pc, #164]	; (8006de0 <_vfiprintf_r+0x254>)
 8006d3a:	bb1b      	cbnz	r3, 8006d84 <_vfiprintf_r+0x1f8>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	3307      	adds	r3, #7
 8006d40:	f023 0307 	bic.w	r3, r3, #7
 8006d44:	3308      	adds	r3, #8
 8006d46:	9303      	str	r3, [sp, #12]
 8006d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4a:	443b      	add	r3, r7
 8006d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4e:	e767      	b.n	8006c20 <_vfiprintf_r+0x94>
 8006d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d54:	460c      	mov	r4, r1
 8006d56:	2001      	movs	r0, #1
 8006d58:	e7a5      	b.n	8006ca6 <_vfiprintf_r+0x11a>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	3401      	adds	r4, #1
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	4619      	mov	r1, r3
 8006d62:	f04f 0c0a 	mov.w	ip, #10
 8006d66:	4620      	mov	r0, r4
 8006d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6c:	3a30      	subs	r2, #48	; 0x30
 8006d6e:	2a09      	cmp	r2, #9
 8006d70:	d903      	bls.n	8006d7a <_vfiprintf_r+0x1ee>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0c5      	beq.n	8006d02 <_vfiprintf_r+0x176>
 8006d76:	9105      	str	r1, [sp, #20]
 8006d78:	e7c3      	b.n	8006d02 <_vfiprintf_r+0x176>
 8006d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7e:	4604      	mov	r4, r0
 8006d80:	2301      	movs	r3, #1
 8006d82:	e7f0      	b.n	8006d66 <_vfiprintf_r+0x1da>
 8006d84:	ab03      	add	r3, sp, #12
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	462a      	mov	r2, r5
 8006d8a:	4b16      	ldr	r3, [pc, #88]	; (8006de4 <_vfiprintf_r+0x258>)
 8006d8c:	a904      	add	r1, sp, #16
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f3af 8000 	nop.w
 8006d94:	4607      	mov	r7, r0
 8006d96:	1c78      	adds	r0, r7, #1
 8006d98:	d1d6      	bne.n	8006d48 <_vfiprintf_r+0x1bc>
 8006d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d9c:	07d9      	lsls	r1, r3, #31
 8006d9e:	d405      	bmi.n	8006dac <_vfiprintf_r+0x220>
 8006da0:	89ab      	ldrh	r3, [r5, #12]
 8006da2:	059a      	lsls	r2, r3, #22
 8006da4:	d402      	bmi.n	8006dac <_vfiprintf_r+0x220>
 8006da6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da8:	f000 fc45 	bl	8007636 <__retarget_lock_release_recursive>
 8006dac:	89ab      	ldrh	r3, [r5, #12]
 8006dae:	065b      	lsls	r3, r3, #25
 8006db0:	f53f af12 	bmi.w	8006bd8 <_vfiprintf_r+0x4c>
 8006db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006db6:	e711      	b.n	8006bdc <_vfiprintf_r+0x50>
 8006db8:	ab03      	add	r3, sp, #12
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	462a      	mov	r2, r5
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <_vfiprintf_r+0x258>)
 8006dc0:	a904      	add	r1, sp, #16
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f000 f880 	bl	8006ec8 <_printf_i>
 8006dc8:	e7e4      	b.n	8006d94 <_vfiprintf_r+0x208>
 8006dca:	bf00      	nop
 8006dcc:	08007b48 	.word	0x08007b48
 8006dd0:	08007b68 	.word	0x08007b68
 8006dd4:	08007b28 	.word	0x08007b28
 8006dd8:	08007af2 	.word	0x08007af2
 8006ddc:	08007afc 	.word	0x08007afc
 8006de0:	00000000 	.word	0x00000000
 8006de4:	08006b67 	.word	0x08006b67
 8006de8:	08007af8 	.word	0x08007af8

08006dec <_printf_common>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	4616      	mov	r6, r2
 8006df2:	4699      	mov	r9, r3
 8006df4:	688a      	ldr	r2, [r1, #8]
 8006df6:	690b      	ldr	r3, [r1, #16]
 8006df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bfb8      	it	lt
 8006e00:	4613      	movlt	r3, r2
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e08:	4607      	mov	r7, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b10a      	cbz	r2, 8006e12 <_printf_common+0x26>
 8006e0e:	3301      	adds	r3, #1
 8006e10:	6033      	str	r3, [r6, #0]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0699      	lsls	r1, r3, #26
 8006e16:	bf42      	ittt	mi
 8006e18:	6833      	ldrmi	r3, [r6, #0]
 8006e1a:	3302      	addmi	r3, #2
 8006e1c:	6033      	strmi	r3, [r6, #0]
 8006e1e:	6825      	ldr	r5, [r4, #0]
 8006e20:	f015 0506 	ands.w	r5, r5, #6
 8006e24:	d106      	bne.n	8006e34 <_printf_common+0x48>
 8006e26:	f104 0a19 	add.w	sl, r4, #25
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	6832      	ldr	r2, [r6, #0]
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	42ab      	cmp	r3, r5
 8006e32:	dc26      	bgt.n	8006e82 <_printf_common+0x96>
 8006e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e38:	1e13      	subs	r3, r2, #0
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	bf18      	it	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	0692      	lsls	r2, r2, #26
 8006e42:	d42b      	bmi.n	8006e9c <_printf_common+0xb0>
 8006e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e48:	4649      	mov	r1, r9
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	47c0      	blx	r8
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d01e      	beq.n	8006e90 <_printf_common+0xa4>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	68e5      	ldr	r5, [r4, #12]
 8006e56:	6832      	ldr	r2, [r6, #0]
 8006e58:	f003 0306 	and.w	r3, r3, #6
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	bf08      	it	eq
 8006e60:	1aad      	subeq	r5, r5, r2
 8006e62:	68a3      	ldr	r3, [r4, #8]
 8006e64:	6922      	ldr	r2, [r4, #16]
 8006e66:	bf0c      	ite	eq
 8006e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e6c:	2500      	movne	r5, #0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	bfc4      	itt	gt
 8006e72:	1a9b      	subgt	r3, r3, r2
 8006e74:	18ed      	addgt	r5, r5, r3
 8006e76:	2600      	movs	r6, #0
 8006e78:	341a      	adds	r4, #26
 8006e7a:	42b5      	cmp	r5, r6
 8006e7c:	d11a      	bne.n	8006eb4 <_printf_common+0xc8>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e008      	b.n	8006e94 <_printf_common+0xa8>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4652      	mov	r2, sl
 8006e86:	4649      	mov	r1, r9
 8006e88:	4638      	mov	r0, r7
 8006e8a:	47c0      	blx	r8
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d103      	bne.n	8006e98 <_printf_common+0xac>
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e98:	3501      	adds	r5, #1
 8006e9a:	e7c6      	b.n	8006e2a <_printf_common+0x3e>
 8006e9c:	18e1      	adds	r1, r4, r3
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	2030      	movs	r0, #48	; 0x30
 8006ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ea6:	4422      	add	r2, r4
 8006ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	e7c7      	b.n	8006e44 <_printf_common+0x58>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c0      	blx	r8
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d0e6      	beq.n	8006e90 <_printf_common+0xa4>
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7d9      	b.n	8006e7a <_printf_common+0x8e>
	...

08006ec8 <_printf_i>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	7e0f      	ldrb	r7, [r1, #24]
 8006ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ed0:	2f78      	cmp	r7, #120	; 0x78
 8006ed2:	4691      	mov	r9, r2
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	469a      	mov	sl, r3
 8006eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ede:	d807      	bhi.n	8006ef0 <_printf_i+0x28>
 8006ee0:	2f62      	cmp	r7, #98	; 0x62
 8006ee2:	d80a      	bhi.n	8006efa <_printf_i+0x32>
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	f000 80d8 	beq.w	800709a <_printf_i+0x1d2>
 8006eea:	2f58      	cmp	r7, #88	; 0x58
 8006eec:	f000 80a3 	beq.w	8007036 <_printf_i+0x16e>
 8006ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ef8:	e03a      	b.n	8006f70 <_printf_i+0xa8>
 8006efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006efe:	2b15      	cmp	r3, #21
 8006f00:	d8f6      	bhi.n	8006ef0 <_printf_i+0x28>
 8006f02:	a101      	add	r1, pc, #4	; (adr r1, 8006f08 <_printf_i+0x40>)
 8006f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006ef1 	.word	0x08006ef1
 8006f14:	08006ef1 	.word	0x08006ef1
 8006f18:	08006ef1 	.word	0x08006ef1
 8006f1c:	08006ef1 	.word	0x08006ef1
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006ef1 	.word	0x08006ef1
 8006f28:	08006ef1 	.word	0x08006ef1
 8006f2c:	08006ef1 	.word	0x08006ef1
 8006f30:	08006ef1 	.word	0x08006ef1
 8006f34:	08007081 	.word	0x08007081
 8006f38:	08006fa5 	.word	0x08006fa5
 8006f3c:	08007063 	.word	0x08007063
 8006f40:	08006ef1 	.word	0x08006ef1
 8006f44:	08006ef1 	.word	0x08006ef1
 8006f48:	080070a3 	.word	0x080070a3
 8006f4c:	08006ef1 	.word	0x08006ef1
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006ef1 	.word	0x08006ef1
 8006f58:	08006ef1 	.word	0x08006ef1
 8006f5c:	0800706b 	.word	0x0800706b
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	602a      	str	r2, [r5, #0]
 8006f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0a3      	b.n	80070bc <_printf_i+0x1f4>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	6829      	ldr	r1, [r5, #0]
 8006f78:	0606      	lsls	r6, r0, #24
 8006f7a:	f101 0304 	add.w	r3, r1, #4
 8006f7e:	d50a      	bpl.n	8006f96 <_printf_i+0xce>
 8006f80:	680e      	ldr	r6, [r1, #0]
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	2e00      	cmp	r6, #0
 8006f86:	da03      	bge.n	8006f90 <_printf_i+0xc8>
 8006f88:	232d      	movs	r3, #45	; 0x2d
 8006f8a:	4276      	negs	r6, r6
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f90:	485e      	ldr	r0, [pc, #376]	; (800710c <_printf_i+0x244>)
 8006f92:	230a      	movs	r3, #10
 8006f94:	e019      	b.n	8006fca <_printf_i+0x102>
 8006f96:	680e      	ldr	r6, [r1, #0]
 8006f98:	602b      	str	r3, [r5, #0]
 8006f9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f9e:	bf18      	it	ne
 8006fa0:	b236      	sxthne	r6, r6
 8006fa2:	e7ef      	b.n	8006f84 <_printf_i+0xbc>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	1d19      	adds	r1, r3, #4
 8006faa:	6029      	str	r1, [r5, #0]
 8006fac:	0601      	lsls	r1, r0, #24
 8006fae:	d501      	bpl.n	8006fb4 <_printf_i+0xec>
 8006fb0:	681e      	ldr	r6, [r3, #0]
 8006fb2:	e002      	b.n	8006fba <_printf_i+0xf2>
 8006fb4:	0646      	lsls	r6, r0, #25
 8006fb6:	d5fb      	bpl.n	8006fb0 <_printf_i+0xe8>
 8006fb8:	881e      	ldrh	r6, [r3, #0]
 8006fba:	4854      	ldr	r0, [pc, #336]	; (800710c <_printf_i+0x244>)
 8006fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2308      	moveq	r3, #8
 8006fc2:	230a      	movne	r3, #10
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fca:	6865      	ldr	r5, [r4, #4]
 8006fcc:	60a5      	str	r5, [r4, #8]
 8006fce:	2d00      	cmp	r5, #0
 8006fd0:	bfa2      	ittt	ge
 8006fd2:	6821      	ldrge	r1, [r4, #0]
 8006fd4:	f021 0104 	bicge.w	r1, r1, #4
 8006fd8:	6021      	strge	r1, [r4, #0]
 8006fda:	b90e      	cbnz	r6, 8006fe0 <_printf_i+0x118>
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	d04d      	beq.n	800707c <_printf_i+0x1b4>
 8006fe0:	4615      	mov	r5, r2
 8006fe2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fe6:	fb03 6711 	mls	r7, r3, r1, r6
 8006fea:	5dc7      	ldrb	r7, [r0, r7]
 8006fec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ff0:	4637      	mov	r7, r6
 8006ff2:	42bb      	cmp	r3, r7
 8006ff4:	460e      	mov	r6, r1
 8006ff6:	d9f4      	bls.n	8006fe2 <_printf_i+0x11a>
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d10b      	bne.n	8007014 <_printf_i+0x14c>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	07de      	lsls	r6, r3, #31
 8007000:	d508      	bpl.n	8007014 <_printf_i+0x14c>
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	4299      	cmp	r1, r3
 8007008:	bfde      	ittt	le
 800700a:	2330      	movle	r3, #48	; 0x30
 800700c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007010:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007014:	1b52      	subs	r2, r2, r5
 8007016:	6122      	str	r2, [r4, #16]
 8007018:	f8cd a000 	str.w	sl, [sp]
 800701c:	464b      	mov	r3, r9
 800701e:	aa03      	add	r2, sp, #12
 8007020:	4621      	mov	r1, r4
 8007022:	4640      	mov	r0, r8
 8007024:	f7ff fee2 	bl	8006dec <_printf_common>
 8007028:	3001      	adds	r0, #1
 800702a:	d14c      	bne.n	80070c6 <_printf_i+0x1fe>
 800702c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007030:	b004      	add	sp, #16
 8007032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007036:	4835      	ldr	r0, [pc, #212]	; (800710c <_printf_i+0x244>)
 8007038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800703c:	6829      	ldr	r1, [r5, #0]
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	f851 6b04 	ldr.w	r6, [r1], #4
 8007044:	6029      	str	r1, [r5, #0]
 8007046:	061d      	lsls	r5, r3, #24
 8007048:	d514      	bpl.n	8007074 <_printf_i+0x1ac>
 800704a:	07df      	lsls	r7, r3, #31
 800704c:	bf44      	itt	mi
 800704e:	f043 0320 	orrmi.w	r3, r3, #32
 8007052:	6023      	strmi	r3, [r4, #0]
 8007054:	b91e      	cbnz	r6, 800705e <_printf_i+0x196>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f023 0320 	bic.w	r3, r3, #32
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	2310      	movs	r3, #16
 8007060:	e7b0      	b.n	8006fc4 <_printf_i+0xfc>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	f043 0320 	orr.w	r3, r3, #32
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	2378      	movs	r3, #120	; 0x78
 800706c:	4828      	ldr	r0, [pc, #160]	; (8007110 <_printf_i+0x248>)
 800706e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007072:	e7e3      	b.n	800703c <_printf_i+0x174>
 8007074:	0659      	lsls	r1, r3, #25
 8007076:	bf48      	it	mi
 8007078:	b2b6      	uxthmi	r6, r6
 800707a:	e7e6      	b.n	800704a <_printf_i+0x182>
 800707c:	4615      	mov	r5, r2
 800707e:	e7bb      	b.n	8006ff8 <_printf_i+0x130>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	6826      	ldr	r6, [r4, #0]
 8007084:	6961      	ldr	r1, [r4, #20]
 8007086:	1d18      	adds	r0, r3, #4
 8007088:	6028      	str	r0, [r5, #0]
 800708a:	0635      	lsls	r5, r6, #24
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	d501      	bpl.n	8007094 <_printf_i+0x1cc>
 8007090:	6019      	str	r1, [r3, #0]
 8007092:	e002      	b.n	800709a <_printf_i+0x1d2>
 8007094:	0670      	lsls	r0, r6, #25
 8007096:	d5fb      	bpl.n	8007090 <_printf_i+0x1c8>
 8007098:	8019      	strh	r1, [r3, #0]
 800709a:	2300      	movs	r3, #0
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	4615      	mov	r5, r2
 80070a0:	e7ba      	b.n	8007018 <_printf_i+0x150>
 80070a2:	682b      	ldr	r3, [r5, #0]
 80070a4:	1d1a      	adds	r2, r3, #4
 80070a6:	602a      	str	r2, [r5, #0]
 80070a8:	681d      	ldr	r5, [r3, #0]
 80070aa:	6862      	ldr	r2, [r4, #4]
 80070ac:	2100      	movs	r1, #0
 80070ae:	4628      	mov	r0, r5
 80070b0:	f7f9 f896 	bl	80001e0 <memchr>
 80070b4:	b108      	cbz	r0, 80070ba <_printf_i+0x1f2>
 80070b6:	1b40      	subs	r0, r0, r5
 80070b8:	6060      	str	r0, [r4, #4]
 80070ba:	6863      	ldr	r3, [r4, #4]
 80070bc:	6123      	str	r3, [r4, #16]
 80070be:	2300      	movs	r3, #0
 80070c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c4:	e7a8      	b.n	8007018 <_printf_i+0x150>
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	462a      	mov	r2, r5
 80070ca:	4649      	mov	r1, r9
 80070cc:	4640      	mov	r0, r8
 80070ce:	47d0      	blx	sl
 80070d0:	3001      	adds	r0, #1
 80070d2:	d0ab      	beq.n	800702c <_printf_i+0x164>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	079b      	lsls	r3, r3, #30
 80070d8:	d413      	bmi.n	8007102 <_printf_i+0x23a>
 80070da:	68e0      	ldr	r0, [r4, #12]
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	4298      	cmp	r0, r3
 80070e0:	bfb8      	it	lt
 80070e2:	4618      	movlt	r0, r3
 80070e4:	e7a4      	b.n	8007030 <_printf_i+0x168>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4632      	mov	r2, r6
 80070ea:	4649      	mov	r1, r9
 80070ec:	4640      	mov	r0, r8
 80070ee:	47d0      	blx	sl
 80070f0:	3001      	adds	r0, #1
 80070f2:	d09b      	beq.n	800702c <_printf_i+0x164>
 80070f4:	3501      	adds	r5, #1
 80070f6:	68e3      	ldr	r3, [r4, #12]
 80070f8:	9903      	ldr	r1, [sp, #12]
 80070fa:	1a5b      	subs	r3, r3, r1
 80070fc:	42ab      	cmp	r3, r5
 80070fe:	dcf2      	bgt.n	80070e6 <_printf_i+0x21e>
 8007100:	e7eb      	b.n	80070da <_printf_i+0x212>
 8007102:	2500      	movs	r5, #0
 8007104:	f104 0619 	add.w	r6, r4, #25
 8007108:	e7f5      	b.n	80070f6 <_printf_i+0x22e>
 800710a:	bf00      	nop
 800710c:	08007b03 	.word	0x08007b03
 8007110:	08007b14 	.word	0x08007b14

08007114 <_sbrk_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d06      	ldr	r5, [pc, #24]	; (8007130 <_sbrk_r+0x1c>)
 8007118:	2300      	movs	r3, #0
 800711a:	4604      	mov	r4, r0
 800711c:	4608      	mov	r0, r1
 800711e:	602b      	str	r3, [r5, #0]
 8007120:	f7fc fd74 	bl	8003c0c <_sbrk>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_sbrk_r+0x1a>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_sbrk_r+0x1a>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	200028a0 	.word	0x200028a0

08007134 <__swbuf_r>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	460e      	mov	r6, r1
 8007138:	4614      	mov	r4, r2
 800713a:	4605      	mov	r5, r0
 800713c:	b118      	cbz	r0, 8007146 <__swbuf_r+0x12>
 800713e:	6983      	ldr	r3, [r0, #24]
 8007140:	b90b      	cbnz	r3, 8007146 <__swbuf_r+0x12>
 8007142:	f000 f9d9 	bl	80074f8 <__sinit>
 8007146:	4b21      	ldr	r3, [pc, #132]	; (80071cc <__swbuf_r+0x98>)
 8007148:	429c      	cmp	r4, r3
 800714a:	d12b      	bne.n	80071a4 <__swbuf_r+0x70>
 800714c:	686c      	ldr	r4, [r5, #4]
 800714e:	69a3      	ldr	r3, [r4, #24]
 8007150:	60a3      	str	r3, [r4, #8]
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	071a      	lsls	r2, r3, #28
 8007156:	d52f      	bpl.n	80071b8 <__swbuf_r+0x84>
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	b36b      	cbz	r3, 80071b8 <__swbuf_r+0x84>
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	1ac0      	subs	r0, r0, r3
 8007162:	6963      	ldr	r3, [r4, #20]
 8007164:	b2f6      	uxtb	r6, r6
 8007166:	4283      	cmp	r3, r0
 8007168:	4637      	mov	r7, r6
 800716a:	dc04      	bgt.n	8007176 <__swbuf_r+0x42>
 800716c:	4621      	mov	r1, r4
 800716e:	4628      	mov	r0, r5
 8007170:	f000 f92e 	bl	80073d0 <_fflush_r>
 8007174:	bb30      	cbnz	r0, 80071c4 <__swbuf_r+0x90>
 8007176:	68a3      	ldr	r3, [r4, #8]
 8007178:	3b01      	subs	r3, #1
 800717a:	60a3      	str	r3, [r4, #8]
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	6022      	str	r2, [r4, #0]
 8007182:	701e      	strb	r6, [r3, #0]
 8007184:	6963      	ldr	r3, [r4, #20]
 8007186:	3001      	adds	r0, #1
 8007188:	4283      	cmp	r3, r0
 800718a:	d004      	beq.n	8007196 <__swbuf_r+0x62>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	07db      	lsls	r3, r3, #31
 8007190:	d506      	bpl.n	80071a0 <__swbuf_r+0x6c>
 8007192:	2e0a      	cmp	r6, #10
 8007194:	d104      	bne.n	80071a0 <__swbuf_r+0x6c>
 8007196:	4621      	mov	r1, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f000 f919 	bl	80073d0 <_fflush_r>
 800719e:	b988      	cbnz	r0, 80071c4 <__swbuf_r+0x90>
 80071a0:	4638      	mov	r0, r7
 80071a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a4:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <__swbuf_r+0x9c>)
 80071a6:	429c      	cmp	r4, r3
 80071a8:	d101      	bne.n	80071ae <__swbuf_r+0x7a>
 80071aa:	68ac      	ldr	r4, [r5, #8]
 80071ac:	e7cf      	b.n	800714e <__swbuf_r+0x1a>
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <__swbuf_r+0xa0>)
 80071b0:	429c      	cmp	r4, r3
 80071b2:	bf08      	it	eq
 80071b4:	68ec      	ldreq	r4, [r5, #12]
 80071b6:	e7ca      	b.n	800714e <__swbuf_r+0x1a>
 80071b8:	4621      	mov	r1, r4
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 f80c 	bl	80071d8 <__swsetup_r>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d0cb      	beq.n	800715c <__swbuf_r+0x28>
 80071c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071c8:	e7ea      	b.n	80071a0 <__swbuf_r+0x6c>
 80071ca:	bf00      	nop
 80071cc:	08007b48 	.word	0x08007b48
 80071d0:	08007b68 	.word	0x08007b68
 80071d4:	08007b28 	.word	0x08007b28

080071d8 <__swsetup_r>:
 80071d8:	4b32      	ldr	r3, [pc, #200]	; (80072a4 <__swsetup_r+0xcc>)
 80071da:	b570      	push	{r4, r5, r6, lr}
 80071dc:	681d      	ldr	r5, [r3, #0]
 80071de:	4606      	mov	r6, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	b125      	cbz	r5, 80071ee <__swsetup_r+0x16>
 80071e4:	69ab      	ldr	r3, [r5, #24]
 80071e6:	b913      	cbnz	r3, 80071ee <__swsetup_r+0x16>
 80071e8:	4628      	mov	r0, r5
 80071ea:	f000 f985 	bl	80074f8 <__sinit>
 80071ee:	4b2e      	ldr	r3, [pc, #184]	; (80072a8 <__swsetup_r+0xd0>)
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d10f      	bne.n	8007214 <__swsetup_r+0x3c>
 80071f4:	686c      	ldr	r4, [r5, #4]
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071fc:	0719      	lsls	r1, r3, #28
 80071fe:	d42c      	bmi.n	800725a <__swsetup_r+0x82>
 8007200:	06dd      	lsls	r5, r3, #27
 8007202:	d411      	bmi.n	8007228 <__swsetup_r+0x50>
 8007204:	2309      	movs	r3, #9
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800720c:	81a3      	strh	r3, [r4, #12]
 800720e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007212:	e03e      	b.n	8007292 <__swsetup_r+0xba>
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <__swsetup_r+0xd4>)
 8007216:	429c      	cmp	r4, r3
 8007218:	d101      	bne.n	800721e <__swsetup_r+0x46>
 800721a:	68ac      	ldr	r4, [r5, #8]
 800721c:	e7eb      	b.n	80071f6 <__swsetup_r+0x1e>
 800721e:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <__swsetup_r+0xd8>)
 8007220:	429c      	cmp	r4, r3
 8007222:	bf08      	it	eq
 8007224:	68ec      	ldreq	r4, [r5, #12]
 8007226:	e7e6      	b.n	80071f6 <__swsetup_r+0x1e>
 8007228:	0758      	lsls	r0, r3, #29
 800722a:	d512      	bpl.n	8007252 <__swsetup_r+0x7a>
 800722c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800722e:	b141      	cbz	r1, 8007242 <__swsetup_r+0x6a>
 8007230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007234:	4299      	cmp	r1, r3
 8007236:	d002      	beq.n	800723e <__swsetup_r+0x66>
 8007238:	4630      	mov	r0, r6
 800723a:	f7ff fb9d 	bl	8006978 <_free_r>
 800723e:	2300      	movs	r3, #0
 8007240:	6363      	str	r3, [r4, #52]	; 0x34
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007248:	81a3      	strh	r3, [r4, #12]
 800724a:	2300      	movs	r3, #0
 800724c:	6063      	str	r3, [r4, #4]
 800724e:	6923      	ldr	r3, [r4, #16]
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	f043 0308 	orr.w	r3, r3, #8
 8007258:	81a3      	strh	r3, [r4, #12]
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	b94b      	cbnz	r3, 8007272 <__swsetup_r+0x9a>
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007268:	d003      	beq.n	8007272 <__swsetup_r+0x9a>
 800726a:	4621      	mov	r1, r4
 800726c:	4630      	mov	r0, r6
 800726e:	f000 fa09 	bl	8007684 <__smakebuf_r>
 8007272:	89a0      	ldrh	r0, [r4, #12]
 8007274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007278:	f010 0301 	ands.w	r3, r0, #1
 800727c:	d00a      	beq.n	8007294 <__swsetup_r+0xbc>
 800727e:	2300      	movs	r3, #0
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	6963      	ldr	r3, [r4, #20]
 8007284:	425b      	negs	r3, r3
 8007286:	61a3      	str	r3, [r4, #24]
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	b943      	cbnz	r3, 800729e <__swsetup_r+0xc6>
 800728c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007290:	d1ba      	bne.n	8007208 <__swsetup_r+0x30>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	0781      	lsls	r1, r0, #30
 8007296:	bf58      	it	pl
 8007298:	6963      	ldrpl	r3, [r4, #20]
 800729a:	60a3      	str	r3, [r4, #8]
 800729c:	e7f4      	b.n	8007288 <__swsetup_r+0xb0>
 800729e:	2000      	movs	r0, #0
 80072a0:	e7f7      	b.n	8007292 <__swsetup_r+0xba>
 80072a2:	bf00      	nop
 80072a4:	2000000c 	.word	0x2000000c
 80072a8:	08007b48 	.word	0x08007b48
 80072ac:	08007b68 	.word	0x08007b68
 80072b0:	08007b28 	.word	0x08007b28

080072b4 <abort>:
 80072b4:	b508      	push	{r3, lr}
 80072b6:	2006      	movs	r0, #6
 80072b8:	f000 fa58 	bl	800776c <raise>
 80072bc:	2001      	movs	r0, #1
 80072be:	f7fc fc2d 	bl	8003b1c <_exit>
	...

080072c4 <__sflush_r>:
 80072c4:	898a      	ldrh	r2, [r1, #12]
 80072c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ca:	4605      	mov	r5, r0
 80072cc:	0710      	lsls	r0, r2, #28
 80072ce:	460c      	mov	r4, r1
 80072d0:	d458      	bmi.n	8007384 <__sflush_r+0xc0>
 80072d2:	684b      	ldr	r3, [r1, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dc05      	bgt.n	80072e4 <__sflush_r+0x20>
 80072d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dc02      	bgt.n	80072e4 <__sflush_r+0x20>
 80072de:	2000      	movs	r0, #0
 80072e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072e6:	2e00      	cmp	r6, #0
 80072e8:	d0f9      	beq.n	80072de <__sflush_r+0x1a>
 80072ea:	2300      	movs	r3, #0
 80072ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072f0:	682f      	ldr	r7, [r5, #0]
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	d032      	beq.n	800735c <__sflush_r+0x98>
 80072f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	075a      	lsls	r2, r3, #29
 80072fc:	d505      	bpl.n	800730a <__sflush_r+0x46>
 80072fe:	6863      	ldr	r3, [r4, #4]
 8007300:	1ac0      	subs	r0, r0, r3
 8007302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007304:	b10b      	cbz	r3, 800730a <__sflush_r+0x46>
 8007306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007308:	1ac0      	subs	r0, r0, r3
 800730a:	2300      	movs	r3, #0
 800730c:	4602      	mov	r2, r0
 800730e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007310:	6a21      	ldr	r1, [r4, #32]
 8007312:	4628      	mov	r0, r5
 8007314:	47b0      	blx	r6
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	d106      	bne.n	800732a <__sflush_r+0x66>
 800731c:	6829      	ldr	r1, [r5, #0]
 800731e:	291d      	cmp	r1, #29
 8007320:	d82c      	bhi.n	800737c <__sflush_r+0xb8>
 8007322:	4a2a      	ldr	r2, [pc, #168]	; (80073cc <__sflush_r+0x108>)
 8007324:	40ca      	lsrs	r2, r1
 8007326:	07d6      	lsls	r6, r2, #31
 8007328:	d528      	bpl.n	800737c <__sflush_r+0xb8>
 800732a:	2200      	movs	r2, #0
 800732c:	6062      	str	r2, [r4, #4]
 800732e:	04d9      	lsls	r1, r3, #19
 8007330:	6922      	ldr	r2, [r4, #16]
 8007332:	6022      	str	r2, [r4, #0]
 8007334:	d504      	bpl.n	8007340 <__sflush_r+0x7c>
 8007336:	1c42      	adds	r2, r0, #1
 8007338:	d101      	bne.n	800733e <__sflush_r+0x7a>
 800733a:	682b      	ldr	r3, [r5, #0]
 800733c:	b903      	cbnz	r3, 8007340 <__sflush_r+0x7c>
 800733e:	6560      	str	r0, [r4, #84]	; 0x54
 8007340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007342:	602f      	str	r7, [r5, #0]
 8007344:	2900      	cmp	r1, #0
 8007346:	d0ca      	beq.n	80072de <__sflush_r+0x1a>
 8007348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800734c:	4299      	cmp	r1, r3
 800734e:	d002      	beq.n	8007356 <__sflush_r+0x92>
 8007350:	4628      	mov	r0, r5
 8007352:	f7ff fb11 	bl	8006978 <_free_r>
 8007356:	2000      	movs	r0, #0
 8007358:	6360      	str	r0, [r4, #52]	; 0x34
 800735a:	e7c1      	b.n	80072e0 <__sflush_r+0x1c>
 800735c:	6a21      	ldr	r1, [r4, #32]
 800735e:	2301      	movs	r3, #1
 8007360:	4628      	mov	r0, r5
 8007362:	47b0      	blx	r6
 8007364:	1c41      	adds	r1, r0, #1
 8007366:	d1c7      	bne.n	80072f8 <__sflush_r+0x34>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0c4      	beq.n	80072f8 <__sflush_r+0x34>
 800736e:	2b1d      	cmp	r3, #29
 8007370:	d001      	beq.n	8007376 <__sflush_r+0xb2>
 8007372:	2b16      	cmp	r3, #22
 8007374:	d101      	bne.n	800737a <__sflush_r+0xb6>
 8007376:	602f      	str	r7, [r5, #0]
 8007378:	e7b1      	b.n	80072de <__sflush_r+0x1a>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	e7ad      	b.n	80072e0 <__sflush_r+0x1c>
 8007384:	690f      	ldr	r7, [r1, #16]
 8007386:	2f00      	cmp	r7, #0
 8007388:	d0a9      	beq.n	80072de <__sflush_r+0x1a>
 800738a:	0793      	lsls	r3, r2, #30
 800738c:	680e      	ldr	r6, [r1, #0]
 800738e:	bf08      	it	eq
 8007390:	694b      	ldreq	r3, [r1, #20]
 8007392:	600f      	str	r7, [r1, #0]
 8007394:	bf18      	it	ne
 8007396:	2300      	movne	r3, #0
 8007398:	eba6 0807 	sub.w	r8, r6, r7
 800739c:	608b      	str	r3, [r1, #8]
 800739e:	f1b8 0f00 	cmp.w	r8, #0
 80073a2:	dd9c      	ble.n	80072de <__sflush_r+0x1a>
 80073a4:	6a21      	ldr	r1, [r4, #32]
 80073a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073a8:	4643      	mov	r3, r8
 80073aa:	463a      	mov	r2, r7
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b0      	blx	r6
 80073b0:	2800      	cmp	r0, #0
 80073b2:	dc06      	bgt.n	80073c2 <__sflush_r+0xfe>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073c0:	e78e      	b.n	80072e0 <__sflush_r+0x1c>
 80073c2:	4407      	add	r7, r0
 80073c4:	eba8 0800 	sub.w	r8, r8, r0
 80073c8:	e7e9      	b.n	800739e <__sflush_r+0xda>
 80073ca:	bf00      	nop
 80073cc:	20400001 	.word	0x20400001

080073d0 <_fflush_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	690b      	ldr	r3, [r1, #16]
 80073d4:	4605      	mov	r5, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	b913      	cbnz	r3, 80073e0 <_fflush_r+0x10>
 80073da:	2500      	movs	r5, #0
 80073dc:	4628      	mov	r0, r5
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	b118      	cbz	r0, 80073ea <_fflush_r+0x1a>
 80073e2:	6983      	ldr	r3, [r0, #24]
 80073e4:	b90b      	cbnz	r3, 80073ea <_fflush_r+0x1a>
 80073e6:	f000 f887 	bl	80074f8 <__sinit>
 80073ea:	4b14      	ldr	r3, [pc, #80]	; (800743c <_fflush_r+0x6c>)
 80073ec:	429c      	cmp	r4, r3
 80073ee:	d11b      	bne.n	8007428 <_fflush_r+0x58>
 80073f0:	686c      	ldr	r4, [r5, #4]
 80073f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0ef      	beq.n	80073da <_fflush_r+0xa>
 80073fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073fc:	07d0      	lsls	r0, r2, #31
 80073fe:	d404      	bmi.n	800740a <_fflush_r+0x3a>
 8007400:	0599      	lsls	r1, r3, #22
 8007402:	d402      	bmi.n	800740a <_fflush_r+0x3a>
 8007404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007406:	f000 f915 	bl	8007634 <__retarget_lock_acquire_recursive>
 800740a:	4628      	mov	r0, r5
 800740c:	4621      	mov	r1, r4
 800740e:	f7ff ff59 	bl	80072c4 <__sflush_r>
 8007412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007414:	07da      	lsls	r2, r3, #31
 8007416:	4605      	mov	r5, r0
 8007418:	d4e0      	bmi.n	80073dc <_fflush_r+0xc>
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	059b      	lsls	r3, r3, #22
 800741e:	d4dd      	bmi.n	80073dc <_fflush_r+0xc>
 8007420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007422:	f000 f908 	bl	8007636 <__retarget_lock_release_recursive>
 8007426:	e7d9      	b.n	80073dc <_fflush_r+0xc>
 8007428:	4b05      	ldr	r3, [pc, #20]	; (8007440 <_fflush_r+0x70>)
 800742a:	429c      	cmp	r4, r3
 800742c:	d101      	bne.n	8007432 <_fflush_r+0x62>
 800742e:	68ac      	ldr	r4, [r5, #8]
 8007430:	e7df      	b.n	80073f2 <_fflush_r+0x22>
 8007432:	4b04      	ldr	r3, [pc, #16]	; (8007444 <_fflush_r+0x74>)
 8007434:	429c      	cmp	r4, r3
 8007436:	bf08      	it	eq
 8007438:	68ec      	ldreq	r4, [r5, #12]
 800743a:	e7da      	b.n	80073f2 <_fflush_r+0x22>
 800743c:	08007b48 	.word	0x08007b48
 8007440:	08007b68 	.word	0x08007b68
 8007444:	08007b28 	.word	0x08007b28

08007448 <std>:
 8007448:	2300      	movs	r3, #0
 800744a:	b510      	push	{r4, lr}
 800744c:	4604      	mov	r4, r0
 800744e:	e9c0 3300 	strd	r3, r3, [r0]
 8007452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007456:	6083      	str	r3, [r0, #8]
 8007458:	8181      	strh	r1, [r0, #12]
 800745a:	6643      	str	r3, [r0, #100]	; 0x64
 800745c:	81c2      	strh	r2, [r0, #14]
 800745e:	6183      	str	r3, [r0, #24]
 8007460:	4619      	mov	r1, r3
 8007462:	2208      	movs	r2, #8
 8007464:	305c      	adds	r0, #92	; 0x5c
 8007466:	f7ff fa19 	bl	800689c <memset>
 800746a:	4b05      	ldr	r3, [pc, #20]	; (8007480 <std+0x38>)
 800746c:	6263      	str	r3, [r4, #36]	; 0x24
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <std+0x3c>)
 8007470:	62a3      	str	r3, [r4, #40]	; 0x28
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <std+0x40>)
 8007474:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007476:	4b05      	ldr	r3, [pc, #20]	; (800748c <std+0x44>)
 8007478:	6224      	str	r4, [r4, #32]
 800747a:	6323      	str	r3, [r4, #48]	; 0x30
 800747c:	bd10      	pop	{r4, pc}
 800747e:	bf00      	nop
 8007480:	080077a5 	.word	0x080077a5
 8007484:	080077c7 	.word	0x080077c7
 8007488:	080077ff 	.word	0x080077ff
 800748c:	08007823 	.word	0x08007823

08007490 <_cleanup_r>:
 8007490:	4901      	ldr	r1, [pc, #4]	; (8007498 <_cleanup_r+0x8>)
 8007492:	f000 b8af 	b.w	80075f4 <_fwalk_reent>
 8007496:	bf00      	nop
 8007498:	080073d1 	.word	0x080073d1

0800749c <__sfmoreglue>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	2268      	movs	r2, #104	; 0x68
 80074a0:	1e4d      	subs	r5, r1, #1
 80074a2:	4355      	muls	r5, r2
 80074a4:	460e      	mov	r6, r1
 80074a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074aa:	f7ff fad1 	bl	8006a50 <_malloc_r>
 80074ae:	4604      	mov	r4, r0
 80074b0:	b140      	cbz	r0, 80074c4 <__sfmoreglue+0x28>
 80074b2:	2100      	movs	r1, #0
 80074b4:	e9c0 1600 	strd	r1, r6, [r0]
 80074b8:	300c      	adds	r0, #12
 80074ba:	60a0      	str	r0, [r4, #8]
 80074bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074c0:	f7ff f9ec 	bl	800689c <memset>
 80074c4:	4620      	mov	r0, r4
 80074c6:	bd70      	pop	{r4, r5, r6, pc}

080074c8 <__sfp_lock_acquire>:
 80074c8:	4801      	ldr	r0, [pc, #4]	; (80074d0 <__sfp_lock_acquire+0x8>)
 80074ca:	f000 b8b3 	b.w	8007634 <__retarget_lock_acquire_recursive>
 80074ce:	bf00      	nop
 80074d0:	2000289d 	.word	0x2000289d

080074d4 <__sfp_lock_release>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__sfp_lock_release+0x8>)
 80074d6:	f000 b8ae 	b.w	8007636 <__retarget_lock_release_recursive>
 80074da:	bf00      	nop
 80074dc:	2000289d 	.word	0x2000289d

080074e0 <__sinit_lock_acquire>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__sinit_lock_acquire+0x8>)
 80074e2:	f000 b8a7 	b.w	8007634 <__retarget_lock_acquire_recursive>
 80074e6:	bf00      	nop
 80074e8:	2000289e 	.word	0x2000289e

080074ec <__sinit_lock_release>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__sinit_lock_release+0x8>)
 80074ee:	f000 b8a2 	b.w	8007636 <__retarget_lock_release_recursive>
 80074f2:	bf00      	nop
 80074f4:	2000289e 	.word	0x2000289e

080074f8 <__sinit>:
 80074f8:	b510      	push	{r4, lr}
 80074fa:	4604      	mov	r4, r0
 80074fc:	f7ff fff0 	bl	80074e0 <__sinit_lock_acquire>
 8007500:	69a3      	ldr	r3, [r4, #24]
 8007502:	b11b      	cbz	r3, 800750c <__sinit+0x14>
 8007504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007508:	f7ff bff0 	b.w	80074ec <__sinit_lock_release>
 800750c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007510:	6523      	str	r3, [r4, #80]	; 0x50
 8007512:	4b13      	ldr	r3, [pc, #76]	; (8007560 <__sinit+0x68>)
 8007514:	4a13      	ldr	r2, [pc, #76]	; (8007564 <__sinit+0x6c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	62a2      	str	r2, [r4, #40]	; 0x28
 800751a:	42a3      	cmp	r3, r4
 800751c:	bf04      	itt	eq
 800751e:	2301      	moveq	r3, #1
 8007520:	61a3      	streq	r3, [r4, #24]
 8007522:	4620      	mov	r0, r4
 8007524:	f000 f820 	bl	8007568 <__sfp>
 8007528:	6060      	str	r0, [r4, #4]
 800752a:	4620      	mov	r0, r4
 800752c:	f000 f81c 	bl	8007568 <__sfp>
 8007530:	60a0      	str	r0, [r4, #8]
 8007532:	4620      	mov	r0, r4
 8007534:	f000 f818 	bl	8007568 <__sfp>
 8007538:	2200      	movs	r2, #0
 800753a:	60e0      	str	r0, [r4, #12]
 800753c:	2104      	movs	r1, #4
 800753e:	6860      	ldr	r0, [r4, #4]
 8007540:	f7ff ff82 	bl	8007448 <std>
 8007544:	68a0      	ldr	r0, [r4, #8]
 8007546:	2201      	movs	r2, #1
 8007548:	2109      	movs	r1, #9
 800754a:	f7ff ff7d 	bl	8007448 <std>
 800754e:	68e0      	ldr	r0, [r4, #12]
 8007550:	2202      	movs	r2, #2
 8007552:	2112      	movs	r1, #18
 8007554:	f7ff ff78 	bl	8007448 <std>
 8007558:	2301      	movs	r3, #1
 800755a:	61a3      	str	r3, [r4, #24]
 800755c:	e7d2      	b.n	8007504 <__sinit+0xc>
 800755e:	bf00      	nop
 8007560:	08007a40 	.word	0x08007a40
 8007564:	08007491 	.word	0x08007491

08007568 <__sfp>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	4607      	mov	r7, r0
 800756c:	f7ff ffac 	bl	80074c8 <__sfp_lock_acquire>
 8007570:	4b1e      	ldr	r3, [pc, #120]	; (80075ec <__sfp+0x84>)
 8007572:	681e      	ldr	r6, [r3, #0]
 8007574:	69b3      	ldr	r3, [r6, #24]
 8007576:	b913      	cbnz	r3, 800757e <__sfp+0x16>
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff ffbd 	bl	80074f8 <__sinit>
 800757e:	3648      	adds	r6, #72	; 0x48
 8007580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007584:	3b01      	subs	r3, #1
 8007586:	d503      	bpl.n	8007590 <__sfp+0x28>
 8007588:	6833      	ldr	r3, [r6, #0]
 800758a:	b30b      	cbz	r3, 80075d0 <__sfp+0x68>
 800758c:	6836      	ldr	r6, [r6, #0]
 800758e:	e7f7      	b.n	8007580 <__sfp+0x18>
 8007590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007594:	b9d5      	cbnz	r5, 80075cc <__sfp+0x64>
 8007596:	4b16      	ldr	r3, [pc, #88]	; (80075f0 <__sfp+0x88>)
 8007598:	60e3      	str	r3, [r4, #12]
 800759a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800759e:	6665      	str	r5, [r4, #100]	; 0x64
 80075a0:	f000 f847 	bl	8007632 <__retarget_lock_init_recursive>
 80075a4:	f7ff ff96 	bl	80074d4 <__sfp_lock_release>
 80075a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075b0:	6025      	str	r5, [r4, #0]
 80075b2:	61a5      	str	r5, [r4, #24]
 80075b4:	2208      	movs	r2, #8
 80075b6:	4629      	mov	r1, r5
 80075b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075bc:	f7ff f96e 	bl	800689c <memset>
 80075c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075c8:	4620      	mov	r0, r4
 80075ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075cc:	3468      	adds	r4, #104	; 0x68
 80075ce:	e7d9      	b.n	8007584 <__sfp+0x1c>
 80075d0:	2104      	movs	r1, #4
 80075d2:	4638      	mov	r0, r7
 80075d4:	f7ff ff62 	bl	800749c <__sfmoreglue>
 80075d8:	4604      	mov	r4, r0
 80075da:	6030      	str	r0, [r6, #0]
 80075dc:	2800      	cmp	r0, #0
 80075de:	d1d5      	bne.n	800758c <__sfp+0x24>
 80075e0:	f7ff ff78 	bl	80074d4 <__sfp_lock_release>
 80075e4:	230c      	movs	r3, #12
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	e7ee      	b.n	80075c8 <__sfp+0x60>
 80075ea:	bf00      	nop
 80075ec:	08007a40 	.word	0x08007a40
 80075f0:	ffff0001 	.word	0xffff0001

080075f4 <_fwalk_reent>:
 80075f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f8:	4606      	mov	r6, r0
 80075fa:	4688      	mov	r8, r1
 80075fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007600:	2700      	movs	r7, #0
 8007602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007606:	f1b9 0901 	subs.w	r9, r9, #1
 800760a:	d505      	bpl.n	8007618 <_fwalk_reent+0x24>
 800760c:	6824      	ldr	r4, [r4, #0]
 800760e:	2c00      	cmp	r4, #0
 8007610:	d1f7      	bne.n	8007602 <_fwalk_reent+0xe>
 8007612:	4638      	mov	r0, r7
 8007614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007618:	89ab      	ldrh	r3, [r5, #12]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d907      	bls.n	800762e <_fwalk_reent+0x3a>
 800761e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007622:	3301      	adds	r3, #1
 8007624:	d003      	beq.n	800762e <_fwalk_reent+0x3a>
 8007626:	4629      	mov	r1, r5
 8007628:	4630      	mov	r0, r6
 800762a:	47c0      	blx	r8
 800762c:	4307      	orrs	r7, r0
 800762e:	3568      	adds	r5, #104	; 0x68
 8007630:	e7e9      	b.n	8007606 <_fwalk_reent+0x12>

08007632 <__retarget_lock_init_recursive>:
 8007632:	4770      	bx	lr

08007634 <__retarget_lock_acquire_recursive>:
 8007634:	4770      	bx	lr

08007636 <__retarget_lock_release_recursive>:
 8007636:	4770      	bx	lr

08007638 <__swhatbuf_r>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	460e      	mov	r6, r1
 800763c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007640:	2900      	cmp	r1, #0
 8007642:	b096      	sub	sp, #88	; 0x58
 8007644:	4614      	mov	r4, r2
 8007646:	461d      	mov	r5, r3
 8007648:	da08      	bge.n	800765c <__swhatbuf_r+0x24>
 800764a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	602a      	str	r2, [r5, #0]
 8007652:	061a      	lsls	r2, r3, #24
 8007654:	d410      	bmi.n	8007678 <__swhatbuf_r+0x40>
 8007656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800765a:	e00e      	b.n	800767a <__swhatbuf_r+0x42>
 800765c:	466a      	mov	r2, sp
 800765e:	f000 f907 	bl	8007870 <_fstat_r>
 8007662:	2800      	cmp	r0, #0
 8007664:	dbf1      	blt.n	800764a <__swhatbuf_r+0x12>
 8007666:	9a01      	ldr	r2, [sp, #4]
 8007668:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800766c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007670:	425a      	negs	r2, r3
 8007672:	415a      	adcs	r2, r3
 8007674:	602a      	str	r2, [r5, #0]
 8007676:	e7ee      	b.n	8007656 <__swhatbuf_r+0x1e>
 8007678:	2340      	movs	r3, #64	; 0x40
 800767a:	2000      	movs	r0, #0
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	b016      	add	sp, #88	; 0x58
 8007680:	bd70      	pop	{r4, r5, r6, pc}
	...

08007684 <__smakebuf_r>:
 8007684:	898b      	ldrh	r3, [r1, #12]
 8007686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007688:	079d      	lsls	r5, r3, #30
 800768a:	4606      	mov	r6, r0
 800768c:	460c      	mov	r4, r1
 800768e:	d507      	bpl.n	80076a0 <__smakebuf_r+0x1c>
 8007690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	6123      	str	r3, [r4, #16]
 8007698:	2301      	movs	r3, #1
 800769a:	6163      	str	r3, [r4, #20]
 800769c:	b002      	add	sp, #8
 800769e:	bd70      	pop	{r4, r5, r6, pc}
 80076a0:	ab01      	add	r3, sp, #4
 80076a2:	466a      	mov	r2, sp
 80076a4:	f7ff ffc8 	bl	8007638 <__swhatbuf_r>
 80076a8:	9900      	ldr	r1, [sp, #0]
 80076aa:	4605      	mov	r5, r0
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff f9cf 	bl	8006a50 <_malloc_r>
 80076b2:	b948      	cbnz	r0, 80076c8 <__smakebuf_r+0x44>
 80076b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b8:	059a      	lsls	r2, r3, #22
 80076ba:	d4ef      	bmi.n	800769c <__smakebuf_r+0x18>
 80076bc:	f023 0303 	bic.w	r3, r3, #3
 80076c0:	f043 0302 	orr.w	r3, r3, #2
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	e7e3      	b.n	8007690 <__smakebuf_r+0xc>
 80076c8:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <__smakebuf_r+0x7c>)
 80076ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	6020      	str	r0, [r4, #0]
 80076d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d4:	81a3      	strh	r3, [r4, #12]
 80076d6:	9b00      	ldr	r3, [sp, #0]
 80076d8:	6163      	str	r3, [r4, #20]
 80076da:	9b01      	ldr	r3, [sp, #4]
 80076dc:	6120      	str	r0, [r4, #16]
 80076de:	b15b      	cbz	r3, 80076f8 <__smakebuf_r+0x74>
 80076e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076e4:	4630      	mov	r0, r6
 80076e6:	f000 f8d5 	bl	8007894 <_isatty_r>
 80076ea:	b128      	cbz	r0, 80076f8 <__smakebuf_r+0x74>
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	f023 0303 	bic.w	r3, r3, #3
 80076f2:	f043 0301 	orr.w	r3, r3, #1
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	89a0      	ldrh	r0, [r4, #12]
 80076fa:	4305      	orrs	r5, r0
 80076fc:	81a5      	strh	r5, [r4, #12]
 80076fe:	e7cd      	b.n	800769c <__smakebuf_r+0x18>
 8007700:	08007491 	.word	0x08007491

08007704 <__malloc_lock>:
 8007704:	4801      	ldr	r0, [pc, #4]	; (800770c <__malloc_lock+0x8>)
 8007706:	f7ff bf95 	b.w	8007634 <__retarget_lock_acquire_recursive>
 800770a:	bf00      	nop
 800770c:	2000289c 	.word	0x2000289c

08007710 <__malloc_unlock>:
 8007710:	4801      	ldr	r0, [pc, #4]	; (8007718 <__malloc_unlock+0x8>)
 8007712:	f7ff bf90 	b.w	8007636 <__retarget_lock_release_recursive>
 8007716:	bf00      	nop
 8007718:	2000289c 	.word	0x2000289c

0800771c <_raise_r>:
 800771c:	291f      	cmp	r1, #31
 800771e:	b538      	push	{r3, r4, r5, lr}
 8007720:	4604      	mov	r4, r0
 8007722:	460d      	mov	r5, r1
 8007724:	d904      	bls.n	8007730 <_raise_r+0x14>
 8007726:	2316      	movs	r3, #22
 8007728:	6003      	str	r3, [r0, #0]
 800772a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007732:	b112      	cbz	r2, 800773a <_raise_r+0x1e>
 8007734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007738:	b94b      	cbnz	r3, 800774e <_raise_r+0x32>
 800773a:	4620      	mov	r0, r4
 800773c:	f000 f830 	bl	80077a0 <_getpid_r>
 8007740:	462a      	mov	r2, r5
 8007742:	4601      	mov	r1, r0
 8007744:	4620      	mov	r0, r4
 8007746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800774a:	f000 b817 	b.w	800777c <_kill_r>
 800774e:	2b01      	cmp	r3, #1
 8007750:	d00a      	beq.n	8007768 <_raise_r+0x4c>
 8007752:	1c59      	adds	r1, r3, #1
 8007754:	d103      	bne.n	800775e <_raise_r+0x42>
 8007756:	2316      	movs	r3, #22
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	2001      	movs	r0, #1
 800775c:	e7e7      	b.n	800772e <_raise_r+0x12>
 800775e:	2400      	movs	r4, #0
 8007760:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007764:	4628      	mov	r0, r5
 8007766:	4798      	blx	r3
 8007768:	2000      	movs	r0, #0
 800776a:	e7e0      	b.n	800772e <_raise_r+0x12>

0800776c <raise>:
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <raise+0xc>)
 800776e:	4601      	mov	r1, r0
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f7ff bfd3 	b.w	800771c <_raise_r>
 8007776:	bf00      	nop
 8007778:	2000000c 	.word	0x2000000c

0800777c <_kill_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d07      	ldr	r5, [pc, #28]	; (800779c <_kill_r+0x20>)
 8007780:	2300      	movs	r3, #0
 8007782:	4604      	mov	r4, r0
 8007784:	4608      	mov	r0, r1
 8007786:	4611      	mov	r1, r2
 8007788:	602b      	str	r3, [r5, #0]
 800778a:	f7fc f9b7 	bl	8003afc <_kill>
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	d102      	bne.n	8007798 <_kill_r+0x1c>
 8007792:	682b      	ldr	r3, [r5, #0]
 8007794:	b103      	cbz	r3, 8007798 <_kill_r+0x1c>
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	bd38      	pop	{r3, r4, r5, pc}
 800779a:	bf00      	nop
 800779c:	200028a0 	.word	0x200028a0

080077a0 <_getpid_r>:
 80077a0:	f7fc b9a4 	b.w	8003aec <_getpid>

080077a4 <__sread>:
 80077a4:	b510      	push	{r4, lr}
 80077a6:	460c      	mov	r4, r1
 80077a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ac:	f000 f894 	bl	80078d8 <_read_r>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	bfab      	itete	ge
 80077b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077b6:	89a3      	ldrhlt	r3, [r4, #12]
 80077b8:	181b      	addge	r3, r3, r0
 80077ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077be:	bfac      	ite	ge
 80077c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077c2:	81a3      	strhlt	r3, [r4, #12]
 80077c4:	bd10      	pop	{r4, pc}

080077c6 <__swrite>:
 80077c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ca:	461f      	mov	r7, r3
 80077cc:	898b      	ldrh	r3, [r1, #12]
 80077ce:	05db      	lsls	r3, r3, #23
 80077d0:	4605      	mov	r5, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	4616      	mov	r6, r2
 80077d6:	d505      	bpl.n	80077e4 <__swrite+0x1e>
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	2302      	movs	r3, #2
 80077de:	2200      	movs	r2, #0
 80077e0:	f000 f868 	bl	80078b4 <_lseek_r>
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ee:	81a3      	strh	r3, [r4, #12]
 80077f0:	4632      	mov	r2, r6
 80077f2:	463b      	mov	r3, r7
 80077f4:	4628      	mov	r0, r5
 80077f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077fa:	f000 b817 	b.w	800782c <_write_r>

080077fe <__sseek>:
 80077fe:	b510      	push	{r4, lr}
 8007800:	460c      	mov	r4, r1
 8007802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007806:	f000 f855 	bl	80078b4 <_lseek_r>
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	bf15      	itete	ne
 8007810:	6560      	strne	r0, [r4, #84]	; 0x54
 8007812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800781a:	81a3      	strheq	r3, [r4, #12]
 800781c:	bf18      	it	ne
 800781e:	81a3      	strhne	r3, [r4, #12]
 8007820:	bd10      	pop	{r4, pc}

08007822 <__sclose>:
 8007822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007826:	f000 b813 	b.w	8007850 <_close_r>
	...

0800782c <_write_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	; (800784c <_write_r+0x20>)
 8007830:	4604      	mov	r4, r0
 8007832:	4608      	mov	r0, r1
 8007834:	4611      	mov	r1, r2
 8007836:	2200      	movs	r2, #0
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7fc f995 	bl	8003b6a <_write>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_write_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_write_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	200028a0 	.word	0x200028a0

08007850 <_close_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d06      	ldr	r5, [pc, #24]	; (800786c <_close_r+0x1c>)
 8007854:	2300      	movs	r3, #0
 8007856:	4604      	mov	r4, r0
 8007858:	4608      	mov	r0, r1
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	f7fc f9a1 	bl	8003ba2 <_close>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d102      	bne.n	800786a <_close_r+0x1a>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	b103      	cbz	r3, 800786a <_close_r+0x1a>
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	200028a0 	.word	0x200028a0

08007870 <_fstat_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4d07      	ldr	r5, [pc, #28]	; (8007890 <_fstat_r+0x20>)
 8007874:	2300      	movs	r3, #0
 8007876:	4604      	mov	r4, r0
 8007878:	4608      	mov	r0, r1
 800787a:	4611      	mov	r1, r2
 800787c:	602b      	str	r3, [r5, #0]
 800787e:	f7fc f99c 	bl	8003bba <_fstat>
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	d102      	bne.n	800788c <_fstat_r+0x1c>
 8007886:	682b      	ldr	r3, [r5, #0]
 8007888:	b103      	cbz	r3, 800788c <_fstat_r+0x1c>
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	bd38      	pop	{r3, r4, r5, pc}
 800788e:	bf00      	nop
 8007890:	200028a0 	.word	0x200028a0

08007894 <_isatty_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4d06      	ldr	r5, [pc, #24]	; (80078b0 <_isatty_r+0x1c>)
 8007898:	2300      	movs	r3, #0
 800789a:	4604      	mov	r4, r0
 800789c:	4608      	mov	r0, r1
 800789e:	602b      	str	r3, [r5, #0]
 80078a0:	f7fc f99b 	bl	8003bda <_isatty>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d102      	bne.n	80078ae <_isatty_r+0x1a>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	b103      	cbz	r3, 80078ae <_isatty_r+0x1a>
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	200028a0 	.word	0x200028a0

080078b4 <_lseek_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d07      	ldr	r5, [pc, #28]	; (80078d4 <_lseek_r+0x20>)
 80078b8:	4604      	mov	r4, r0
 80078ba:	4608      	mov	r0, r1
 80078bc:	4611      	mov	r1, r2
 80078be:	2200      	movs	r2, #0
 80078c0:	602a      	str	r2, [r5, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f7fc f994 	bl	8003bf0 <_lseek>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_lseek_r+0x1e>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_lseek_r+0x1e>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	200028a0 	.word	0x200028a0

080078d8 <_read_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d07      	ldr	r5, [pc, #28]	; (80078f8 <_read_r+0x20>)
 80078dc:	4604      	mov	r4, r0
 80078de:	4608      	mov	r0, r1
 80078e0:	4611      	mov	r1, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	602a      	str	r2, [r5, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	f7fc f922 	bl	8003b30 <_read>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_read_r+0x1e>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_read_r+0x1e>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	200028a0 	.word	0x200028a0

080078fc <_init>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr

08007908 <_fini>:
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	bf00      	nop
 800790c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790e:	bc08      	pop	{r3}
 8007910:	469e      	mov	lr, r3
 8007912:	4770      	bx	lr
