
bxse_f3_payload_emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c04  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005d90  08005d90  00015d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec8  08005ec8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed0  08005ed0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed4  08005ed4  00015ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001d8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015184  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ffc  00000000  00000000  000351c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  000371c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c10  00000000  00000000  00037e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ddfd  00000000  00000000  00038a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdf4  00000000  00000000  00056865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000add15  00000000  00000000  00063659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011136e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037e4  00000000  00000000  001113c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d74 	.word	0x08005d74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005d74 	.word	0x08005d74

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2uiz>:
 80008b4:	004a      	lsls	r2, r1, #1
 80008b6:	d211      	bcs.n	80008dc <__aeabi_d2uiz+0x28>
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d211      	bcs.n	80008e2 <__aeabi_d2uiz+0x2e>
 80008be:	d50d      	bpl.n	80008dc <__aeabi_d2uiz+0x28>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d40e      	bmi.n	80008e8 <__aeabi_d2uiz+0x34>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	fa23 f002 	lsr.w	r0, r3, r2
 80008da:	4770      	bx	lr
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	4770      	bx	lr
 80008e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008e6:	d102      	bne.n	80008ee <__aeabi_d2uiz+0x3a>
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ec:	4770      	bx	lr
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	4770      	bx	lr

080008f4 <__aeabi_uldivmod>:
 80008f4:	b953      	cbnz	r3, 800090c <__aeabi_uldivmod+0x18>
 80008f6:	b94a      	cbnz	r2, 800090c <__aeabi_uldivmod+0x18>
 80008f8:	2900      	cmp	r1, #0
 80008fa:	bf08      	it	eq
 80008fc:	2800      	cmpeq	r0, #0
 80008fe:	bf1c      	itt	ne
 8000900:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000904:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000908:	f000 b974 	b.w	8000bf4 <__aeabi_idiv0>
 800090c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000910:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000914:	f000 f806 	bl	8000924 <__udivmoddi4>
 8000918:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000920:	b004      	add	sp, #16
 8000922:	4770      	bx	lr

08000924 <__udivmoddi4>:
 8000924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000928:	9d08      	ldr	r5, [sp, #32]
 800092a:	4604      	mov	r4, r0
 800092c:	468e      	mov	lr, r1
 800092e:	2b00      	cmp	r3, #0
 8000930:	d14d      	bne.n	80009ce <__udivmoddi4+0xaa>
 8000932:	428a      	cmp	r2, r1
 8000934:	4694      	mov	ip, r2
 8000936:	d969      	bls.n	8000a0c <__udivmoddi4+0xe8>
 8000938:	fab2 f282 	clz	r2, r2
 800093c:	b152      	cbz	r2, 8000954 <__udivmoddi4+0x30>
 800093e:	fa01 f302 	lsl.w	r3, r1, r2
 8000942:	f1c2 0120 	rsb	r1, r2, #32
 8000946:	fa20 f101 	lsr.w	r1, r0, r1
 800094a:	fa0c fc02 	lsl.w	ip, ip, r2
 800094e:	ea41 0e03 	orr.w	lr, r1, r3
 8000952:	4094      	lsls	r4, r2
 8000954:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000958:	0c21      	lsrs	r1, r4, #16
 800095a:	fbbe f6f8 	udiv	r6, lr, r8
 800095e:	fa1f f78c 	uxth.w	r7, ip
 8000962:	fb08 e316 	mls	r3, r8, r6, lr
 8000966:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800096a:	fb06 f107 	mul.w	r1, r6, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d90a      	bls.n	8000988 <__udivmoddi4+0x64>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800097a:	f080 811f 	bcs.w	8000bbc <__udivmoddi4+0x298>
 800097e:	4299      	cmp	r1, r3
 8000980:	f240 811c 	bls.w	8000bbc <__udivmoddi4+0x298>
 8000984:	3e02      	subs	r6, #2
 8000986:	4463      	add	r3, ip
 8000988:	1a5b      	subs	r3, r3, r1
 800098a:	b2a4      	uxth	r4, r4
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3310 	mls	r3, r8, r0, r3
 8000994:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000998:	fb00 f707 	mul.w	r7, r0, r7
 800099c:	42a7      	cmp	r7, r4
 800099e:	d90a      	bls.n	80009b6 <__udivmoddi4+0x92>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009a8:	f080 810a 	bcs.w	8000bc0 <__udivmoddi4+0x29c>
 80009ac:	42a7      	cmp	r7, r4
 80009ae:	f240 8107 	bls.w	8000bc0 <__udivmoddi4+0x29c>
 80009b2:	4464      	add	r4, ip
 80009b4:	3802      	subs	r0, #2
 80009b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ba:	1be4      	subs	r4, r4, r7
 80009bc:	2600      	movs	r6, #0
 80009be:	b11d      	cbz	r5, 80009c8 <__udivmoddi4+0xa4>
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	2300      	movs	r3, #0
 80009c4:	e9c5 4300 	strd	r4, r3, [r5]
 80009c8:	4631      	mov	r1, r6
 80009ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ce:	428b      	cmp	r3, r1
 80009d0:	d909      	bls.n	80009e6 <__udivmoddi4+0xc2>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	f000 80ef 	beq.w	8000bb6 <__udivmoddi4+0x292>
 80009d8:	2600      	movs	r6, #0
 80009da:	e9c5 0100 	strd	r0, r1, [r5]
 80009de:	4630      	mov	r0, r6
 80009e0:	4631      	mov	r1, r6
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	fab3 f683 	clz	r6, r3
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d14a      	bne.n	8000a84 <__udivmoddi4+0x160>
 80009ee:	428b      	cmp	r3, r1
 80009f0:	d302      	bcc.n	80009f8 <__udivmoddi4+0xd4>
 80009f2:	4282      	cmp	r2, r0
 80009f4:	f200 80f9 	bhi.w	8000bea <__udivmoddi4+0x2c6>
 80009f8:	1a84      	subs	r4, r0, r2
 80009fa:	eb61 0303 	sbc.w	r3, r1, r3
 80009fe:	2001      	movs	r0, #1
 8000a00:	469e      	mov	lr, r3
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d0e0      	beq.n	80009c8 <__udivmoddi4+0xa4>
 8000a06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a0a:	e7dd      	b.n	80009c8 <__udivmoddi4+0xa4>
 8000a0c:	b902      	cbnz	r2, 8000a10 <__udivmoddi4+0xec>
 8000a0e:	deff      	udf	#255	; 0xff
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	2a00      	cmp	r2, #0
 8000a16:	f040 8092 	bne.w	8000b3e <__udivmoddi4+0x21a>
 8000a1a:	eba1 010c 	sub.w	r1, r1, ip
 8000a1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a22:	fa1f fe8c 	uxth.w	lr, ip
 8000a26:	2601      	movs	r6, #1
 8000a28:	0c20      	lsrs	r0, r4, #16
 8000a2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a36:	fb0e f003 	mul.w	r0, lr, r3
 8000a3a:	4288      	cmp	r0, r1
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x12c>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x12a>
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	f200 80cb 	bhi.w	8000be4 <__udivmoddi4+0x2c0>
 8000a4e:	4643      	mov	r3, r8
 8000a50:	1a09      	subs	r1, r1, r0
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a58:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a60:	fb0e fe00 	mul.w	lr, lr, r0
 8000a64:	45a6      	cmp	lr, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x156>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x154>
 8000a72:	45a6      	cmp	lr, r4
 8000a74:	f200 80bb 	bhi.w	8000bee <__udivmoddi4+0x2ca>
 8000a78:	4608      	mov	r0, r1
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a82:	e79c      	b.n	80009be <__udivmoddi4+0x9a>
 8000a84:	f1c6 0720 	rsb	r7, r6, #32
 8000a88:	40b3      	lsls	r3, r6
 8000a8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a92:	fa20 f407 	lsr.w	r4, r0, r7
 8000a96:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9a:	431c      	orrs	r4, r3
 8000a9c:	40f9      	lsrs	r1, r7
 8000a9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aa2:	fa00 f306 	lsl.w	r3, r0, r6
 8000aa6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000aaa:	0c20      	lsrs	r0, r4, #16
 8000aac:	fa1f fe8c 	uxth.w	lr, ip
 8000ab0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ab4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab8:	fb08 f00e 	mul.w	r0, r8, lr
 8000abc:	4288      	cmp	r0, r1
 8000abe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac2:	d90b      	bls.n	8000adc <__udivmoddi4+0x1b8>
 8000ac4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000acc:	f080 8088 	bcs.w	8000be0 <__udivmoddi4+0x2bc>
 8000ad0:	4288      	cmp	r0, r1
 8000ad2:	f240 8085 	bls.w	8000be0 <__udivmoddi4+0x2bc>
 8000ad6:	f1a8 0802 	sub.w	r8, r8, #2
 8000ada:	4461      	add	r1, ip
 8000adc:	1a09      	subs	r1, r1, r0
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ae4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ae8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af0:	458e      	cmp	lr, r1
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x1e2>
 8000af4:	eb1c 0101 	adds.w	r1, ip, r1
 8000af8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000afc:	d26c      	bcs.n	8000bd8 <__udivmoddi4+0x2b4>
 8000afe:	458e      	cmp	lr, r1
 8000b00:	d96a      	bls.n	8000bd8 <__udivmoddi4+0x2b4>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4461      	add	r1, ip
 8000b06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b0e:	eba1 010e 	sub.w	r1, r1, lr
 8000b12:	42a1      	cmp	r1, r4
 8000b14:	46c8      	mov	r8, r9
 8000b16:	46a6      	mov	lr, r4
 8000b18:	d356      	bcc.n	8000bc8 <__udivmoddi4+0x2a4>
 8000b1a:	d053      	beq.n	8000bc4 <__udivmoddi4+0x2a0>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x212>
 8000b1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b22:	eb61 010e 	sbc.w	r1, r1, lr
 8000b26:	fa01 f707 	lsl.w	r7, r1, r7
 8000b2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b2e:	40f1      	lsrs	r1, r6
 8000b30:	431f      	orrs	r7, r3
 8000b32:	e9c5 7100 	strd	r7, r1, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	f1c2 0320 	rsb	r3, r2, #32
 8000b42:	40d8      	lsrs	r0, r3
 8000b44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b48:	fa21 f303 	lsr.w	r3, r1, r3
 8000b4c:	4091      	lsls	r1, r2
 8000b4e:	4301      	orrs	r1, r0
 8000b50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b54:	fa1f fe8c 	uxth.w	lr, ip
 8000b58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b60:	0c0b      	lsrs	r3, r1, #16
 8000b62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b66:	fb00 f60e 	mul.w	r6, r0, lr
 8000b6a:	429e      	cmp	r6, r3
 8000b6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x260>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b7a:	d22f      	bcs.n	8000bdc <__udivmoddi4+0x2b8>
 8000b7c:	429e      	cmp	r6, r3
 8000b7e:	d92d      	bls.n	8000bdc <__udivmoddi4+0x2b8>
 8000b80:	3802      	subs	r0, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1b9b      	subs	r3, r3, r6
 8000b86:	b289      	uxth	r1, r1
 8000b88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b94:	fb06 f30e 	mul.w	r3, r6, lr
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x28a>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ba4:	d216      	bcs.n	8000bd4 <__udivmoddi4+0x2b0>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d914      	bls.n	8000bd4 <__udivmoddi4+0x2b0>
 8000baa:	3e02      	subs	r6, #2
 8000bac:	4461      	add	r1, ip
 8000bae:	1ac9      	subs	r1, r1, r3
 8000bb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bb4:	e738      	b.n	8000a28 <__udivmoddi4+0x104>
 8000bb6:	462e      	mov	r6, r5
 8000bb8:	4628      	mov	r0, r5
 8000bba:	e705      	b.n	80009c8 <__udivmoddi4+0xa4>
 8000bbc:	4606      	mov	r6, r0
 8000bbe:	e6e3      	b.n	8000988 <__udivmoddi4+0x64>
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	e6f8      	b.n	80009b6 <__udivmoddi4+0x92>
 8000bc4:	454b      	cmp	r3, r9
 8000bc6:	d2a9      	bcs.n	8000b1c <__udivmoddi4+0x1f8>
 8000bc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bd0:	3801      	subs	r0, #1
 8000bd2:	e7a3      	b.n	8000b1c <__udivmoddi4+0x1f8>
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	e7ea      	b.n	8000bae <__udivmoddi4+0x28a>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	e794      	b.n	8000b06 <__udivmoddi4+0x1e2>
 8000bdc:	4640      	mov	r0, r8
 8000bde:	e7d1      	b.n	8000b84 <__udivmoddi4+0x260>
 8000be0:	46d0      	mov	r8, sl
 8000be2:	e77b      	b.n	8000adc <__udivmoddi4+0x1b8>
 8000be4:	3b02      	subs	r3, #2
 8000be6:	4461      	add	r1, ip
 8000be8:	e732      	b.n	8000a50 <__udivmoddi4+0x12c>
 8000bea:	4630      	mov	r0, r6
 8000bec:	e709      	b.n	8000a02 <__udivmoddi4+0xde>
 8000bee:	4464      	add	r4, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	e742      	b.n	8000a7a <__udivmoddi4+0x156>

08000bf4 <__aeabi_idiv0>:
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>:
struct IsChar
    : integral_constant<bool, is_integral<T>::value && sizeof(T) == 1> {};
class ZeroTerminatedRamString {
 public:
  static const size_t typeSortKey = 3;
  ZeroTerminatedRamString(const char* str) : str_(str) {}
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>:
  bool isNull() const {
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
    return !str_;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf0c      	ite	eq
 8000c26:	2301      	moveq	r3, #1
 8000c28:	2300      	movne	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
  }
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>:
  size_t size() const {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    return str_ ? ::strlen(str_) : 0;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x1e>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fabb 	bl	80001c8 <strlen>
 8000c52:	4603      	mov	r3, r0
 8000c54:	e000      	b.n	8000c58 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x20>
 8000c56:	2300      	movs	r3, #0
  }
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>:
  char operator[](size_t i) const {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
  }
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>:
  const char* data() const {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    return str_;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
  }
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>:
    return AdaptedString(reinterpret_cast<const char*>(p));
  }
};
class StaticStringAdapter : public ZeroTerminatedRamString {
 public:
  StaticStringAdapter(const char* str) : ZeroTerminatedRamString(str) {}
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6839      	ldr	r1, [r7, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffa6 	bl	8000bf8 <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>:
  StringStoragePolicy::Link storagePolicy() const {
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
    return StringStoragePolicy::Link();
 8000cbe:	bf00      	nop
  }
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>:
};
template <>
struct StringAdapter<const char*, void> {
  typedef StaticStringAdapter AdaptedString;
  static AdaptedString adapt(const char* p) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    return AdaptedString(p);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ffdc 	bl	8000c98 <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  }
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>:
 public:
  enum Ownership { Copied, Linked };
  JsonString() : data_(0), size_(0), ownership_(Linked) {}
  JsonString(const char* data, Ownership ownership = Linked)
      : data_(data), size_(data ? ::strlen(data) : 0), ownership_(ownership) {}
  JsonString(const char* data, size_t sz, Ownership ownership = Linked)
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	70fb      	strb	r3, [r7, #3]
      : data_(data), size_(sz), ownership_(ownership) {}
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	721a      	strb	r2, [r3, #8]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>:
  const char* c_str() const {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    return data_;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
  }
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>:
  bool isNull() const {
    return !data_;
  }
  bool isLinked() const {
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    return ownership_ == Linked;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7a1b      	ldrb	r3, [r3, #8]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	bf0c      	ite	eq
 8000d40:	2301      	moveq	r3, #1
 8000d42:	2300      	movne	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
  }
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>:
  size_t size() const {
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
    return size_;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
  }
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>:
  explicit operator bool() const {
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
    return data_ != 0;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bf14      	ite	ne
 8000d7a:	2301      	movne	r3, #1
 8000d7c:	2300      	moveq	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
  }
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>:
  size_t memoryUsage() const;
  size_t size() const;
  VariantSlot* addSlot(MemoryPool*);
  void removeSlot(VariantSlot* slot);
  bool copyFrom(const CollectionData& src, MemoryPool* pool);
  VariantSlot* head() const {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    return head_;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
  }
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:
  VariantContent content_;
  uint8_t flags_;
  VariantSlotDiff next_;
  const char* key_;
 public:
  VariantData* data() {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&content_);
 8000dac:	687b      	ldr	r3, [r7, #4]
  }
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:
  const VariantData* data() const {
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const VariantData*>(&content_);
 8000dc2:	687b      	ldr	r3, [r7, #4]
  }
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:
  VariantSlot* next() {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    return next_ ? this + next_ : 0;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x20>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	e000      	b.n	8000df2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x22>
 8000df0:	2300      	movs	r3, #0
  }
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:
  const VariantSlot* next() const {
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
    return const_cast<VariantSlot*>(this)->next();
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffe2 	bl	8000dd0 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8000e0c:	4603      	mov	r3, r0
  }
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>:
    return slot;
  }
  const VariantSlot* next(size_t distance) const {
    return const_cast<VariantSlot*>(this)->next(distance);
  }
  void setNext(VariantSlot* slot) {
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(!slot || slot - this >=
                                    numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(!slot || slot - this <=
                                    numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot ? slot - this : 0);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d005      	beq.n	8000e32 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1c>
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	111b      	asrs	r3, r3, #4
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	e000      	b.n	8000e34 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1e>
 8000e32:	2200      	movs	r2, #0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	815a      	strh	r2, [r3, #10]
  }
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>:
  void setNextNotNull(VariantSlot* slot) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    ARDUINOJSON_ASSERT(slot - this >=
                       numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(slot - this <=
                       numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot - this);
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	111b      	asrs	r3, r3, #4
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	815a      	strh	r2, [r3, #10]
  }
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>:
  void setKey(JsonString k) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	4638      	mov	r0, r7
 8000e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(k);
    if (k.isLinked())
 8000e76:	463b      	mov	r3, r7
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff59 	bl	8000d30 <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d007      	beq.n	8000e94 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x2c>
      flags_ &= VALUE_MASK;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	7a1b      	ldrb	r3, [r3, #8]
 8000e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	721a      	strb	r2, [r3, #8]
 8000e92:	e006      	b.n	8000ea2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x3a>
    else
      flags_ |= OWNED_KEY_BIT;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	721a      	strb	r2, [r3, #8]
    key_ = k.c_str();
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff37 	bl	8000d18 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	60da      	str	r2, [r3, #12]
  }
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>:
  const char* key() const {
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    return key_;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
  }
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>:
  bool ownsKey() const {
    return (flags_ & OWNED_KEY_BIT) != 0;
  }
  void clear() {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    next_ = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	815a      	strh	r2, [r3, #10]
    flags_ = 0;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	721a      	strb	r2, [r3, #8]
    key_ = 0;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  }
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>:
#define JSON_OBJECT_SIZE(NUMBER_OF_ELEMENTS) \
  ((NUMBER_OF_ELEMENTS) * sizeof(ArduinoJson::detail::VariantSlot))
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE
class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
      : begin_(buf),
        left_(buf),
        right_(buf ? buf + capa : 0),
        end_(buf ? buf + capa : 0),
        overflowed_(false) {
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	605a      	str	r2, [r3, #4]
        right_(buf ? buf + capa : 0),
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x26>
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	e000      	b.n	8000f1e <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x28>
 8000f1c:	2300      	movs	r3, #0
        overflowed_(false) {
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	6093      	str	r3, [r2, #8]
        end_(buf ? buf + capa : 0),
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3a>
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	e000      	b.n	8000f32 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3c>
 8000f30:	2300      	movs	r3, #0
        overflowed_(false) {
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	60d3      	str	r3, [r2, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	741a      	strb	r2, [r3, #16]
    ARDUINOJSON_ASSERT(isAligned(begin_));
    ARDUINOJSON_ASSERT(isAligned(right_));
    ARDUINOJSON_ASSERT(isAligned(end_));
  }
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>:
    return size_t(end_ - begin_);
  }
  size_t size() const {
    return size_t(left_ - begin_ + end_ - right_);
  }
  bool overflowed() const {
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
    return overflowed_;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7c1b      	ldrb	r3, [r3, #16]
  }
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>:
  VariantSlot* allocVariant() {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fd6f 	bl	8001a4e <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>
 8000f70:	4603      	mov	r3, r0
  }
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>:
  void clear() {
    left_ = begin_;
    right_ = end_;
    overflowed_ = false;
  }
  bool canAlloc(size_t bytes) const {
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
    return left_ + bytes <= right_;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	441a      	add	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	bf94      	ite	ls
 8000f94:	2301      	movls	r3, #1
 8000f96:	2300      	movhi	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
  }
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>:
  }
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }
  void* allocRight(size_t bytes) {
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) {
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffe1 	bl	8000f7a <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f083 0301 	eor.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x28>
      overflowed_ = true;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	741a      	strb	r2, [r3, #16]
      return 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e008      	b.n	8000fe0 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x3a>
    }
    right_ -= bytes;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	441a      	add	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	609a      	str	r2, [r3, #8]
    return right_;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
  }
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE
class VariantData {
  VariantContent content_;  // must be first to allow cast from array to variant
  uint8_t flags_;
 public:
  VariantData() : flags_(VALUE_IS_NULL) {}
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	721a      	strb	r2, [r3, #8]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>:
    return (flags_ & NUMBER_BIT) != 0;
  }
  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }
  bool isObject() const {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    return (flags_ & VALUE_IS_OBJECT) != 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2db      	uxtb	r3, r3
  }
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>:
  bool isNull() const {
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
    return type() == VALUE_IS_NULL;
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f850 	bl	80010d8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
  }
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>:
  template <typename T>
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setType(VALUE_IS_SIGNED_INTEGER);
    content_.asSignedInteger = value;
  }
  void setNull() {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8001054:	2100      	movs	r1, #0
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f84d 	bl	80010f6 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
  }
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>:
  void setString(JsonString s) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	4638      	mov	r0, r7
 800106e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(s);
    if (s.isLinked())
 8001072:	463b      	mov	r3, r7
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe5b 	bl	8000d30 <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x26>
      setType(VALUE_IS_LINKED_STRING);
 8001080:	2104      	movs	r1, #4
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f000 f837 	bl	80010f6 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
 8001088:	e003      	b.n	8001092 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x2e>
    else
      setType(VALUE_IS_OWNED_STRING);
 800108a:	2105      	movs	r1, #5
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f832 	bl	80010f6 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asString.data = s.c_str();
 8001092:	463b      	mov	r3, r7
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe3f 	bl	8000d18 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 800109a:	4602      	mov	r2, r0
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	601a      	str	r2, [r3, #0]
    content_.asString.size = s.size();
 80010a0:	463b      	mov	r3, r7
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fe55 	bl	8000d52 <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	605a      	str	r2, [r3, #4]
  }
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>:
  CollectionData& toArray() {
    setType(VALUE_IS_ARRAY);
    content_.asCollection.clear();
    return content_.asCollection;
  }
  CollectionData& toObject() {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 80010be:	2120      	movs	r1, #32
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f818 	bl	80010f6 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asCollection.clear();
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 f8e3 	bl	8001294 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>
    return content_.asCollection;
 80010ce:	687b      	ldr	r3, [r7, #4]
  }
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>:
    if (flags_ & OWNED_VALUE_BIT)
      content_.asString.data += stringDistance;
    if (flags_ & COLLECTION_MASK)
      content_.asCollection.movePointers(stringDistance, variantDistance);
  }
  uint8_t type() const {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    return flags_ & VALUE_MASK;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7a1b      	ldrb	r3, [r3, #8]
 80010e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010e8:	b2db      	uxtb	r3, r3
  }
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>:
      return true;
    }
    return storeString(pool, value, VariantStringSetter(this));
  }
 private:
  void setType(uint8_t t) {
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	70fb      	strb	r3, [r7, #3]
    flags_ &= OWNED_KEY_BIT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7a1b      	ldrb	r3, [r3, #8]
 8001106:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800110a:	b2da      	uxtb	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	721a      	strb	r2, [r3, #8]
    flags_ |= t;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7a1a      	ldrb	r2, [r3, #8]
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	4313      	orrs	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	721a      	strb	r2, [r3, #8]
  }
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>:
  struct VariantStringSetter {
    VariantStringSetter(VariantData* instance) : instance_(instance) {}
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>:
class JsonVariantConst : public detail::VariantTag,
                         public detail::VariantOperators<JsonVariantConst> {
  friend class detail::VariantAttorney;
 public:
  JsonVariantConst() : data_(0) {}
  explicit JsonVariantConst(const detail::VariantData* data) : data_(data) {}
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>:
      typename detail::enable_if<detail::IsString<TChar*>::value, bool>::type
      containsKey(TChar* key) const {
    return variantGetMember(getData(), detail::adaptString(key)) != 0;
  }
 protected:
  const detail::VariantData* getData() const {
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
    return data_;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
  }
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>:
class JsonVariant : public detail::VariantRefBase<JsonVariant>,
                    public detail::VariantOperators<JsonVariant> {
  friend class detail::VariantAttorney;
 public:
  JsonVariant() : data_(0), pool_(0) {}
  JsonVariant(detail::MemoryPool* pool, detail::VariantData* data)
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
      : data_(data), pool_(pool) {}
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>:
  }
};
ARDUINOJSON_END_PUBLIC_NAMESPACE
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE
struct SlotKeySetter {
  SlotKeySetter(VariantSlot* instance) : instance_(instance) {}
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>:
    return getVariant();
  }
 protected:
  JsonDocument() : pool_(0, 0) {}
  JsonDocument(detail::MemoryPool pool) : pool_(pool) {}
  JsonDocument(char* buf, size_t capa) : pool_(buf, capa) {}
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fe8e 	bl	8000ef6 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3318      	adds	r3, #24
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff02 	bl	8000fe8 <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>:
    pool_ = pool;
  }
  JsonVariant getVariant() {
    return JsonVariant(&pool_, &data_);
  }
  JsonVariantConst getVariant() const {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
    return JsonVariantConst(&data_);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f103 0218 	add.w	r2, r3, #24
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ffa0 	bl	8001148 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8001208:	68fb      	ldr	r3, [r7, #12]
  }
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>:
  detail::MemoryPool pool_;
  detail::VariantData data_;
 protected:
  detail::MemoryPool* getPool() {
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
    return &pool_;
 800121a:	687b      	ldr	r3, [r7, #4]
  }
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>:
    return &data_;
  }
  const detail::VariantData* getData() const {
    return &data_;
  }
  detail::VariantData* getOrCreateData() {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    return &data_;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3318      	adds	r3, #24
  }
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>:
copyArray(const TSource& src, T& dst) {
  return copyArray(src.template as<JsonArrayConst>(), dst);
}
ARDUINOJSON_END_PUBLIC_NAMESPACE
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE
inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f7ff fe89 	bl	8000f62 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>
 8001250:	60f8      	str	r0, [r7, #12]
  if (!slot)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x1c>
    return 0;
 8001258:	2300      	movs	r3, #0
 800125a:	e017      	b.n	800128c <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x4c>
  if (tail_) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d009      	beq.n	8001278 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x38>
    ARDUINOJSON_ASSERT(pool->owns(tail_));  // Can't alter a linked array/object
    tail_->setNextNotNull(slot);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	68f9      	ldr	r1, [r7, #12]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fdea 	bl	8000e44 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>
    tail_ = slot;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	e005      	b.n	8001284 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x44>
  } else {
    head_ = slot;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	601a      	str	r2, [r3, #0]
    tail_ = slot;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	605a      	str	r2, [r3, #4]
  }
  slot->clear();
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f7ff fe23 	bl	8000ed0 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>
  return slot;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>:
    removeSlot(slot);
    return 0;
  }
  return slot->data();
}
inline void CollectionData::clear() {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  head_ = 0;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
  tail_ = 0;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>:
inline VariantSlot* CollectionData::getSlot(size_t index) const {
  if (!head_)
    return 0;
  return head_->next(index);
}
inline VariantSlot* CollectionData::getPreviousSlot(VariantSlot* target) const {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  VariantSlot* current = head_;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]
  while (current) {
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00c      	beq.n	80012e4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x30>
    VariantSlot* next = current->next();
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f7ff fd80 	bl	8000dd0 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 80012d0:	60b8      	str	r0, [r7, #8]
    if (next == target)
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d101      	bne.n	80012de <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x2a>
      return current;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	e003      	b.n	80012e6 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x32>
    current = next;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	60fb      	str	r3, [r7, #12]
  while (current) {
 80012e2:	e7ef      	b.n	80012c4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x10>
  }
  return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>:
    slot = addSlot(pool);
    index--;
  }
  return slotData(slot);
}
inline void CollectionData::removeSlot(VariantSlot* slot) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
  if (!slot)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d01a      	beq.n	8001334 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x46>
    return;
  VariantSlot* prev = getPreviousSlot(slot);
 80012fe:	6839      	ldr	r1, [r7, #0]
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ffd7 	bl	80012b4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>
 8001306:	60f8      	str	r0, [r7, #12]
  VariantSlot* next = slot->next();
 8001308:	6838      	ldr	r0, [r7, #0]
 800130a:	f7ff fd61 	bl	8000dd0 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800130e:	60b8      	str	r0, [r7, #8]
  if (prev)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x32>
    prev->setNext(next);
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f7ff fd7c 	bl	8000e16 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>
 800131e:	e002      	b.n	8001326 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x38>
  else
    head_ = next;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	601a      	str	r2, [r3, #0]
  if (!next)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    tail_ = prev;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	e000      	b.n	8001336 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    return;
 8001334:	bf00      	nop
}
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>:
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return MemberProxy<TDerived, TString>(derived(), key);
}
class EscapeSequence {
 public:
  static char escapeChar(char c) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8001346:	2001      	movs	r0, #1
 8001348:	f000 f816 	bl	8001378 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>
 800134c:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x2e>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	429a      	cmp	r2, r3
 8001360:	d003      	beq.n	800136a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x2e>
      p += 2;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3302      	adds	r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8001368:	e7f1      	b.n	800134e <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x12>
    }
    return p[0];
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	781b      	ldrb	r3, [r3, #0]
  }
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>:
        return p[1];
      p += 2;
    }
  }
 private:
  static const char* escapeTable(bool excludeSolidus) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
    return &"//\"\"\\\\b\bf\fn\nr\rt\t"[excludeSolidus ? 2 : 0];
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x14>
 8001388:	2302      	movs	r3, #2
 800138a:	e000      	b.n	800138e <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x16>
 800138c:	2300      	movs	r3, #0
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x28>)
 8001390:	4413      	add	r3, r2
  }
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	08005d90 	.word	0x08005d90

080013a4 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriterC1EPcj>:
 private:
  TDestination* dest_;
};
class StaticStringWriter {
 public:
  StaticStringWriter(char* buf, size_t size) : end(buf + size), p(buf) {}
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	441a      	add	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEh>:
  size_t write(uint8_t c) {
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70fb      	strb	r3, [r7, #3]
    if (p >= end)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d301      	bcc.n	80013ea <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEh+0x1c>
      return 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e007      	b.n	80013fa <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEh+0x2c>
    *p++ = static_cast<char>(c);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	1c59      	adds	r1, r3, #1
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6051      	str	r1, [r2, #4]
 80013f4:	78fa      	ldrb	r2, [r7, #3]
 80013f6:	701a      	strb	r2, [r3, #0]
    return 1;
 80013f8:	2301      	movs	r3, #1
  }
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj>:
  size_t write(const uint8_t* s, size_t n) {
 8001406:	b480      	push	{r7}
 8001408:	b087      	sub	sp, #28
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
    char* begin = p;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	617b      	str	r3, [r7, #20]
    while (p < end && n > 0) {
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d210      	bcs.n	8001446 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj+0x40>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00d      	beq.n	8001446 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj+0x40>
      *p++ = static_cast<char>(*s++);
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	1c53      	adds	r3, r2, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	1c58      	adds	r0, r3, #1
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	6048      	str	r0, [r1, #4]
 800143a:	7812      	ldrb	r2, [r2, #0]
 800143c:	701a      	strb	r2, [r3, #0]
      n--;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3b01      	subs	r3, #1
 8001442:	607b      	str	r3, [r7, #4]
    while (p < end && n > 0) {
 8001444:	e7e8      	b.n	8001418 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj+0x12>
    }
    return size_t(p - begin);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	1ad3      	subs	r3, r2, r3
  }
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>:
    return data && data->isFloat();
  }
};
template <>
struct Converter<const char*> : private detail::VariantAttorney {
  static void toJson(const char* src, JsonVariant dst) {
 800145a:	b590      	push	{r4, r7, lr}
 800145c:	b087      	sub	sp, #28
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	e883 0006 	stmia.w	r3, {r1, r2}
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	613b      	str	r3, [r7, #16]
    return data_;
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	681c      	ldr	r4, [r3, #0]
    return client.getData();
 8001470:	bf00      	nop
    variantSetString(getData(dst), detail::adaptString(src), getPool(dst));
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 faf8 	bl	8001a68 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8001478:	4601      	mov	r1, r0
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	617b      	str	r3, [r7, #20]
    return pool_;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	685b      	ldr	r3, [r3, #4]
    return client.getPool();
 8001482:	bf00      	nop
    variantSetString(getData(dst), detail::adaptString(src), getPool(dst));
 8001484:	461a      	mov	r2, r3
 8001486:	4620      	mov	r0, r4
 8001488:	f000 fafa 	bl	8001a80 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>
  }
 800148c:	bf00      	nop
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}

08001494 <_ZN11ArduinoJson8V6213HB219serializeJsonPrettyENS0_16JsonVariantConstEPvj>:
size_t serializeJsonPretty(JsonVariantConst source, TDestination& destination) {
  using namespace ArduinoJson::detail;
  return serialize<PrettyJsonSerializer>(source, destination);
}
inline size_t serializeJsonPretty(JsonVariantConst source, void* buffer,
                                  size_t bufferSize) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  using namespace ArduinoJson::detail;
  return serialize<PrettyJsonSerializer>(source, buffer, bufferSize);
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 fb05 	bl	8001ab4 <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_20PrettyJsonSerializerEEENS1_9enable_ifIXsrT_INS1_18StaticStringWriterEE12producesTextEjE4typeENS0_16JsonVariantConstEPvj>
 80014aa:	4603      	mov	r3, r0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014b8:	b0f2      	sub	sp, #456	; 0x1c8
 80014ba:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80014bc:	f001 fe60 	bl	8003180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c0:	f000 f9b0 	bl	8001824 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c4:	f000 fa66 	bl	8001994 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80014c8:	f000 fa30 	bl	800192c <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 80014cc:	f000 f9f0 	bl	80018b0 <_ZL12MX_SPI1_Initv>
//  for (uint16_t i = 0; i < sizeof(random_msg); i++) {
//    buffer[i] = random_msg[i];
//  }

//
  StaticJsonDocument<200> doc;
 80014d0:	463b      	mov	r3, r7
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fb11 	bl	8001afa <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj200EEC1Ev>
 80014d8:	4bcb      	ldr	r3, [pc, #812]	; (8001808 <main+0x354>)
 80014da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014de:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014e6:	463b      	mov	r3, r7
 80014e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      : upstream_(upstream), key_(key) {}
 80014f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014f8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001502:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001506:	605a      	str	r2, [r3, #4]
    return {*this, key};
 8001508:	bf00      	nop
 800150a:	4bc0      	ldr	r3, [pc, #768]	; (800180c <main+0x358>)
 800150c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001510:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001514:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001518:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800151c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001520:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001524:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001528:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800152c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    return VariantAttorney::getPool(derived());
 8001530:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8001534:	f000 fd4b 	bl	8001fce <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8001538:	4603      	mov	r3, r0
 800153a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800153e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001542:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    return VariantAttorney::getPool(upstream_);
 8001546:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    return client.getPool();
 8001550:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8001554:	f7ff fe5d 	bl	8001212 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8001558:	4604      	mov	r4, r0
 800155a:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 800155c:	bf00      	nop
    return client.getPool();
 800155e:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8001560:	bf00      	nop
 8001562:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001566:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    return VariantAttorney::getOrCreateData(derived());
 800156a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800156e:	f000 fd2e 	bl	8001fce <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8001572:	4603      	mov	r3, r0
 8001574:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001578:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800157c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8001580:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    return client.getOrCreateData();
 800158a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800158e:	f7ff fe4b 	bl	8001228 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 8001592:	4605      	mov	r5, r0
 8001594:	bf00      	nop
                                 adaptString(key_),
 8001596:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800159a:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fa63 	bl	8001a68 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 80015a2:	4606      	mov	r6, r0
 80015a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    return client.getPool();
 80015ae:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80015b2:	f7ff fe2e 	bl	8001212 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	bf00      	nop
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 80015ba:	461a      	mov	r2, r3
 80015bc:	4631      	mov	r1, r6
 80015be:	4628      	mov	r0, r5
 80015c0:	f001 fb30 	bl	8002c24 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 80015c4:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 80015c6:	bf00      	nop
    return client.getOrCreateData();
 80015c8:	bf00      	nop
    return VariantAttorney::getOrCreateData(derived());
 80015ca:	bf00      	nop
  return JsonVariant(getPool(), getOrCreateData());
 80015cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015d0:	4621      	mov	r1, r4
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fdd3 	bl	800117e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T*>::toJson(value, getOrCreateVariant());
 80015d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015e0:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 80015e4:	f7ff ff39 	bl	800145a <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>
 80015e8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80015ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    return VariantAttorney::getPool(derived());
 80015f0:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80015f4:	f000 fceb 	bl	8001fce <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80015fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001602:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    return VariantAttorney::getPool(upstream_);
 8001606:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    return client.getPool();
 8001610:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001614:	f7ff fdfd 	bl	8001212 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8001618:	4603      	mov	r3, r0
 800161a:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 800161c:	bf00      	nop
    return client.getPool();
 800161e:	bf00      	nop
    return VariantAttorney::getPool(derived());
 8001620:	bf00      	nop
    MemoryPool* pool = getPool();
 8001622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    return pool && !pool->overflowed();
 8001626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <main+0x18c>
 800162e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001632:	f7ff fc8a 	bl	8000f4a <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 8001636:	4603      	mov	r3, r0
 8001638:	f083 0301 	eor.w	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	4b73      	ldr	r3, [pc, #460]	; (8001810 <main+0x35c>)
 8001642:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001646:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800164a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800164e:	463b      	mov	r3, r7
 8001650:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001654:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001658:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      : upstream_(upstream), key_(key) {}
 800165c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001660:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800166a:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800166e:	605a      	str	r2, [r3, #4]
    return {*this, key};
 8001670:	bf00      	nop

  // Add values in the document
  doc["sensor"] = "gps";
  doc["time"] = 1351824120;
 8001672:	4b68      	ldr	r3, [pc, #416]	; (8001814 <main+0x360>)
 8001674:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001678:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800167c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001680:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001684:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    Converter<T>::toJson(value, getOrCreateVariant());
 8001688:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800168c:	681c      	ldr	r4, [r3, #0]
 800168e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001692:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001696:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800169a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    return VariantAttorney::getPool(derived());
 800169e:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80016a2:	f000 fc94 	bl	8001fce <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80016ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016b0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    return VariantAttorney::getPool(upstream_);
 80016b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    return client.getPool();
 80016be:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 80016c2:	f7ff fda6 	bl	8001212 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 80016c6:	4605      	mov	r5, r0
 80016c8:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 80016ca:	bf00      	nop
    return client.getPool();
 80016cc:	bf00      	nop
    return VariantAttorney::getPool(derived());
 80016ce:	bf00      	nop
 80016d0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80016d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    return VariantAttorney::getOrCreateData(derived());
 80016d8:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 80016dc:	f000 fc77 	bl	8001fce <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016e6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016ea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 80016ee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    return client.getOrCreateData();
 80016f8:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 80016fc:	f7ff fd94 	bl	8001228 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 8001700:	4606      	mov	r6, r0
 8001702:	bf00      	nop
                                 adaptString(key_),
 8001704:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001708:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f9ac 	bl	8001a68 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8001710:	4680      	mov	r8, r0
 8001712:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    return client.getPool();
 800171c:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8001720:	f7ff fd77 	bl	8001212 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8001724:	4603      	mov	r3, r0
 8001726:	bf00      	nop
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8001728:	461a      	mov	r2, r3
 800172a:	4641      	mov	r1, r8
 800172c:	4630      	mov	r0, r6
 800172e:	f001 fa79 	bl	8002c24 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 8001732:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 8001734:	bf00      	nop
    return client.getOrCreateData();
 8001736:	bf00      	nop
    return VariantAttorney::getOrCreateData(derived());
 8001738:	bf00      	nop
  return JsonVariant(getPool(), getOrCreateData());
 800173a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800173e:	4629      	mov	r1, r5
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fd1c 	bl	800117e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 8001746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800174a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800174e:	4620      	mov	r0, r4
 8001750:	f000 fad6 	bl	8001d00 <_ZN11ArduinoJson8V6213HB29ConverterIivE6toJsonEiNS0_11JsonVariantE>
 8001754:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001758:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    return VariantAttorney::getPool(derived());
 800175c:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001760:	f000 fc35 	bl	8001fce <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8001764:	4603      	mov	r3, r0
 8001766:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800176a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800176e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    return VariantAttorney::getPool(upstream_);
 8001772:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    return client.getPool();
 800177c:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8001780:	f7ff fd47 	bl	8001212 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8001784:	4603      	mov	r3, r0
 8001786:	bf00      	nop
    return VariantAttorney::getPool(upstream_);
 8001788:	bf00      	nop
    return client.getPool();
 800178a:	bf00      	nop
    return VariantAttorney::getPool(derived());
 800178c:	bf00      	nop
    MemoryPool* pool = getPool();
 800178e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    return pool && !pool->overflowed();
 8001792:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <main+0x2f8>
 800179a:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800179e:	f7ff fbd4 	bl	8000f4a <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f083 0301 	eor.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
    return getVariant();
 80017ac:	463b      	mov	r3, r7
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fd1d 	bl	80011ee <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>
 80017b4:	4603      	mov	r3, r0


  serializeJsonPretty(doc, (char*)buffer,  kDataSize);
 80017b6:	22c8      	movs	r2, #200	; 0xc8
 80017b8:	4917      	ldr	r1, [pc, #92]	; (8001818 <main+0x364>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe6a 	bl	8001494 <_ZN11ArduinoJson8V6213HB219serializeJsonPrettyENS0_16JsonVariantConstEPvj>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // Make sure the GPIO is set to low
    HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2108      	movs	r1, #8
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c8:	f002 f83e 	bl	8003848 <HAL_GPIO_WritePin>

    // Wait for the Emulator to be ready.
    if (HAL_GPIO_ReadPin(PL_Wait_GPIO_Port, PL_Wait_Pin) == GPIO_PIN_SET) {
 80017cc:	2101      	movs	r1, #1
 80017ce:	4813      	ldr	r0, [pc, #76]	; (800181c <main+0x368>)
 80017d0:	f002 f822 	bl	8003818 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	bf0c      	ite	eq
 80017da:	2301      	moveq	r3, #1
 80017dc:	2300      	movne	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ed      	beq.n	80017c0 <main+0x30c>
      // To transmit the data we need to call this function
      HAL_StatusTypeDef status = HAL_SPI_Transmit_IT(&hspi1, buffer, kDataSize);
 80017e4:	22c8      	movs	r2, #200	; 0xc8
 80017e6:	490c      	ldr	r1, [pc, #48]	; (8001818 <main+0x364>)
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <main+0x36c>)
 80017ea:	f003 fb5d 	bl	8004ea8 <HAL_SPI_Transmit_IT>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
      // then we can toggle the GPIO to let the emulator know we are ready to
      // transmit
      HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2108      	movs	r1, #8
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f002 f824 	bl	8003848 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8001800:	200a      	movs	r0, #10
 8001802:	f001 fd23 	bl	800324c <HAL_Delay>
    }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001806:	e7db      	b.n	80017c0 <main+0x30c>
 8001808:	08005da4 	.word	0x08005da4
 800180c:	08005dac 	.word	0x08005dac
 8001810:	08005db0 	.word	0x08005db0
 8001814:	509332f8 	.word	0x509332f8
 8001818:	20000114 	.word	0x20000114
 800181c:	48000400 	.word	0x48000400
 8001820:	20000028 	.word	0x20000028

08001824 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b090      	sub	sp, #64	; 0x40
 8001828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182a:	f107 0318 	add.w	r3, r7, #24
 800182e:	2228      	movs	r2, #40	; 0x28
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fa96 	bl	8005d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184a:	2301      	movs	r3, #1
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184e:	2310      	movs	r3, #16
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001856:	f107 0318 	add.w	r3, r7, #24
 800185a:	4618      	mov	r0, r3
 800185c:	f002 f80c 	bl	8003878 <HAL_RCC_OscConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf14      	ite	ne
 8001866:	2301      	movne	r3, #1
 8001868:	2300      	moveq	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <_Z18SystemClock_Configv+0x50>
    Error_Handler();
 8001870:	f000 f8e8 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001874:	230f      	movs	r3, #15
 8001876:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f003 f831 	bl	80048f4 <HAL_RCC_ClockConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <_Z18SystemClock_Configv+0x82>
    Error_Handler();
 80018a2:	f000 f8cf 	bl	8001a44 <Error_Handler>
  }
}
 80018a6:	bf00      	nop
 80018a8:	3740      	adds	r7, #64	; 0x40
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <_ZL12MX_SPI1_Initv+0x78>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018f6:	2207      	movs	r2, #7
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <_ZL12MX_SPI1_Initv+0x74>)
 8001908:	f003 fa2a 	bl	8004d60 <HAL_SPI_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf14      	ite	ne
 8001912:	2301      	movne	r3, #1
 8001914:	2300      	moveq	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <_ZL12MX_SPI1_Initv+0x70>
    Error_Handler();
 800191c:	f000 f892 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000028 	.word	0x20000028
 8001928:	40013000 	.word	0x40013000

0800192c <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001938:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800193c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 800196e:	4807      	ldr	r0, [pc, #28]	; (800198c <_ZL19MX_USART2_UART_Initv+0x60>)
 8001970:	f003 fe39 	bl	80055e6 <HAL_UART_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <_ZL19MX_USART2_UART_Initv+0x5c>
    Error_Handler();
 8001984:	f000 f85e 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2000008c 	.word	0x2000008c
 8001990:	40004400 	.word	0x40004400

08001994 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <_ZL12MX_GPIO_Initv+0xa8>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <_ZL12MX_GPIO_Initv+0xa8>)
 80019b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b4:	6153      	str	r3, [r2, #20]
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <_ZL12MX_GPIO_Initv+0xa8>)
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <_ZL12MX_GPIO_Initv+0xa8>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <_ZL12MX_GPIO_Initv+0xa8>)
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	6153      	str	r3, [r2, #20]
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <_ZL12MX_GPIO_Initv+0xa8>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <_ZL12MX_GPIO_Initv+0xa8>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <_ZL12MX_GPIO_Initv+0xa8>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <_ZL12MX_GPIO_Initv+0xa8>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PL_GPIO_Port, PL_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2108      	movs	r1, #8
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f001 ff25 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PL_Pin */
  GPIO_InitStruct.Pin = PL_Pin;
 80019fe:	2308      	movs	r3, #8
 8001a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PL_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a18:	f001 fd8c 	bl	8003534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PL_Wait_Pin */
  GPIO_InitStruct.Pin = PL_Wait_Pin;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PL_Wait_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4804      	ldr	r0, [pc, #16]	; (8001a40 <_ZL12MX_GPIO_Initv+0xac>)
 8001a30:	f001 fd80 	bl	8003534 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000400 	.word	0x48000400

08001a44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>

08001a4e <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8001a56:	2110      	movs	r1, #16
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff faa4 	bl	8000fa6 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>
 8001a5e:	4603      	mov	r3, r0
  }
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return StringAdapter<TChar*>::adapt(p);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff f92b 	bl	8000ccc <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>
 8001a76:	4603      	mov	r3, r0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline bool variantSetString(VariantData* var, TAdaptedString value,
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  return var != 0 ? var->setString(value, pool) : 0;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x20>
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f83f 	bl	8001b1a <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	e000      	b.n	8001aa2 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x22>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_20PrettyJsonSerializerEEENS1_9enable_ifIXsrT_INS1_18StaticStringWriterEE12producesTextEjE4typeENS0_16JsonVariantConstEPvj>:
serialize(ArduinoJson::JsonVariantConst source, void* buffer,
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  StaticStringWriter writer(reinterpret_cast<char*>(buffer), bufferSize);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fc6b 	bl	80013a4 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriterC1EPcj>
  size_t n = doSerialize<TSerializer>(source, writer);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f87c 	bl	8001bd4 <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_20PrettyJsonSerializerENS1_18StaticStringWriterEEEjNS0_16JsonVariantConstET0_>
 8001adc:	61f8      	str	r0, [r7, #28]
  if (n < bufferSize)
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d204      	bcs.n	8001af0 <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_20PrettyJsonSerializerEEENS1_9enable_ifIXsrT_INS1_18StaticStringWriterEE12producesTextEjE4typeENS0_16JsonVariantConstEPvj+0x3c>
    reinterpret_cast<char*>(buffer)[n] = 0;
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	4413      	add	r3, r2
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
  return n;
 8001af0:	69fb      	ldr	r3, [r7, #28]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj200EEC1Ev>:
  StaticJsonDocument() : JsonDocument(buffer_, capacity_) {}
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3328      	adds	r3, #40	; 0x28
 8001b08:	22c8      	movs	r2, #200	; 0xc8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff fb59 	bl	80011c2 <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>:
  inline bool setString(TAdaptedString value, MemoryPool* pool) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
    if (value.isNull()) {
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f873 	bl	8000c16 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x26>
      setNull();
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff fa88 	bl	800104c <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
      return true;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e00c      	b.n	8001b5a <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x40>
    return storeString(pool, value, VariantStringSetter(this));
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff faef 	bl	800112a <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f871 	bl	8001c38 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>
 8001b56:	4603      	mov	r3, r0
 8001b58:	bf00      	nop
  }
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4904      	ldr	r1, [pc, #16]	; (8001b80 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f878 	bl	8001c64 <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 8001b74:	687b      	ldr	r3, [r7, #4]
  }
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	08005e00 	.word	0x08005e00

08001b84 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f868 	bl	8001c64 <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 8001b94:	687b      	ldr	r3, [r7, #4]
  }
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	08005e48 	.word	0x08005e48

08001ba4 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>:
  T operator[](intptr_t index) const {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f862 	bl	8001c82 <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>
 8001bbe:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc2:	eef0 7a60 	vmov.f32	s15, s1
  }
 8001bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bca:	eef0 0a67 	vmov.f32	s1, s15
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_20PrettyJsonSerializerENS1_18StaticStringWriterEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	e883 0006 	stmia.w	r3, {r1, r2}
  TSerializer<TWriter> serializer(writer);
 8001be2:	f107 0010 	add.w	r0, r7, #16
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001bec:	f000 f85b 	bl	8001ca6 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEEC1ES3_>
    return client.getData();
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fab6 	bl	8001166 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	bf00      	nop
  return variantAccept(VariantAttorney::getData(source), serializer);
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f000 f863 	bl	8001cd0 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeEPKNS1_11VariantDataERS6_>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEEC1ES3_>:
  JsonSerializer(TWriter writer) : formatter_(writer) {}
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	e883 0006 	stmia.w	r3, {r1, r2}
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c2a:	f000 f881 	bl	8001d30 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEEC1ES3_>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>:
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff f834 	bl	8000cb6 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4622      	mov	r2, r4
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f891 	bl	8001d7c <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 8001c5a:	4603      	mov	r3, r0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}

08001c64 <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return *p;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c94:	eeb0 0a47 	vmov.f32	s0, s14
 8001c98:	eef0 0a67 	vmov.f32	s1, s15
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEEC1ES3_>:
  PrettyJsonSerializer(TWriter writer) : base(writer), nesting_(0) {}
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	e883 0006 	stmia.w	r3, {r1, r2}
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001cbc:	f7ff ffaa 	bl	8001c14 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEEC1ES3_>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	731a      	strb	r2, [r3, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeEPKNS1_11VariantDataERS6_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  if (var != 0)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeEPKNS1_11VariantDataERS6_+0x1c>
    return var->accept(visitor);
 8001ce0:	6839      	ldr	r1, [r7, #0]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f876 	bl	8001dd4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	e005      	b.n	8001cf8 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeEPKNS1_11VariantDataERS6_+0x28>
    return visitor.visitNull();
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f830 	bl	8001d54 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE9visitNullEv>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	bf00      	nop
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_ZN11ArduinoJson8V6213HB29ConverterIivE6toJsonEiNS0_11JsonVariantE>:
  static void toJson(T src, JsonVariant dst) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	e883 0006 	stmia.w	r3, {r1, r2}
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	613b      	str	r3, [r7, #16]
    return data_;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	681b      	ldr	r3, [r3, #0]
    return client.getData();
 8001d16:	bf00      	nop
    auto data = getData(dst);
 8001d18:	617b      	str	r3, [r7, #20]
    if (data)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <_ZN11ArduinoJson8V6213HB29ConverterIivE6toJsonEiNS0_11JsonVariantE+0x28>
      data->setInteger(src);
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f000 f95e 	bl	8001fe4 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>
  }
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEEC1ES3_>:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	e883 0006 	stmia.w	r3, {r1, r2}
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1d3a      	adds	r2, r7, #4
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f92d 	bl	8001fa4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEEC1ERS3_>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE9visitNullEv>:
  size_t visitNull() {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    formatter_.writeRaw("null");
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4906      	ldr	r1, [pc, #24]	; (8001d78 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE9visitNullEv+0x24>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f9cb 	bl	80020fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
    return bytesWritten();
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f9db 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8001d6c:	4603      	mov	r3, r0
  }
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	08005db8 	.word	0x08005db8

08001d7c <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	713a      	strb	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ff76 	bl	8000c80 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 8001d94:	4604      	mov	r4, r0
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff4c 	bl	8000c38 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f107 0014 	add.w	r0, r7, #20
 8001da6:	2301      	movs	r3, #1
 8001da8:	4621      	mov	r1, r4
 8001daa:	f7fe ff9e 	bl	8000cea <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 8001dae:	4638      	mov	r0, r7
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db6:	f000 f9c1 	bl	800213c <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe ff29 	bl	8000c16 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f083 0301 	eor.w	r3, r3, #1
 8001dca:	b2db      	uxtb	r3, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3724      	adds	r7, #36	; 0x24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}

08001dd4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
    switch (type()) {
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff f97a 	bl	80010d8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 8001de4:	4603      	mov	r3, r0
 8001de6:	3b02      	subs	r3, #2
 8001de8:	2b3e      	cmp	r3, #62	; 0x3e
 8001dea:	f200 80d0 	bhi.w	8001f8e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x1ba>
 8001dee:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x20>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001f3b 	.word	0x08001f3b
 8001df8:	08001f3b 	.word	0x08001f3b
 8001dfc:	08001f27 	.word	0x08001f27
 8001e00:	08001f27 	.word	0x08001f27
 8001e04:	08001f73 	.word	0x08001f73
 8001e08:	08001f8f 	.word	0x08001f8f
 8001e0c:	08001f61 	.word	0x08001f61
 8001e10:	08001f8f 	.word	0x08001f8f
 8001e14:	08001f4f 	.word	0x08001f4f
 8001e18:	08001f8f 	.word	0x08001f8f
 8001e1c:	08001ef1 	.word	0x08001ef1
 8001e20:	08001f8f 	.word	0x08001f8f
 8001e24:	08001f8f 	.word	0x08001f8f
 8001e28:	08001f8f 	.word	0x08001f8f
 8001e2c:	08001f8f 	.word	0x08001f8f
 8001e30:	08001f8f 	.word	0x08001f8f
 8001e34:	08001f8f 	.word	0x08001f8f
 8001e38:	08001f8f 	.word	0x08001f8f
 8001e3c:	08001f8f 	.word	0x08001f8f
 8001e40:	08001f8f 	.word	0x08001f8f
 8001e44:	08001f8f 	.word	0x08001f8f
 8001e48:	08001f8f 	.word	0x08001f8f
 8001e4c:	08001f8f 	.word	0x08001f8f
 8001e50:	08001f8f 	.word	0x08001f8f
 8001e54:	08001f8f 	.word	0x08001f8f
 8001e58:	08001f8f 	.word	0x08001f8f
 8001e5c:	08001f8f 	.word	0x08001f8f
 8001e60:	08001f8f 	.word	0x08001f8f
 8001e64:	08001f8f 	.word	0x08001f8f
 8001e68:	08001f8f 	.word	0x08001f8f
 8001e6c:	08001f19 	.word	0x08001f19
 8001e70:	08001f8f 	.word	0x08001f8f
 8001e74:	08001f8f 	.word	0x08001f8f
 8001e78:	08001f8f 	.word	0x08001f8f
 8001e7c:	08001f8f 	.word	0x08001f8f
 8001e80:	08001f8f 	.word	0x08001f8f
 8001e84:	08001f8f 	.word	0x08001f8f
 8001e88:	08001f8f 	.word	0x08001f8f
 8001e8c:	08001f8f 	.word	0x08001f8f
 8001e90:	08001f8f 	.word	0x08001f8f
 8001e94:	08001f8f 	.word	0x08001f8f
 8001e98:	08001f8f 	.word	0x08001f8f
 8001e9c:	08001f8f 	.word	0x08001f8f
 8001ea0:	08001f8f 	.word	0x08001f8f
 8001ea4:	08001f8f 	.word	0x08001f8f
 8001ea8:	08001f8f 	.word	0x08001f8f
 8001eac:	08001f8f 	.word	0x08001f8f
 8001eb0:	08001f8f 	.word	0x08001f8f
 8001eb4:	08001f8f 	.word	0x08001f8f
 8001eb8:	08001f8f 	.word	0x08001f8f
 8001ebc:	08001f8f 	.word	0x08001f8f
 8001ec0:	08001f8f 	.word	0x08001f8f
 8001ec4:	08001f8f 	.word	0x08001f8f
 8001ec8:	08001f8f 	.word	0x08001f8f
 8001ecc:	08001f8f 	.word	0x08001f8f
 8001ed0:	08001f8f 	.word	0x08001f8f
 8001ed4:	08001f8f 	.word	0x08001f8f
 8001ed8:	08001f8f 	.word	0x08001f8f
 8001edc:	08001f8f 	.word	0x08001f8f
 8001ee0:	08001f8f 	.word	0x08001f8f
 8001ee4:	08001f8f 	.word	0x08001f8f
 8001ee8:	08001f8f 	.word	0x08001f8f
 8001eec:	08001f0b 	.word	0x08001f0b
        return visitor.visitFloat(content_.asFloat);
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	ed93 7b00 	vldr	d7, [r3]
 8001ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8001efc:	eef0 0a67 	vmov.f32	s1, s15
 8001f00:	4610      	mov	r0, r2
 8001f02:	f000 f883 	bl	800200c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE10visitFloatEd>
 8001f06:	4603      	mov	r3, r0
 8001f08:	e047      	b.n	8001f9a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x1c6>
        return visitor.visitArray(content_.asCollection);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	6838      	ldr	r0, [r7, #0]
 8001f10:	f000 f932 	bl	8002178 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE>
 8001f14:	4603      	mov	r3, r0
 8001f16:	e040      	b.n	8001f9a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x1c6>
        return visitor.visitObject(content_.asCollection);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6838      	ldr	r0, [r7, #0]
 8001f1e:	f000 f987 	bl	8002230 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE>
 8001f22:	4603      	mov	r3, r0
 8001f24:	e039      	b.n	8001f9a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x1c6>
        return visitor.visitString(content_.asString.data,
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6819      	ldr	r1, [r3, #0]
                                   content_.asString.size);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(content_.asString.data,
 8001f30:	461a      	mov	r2, r3
 8001f32:	f000 f87f 	bl	8002034 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitStringEPKcj>
 8001f36:	4603      	mov	r3, r0
                                   content_.asString.size);
 8001f38:	e02f      	b.n	8001f9a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x1c6>
        return visitor.visitRawJson(content_.asString.data,
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6819      	ldr	r1, [r3, #0]
                                    content_.asString.size);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(content_.asString.data,
 8001f44:	461a      	mov	r2, r3
 8001f46:	f000 f889 	bl	800205c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12visitRawJsonEPKcj>
 8001f4a:	4603      	mov	r3, r0
                                    content_.asString.size);
 8001f4c:	e025      	b.n	8001f9a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x1c6>
        return visitor.visitSignedInteger(content_.asSignedInteger);
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	4608      	mov	r0, r1
 8001f58:	f000 f894 	bl	8002084 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE18visitSignedIntegerEx>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	e01c      	b.n	8001f9a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x1c6>
        return visitor.visitUnsignedInteger(content_.asUnsignedInteger);
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	4608      	mov	r0, r1
 8001f6a:	f000 f89f 	bl	80020ac <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE20visitUnsignedIntegerEy>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	e013      	b.n	8001f9a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x1c6>
        return visitor.visitBoolean(content_.asBoolean != 0);
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f000 f8a5 	bl	80020d4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12visitBooleanEb>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	e005      	b.n	8001f9a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_+0x1c6>
        return visitor.visitNull();
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fedf 	bl	8001d54 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE9visitNullEv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	bf00      	nop
  }
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop

08001fa4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEEC1ERS3_>:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fb6:	e883 0003 	stmia.w	r3, {r0, r1}
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>:
  const TDerived& derived() const {
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8001fd6:	687b      	ldr	r3, [r7, #4]
  }
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIiEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
 8001fe4:	b5b0      	push	{r4, r5, r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_SIGNED_INTEGER);
 8001fee:	210a      	movs	r1, #10
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff f880 	bl	80010f6 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asSignedInteger = value;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	17da      	asrs	r2, r3, #31
 8001ffa:	461c      	mov	r4, r3
 8001ffc:	4615      	mov	r5, r2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bdb0      	pop	{r4, r5, r7, pc}

0800200c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE10visitFloatEd>:
  size_t visitFloat(JsonFloat value) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	ed97 0b00 	vldr	d0, [r7]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f98e 	bl	8002340 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_>
    return bytesWritten();
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f87c 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 800202a:	4603      	mov	r3, r0
  }
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitStringEPKcj>:
  size_t visitString(const char* value, size_t n) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
    formatter_.writeString(value, n);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f9f6 	bl	8002438 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKcj>
    return bytesWritten();
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f868 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002052:	4603      	mov	r3, r0
  }
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12visitRawJsonEPKcj>:
  size_t visitRawJson(const char* data, size_t n) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
    formatter_.writeRaw(data, n);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fa07 	bl	8002482 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcj>
    return bytesWritten();
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f854 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 800207a:	4603      	mov	r3, r0
  }
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE18visitSignedIntegerEx>:
  size_t visitSignedInteger(JsonInteger value) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002096:	4608      	mov	r0, r1
 8002098:	f000 fa03 	bl	80024a2 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_>
    return bytesWritten();
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f840 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 80020a2:	4603      	mov	r3, r0
  }
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE20visitUnsignedIntegerEy>:
  size_t visitUnsignedInteger(JsonUInt value) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020be:	4608      	mov	r0, r1
 80020c0:	f000 fa13 	bl	80024ea <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>
    return bytesWritten();
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f82c 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 80020ca:	4603      	mov	r3, r0
  }
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12visitBooleanEb>:
  size_t visitBoolean(bool value) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fa36 	bl	8002558 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb>
    return bytesWritten();
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f818 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 80020f2:	4603      	mov	r3, r0
  }
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>:
  void writeRaw(const char* s) {
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 8002106:	687c      	ldr	r4, [r7, #4]
 8002108:	6838      	ldr	r0, [r7, #0]
 800210a:	f7fe f85d 	bl	80001c8 <strlen>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	6839      	ldr	r1, [r7, #0]
 8002114:	4620      	mov	r0, r4
 8002116:	f000 fa39 	bl	800258c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEPKhj>
  }
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}

08002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fa43 	bl	80025b8 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002132:	4603      	mov	r3, r0
  }
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>:
    void operator()(TStoredString s) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	4638      	mov	r0, r7
 8002146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      if (s)
 800214a:	463b      	mov	r3, r7
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fe0c 	bl	8000d6a <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x2a>
        instance_->setString(s);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	463b      	mov	r3, r7
 800215e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002160:	f7fe ff80 	bl	8001064 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>
    }
 8002164:	e004      	b.n	8002170 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x34>
        instance_->setNull();
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe ff6e 	bl	800104c <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
    }
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE>:
  size_t visitArray(const CollectionData& array) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    const VariantSlot* slot = array.head();
 8002182:	6838      	ldr	r0, [r7, #0]
 8002184:	f7fe fe02 	bl	8000d8c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 8002188:	60f8      	str	r0, [r7, #12]
    if (slot) {
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d037      	beq.n	8002200 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0x88>
      base::write("[\r\n");
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4922      	ldr	r1, [pc, #136]	; (800221c <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0xa4>)
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fb27 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
      nesting_++;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7b1b      	ldrb	r3, [r3, #12]
 800219e:	3301      	adds	r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	731a      	strb	r2, [r3, #12]
      while (slot != 0) {
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01a      	beq.n	80021e2 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0x6a>
        indent();
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fb29 	bl	8002804 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE6indentEv>
        slot->data()->accept(*this);
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f7fe fe01 	bl	8000dba <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 80021b8:	4603      	mov	r3, r0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fe09 	bl	8001dd4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_>
        slot = slot->next();
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7fe fe1b 	bl	8000dfe <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 80021c8:	60f8      	str	r0, [r7, #12]
        base::write(slot ? ",\r\n" : "\r\n");
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0x5e>
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0xa8>)
 80021d4:	e000      	b.n	80021d8 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0x60>
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0xac>)
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f000 fb04 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
      while (slot != 0) {
 80021e0:	e7e1      	b.n	80021a6 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0x2e>
      nesting_--;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7b1b      	ldrb	r3, [r3, #12]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	731a      	strb	r2, [r3, #12]
      indent();
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fb08 	bl	8002804 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE6indentEv>
      base::write("]");
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	490c      	ldr	r1, [pc, #48]	; (8002228 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0xb0>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 faf5 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
 80021fe:	e004      	b.n	800220a <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0x92>
      base::write("[]");
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	490a      	ldr	r1, [pc, #40]	; (800222c <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE10visitArrayERKNS1_14CollectionDataE+0xb4>)
 8002204:	4618      	mov	r0, r3
 8002206:	f000 faef 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
    return this->bytesWritten();
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff88 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002212:	4603      	mov	r3, r0
  }
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	08005dc0 	.word	0x08005dc0
 8002220:	08005dc4 	.word	0x08005dc4
 8002224:	08005dc8 	.word	0x08005dc8
 8002228:	08005dcc 	.word	0x08005dcc
 800222c:	08005dd0 	.word	0x08005dd0

08002230 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE>:
  size_t visitObject(const CollectionData& object) {
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
    const VariantSlot* slot = object.head();
 800223a:	6838      	ldr	r0, [r7, #0]
 800223c:	f7fe fda6 	bl	8000d8c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 8002240:	60f8      	str	r0, [r7, #12]
    if (slot) {
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d045      	beq.n	80022d4 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0xa4>
      base::write("{\r\n");
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4929      	ldr	r1, [pc, #164]	; (80022f0 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0xc0>)
 800224c:	4618      	mov	r0, r3
 800224e:	f000 facb 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
      nesting_++;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7b1b      	ldrb	r3, [r3, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	b2da      	uxtb	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	731a      	strb	r2, [r3, #12]
      while (slot != 0) {
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d028      	beq.n	80022b6 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0x86>
        indent();
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 facd 	bl	8002804 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE6indentEv>
        base::visitString(slot->key());
 800226a:	687c      	ldr	r4, [r7, #4]
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7fe fe23 	bl	8000eb8 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 8002272:	4603      	mov	r3, r0
 8002274:	4619      	mov	r1, r3
 8002276:	4620      	mov	r0, r4
 8002278:	f000 fade 	bl	8002838 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitStringEPKc>
        base::write(": ");
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	491d      	ldr	r1, [pc, #116]	; (80022f4 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0xc4>)
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fab1 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
        slot->data()->accept(*this);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7fe fd97 	bl	8000dba <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800228c:	4603      	mov	r3, r0
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fd9f 	bl	8001dd4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_20PrettyJsonSerializerINS1_18StaticStringWriterEEEEENT_11result_typeERS7_>
        slot = slot->next();
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f7fe fdb1 	bl	8000dfe <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800229c:	60f8      	str	r0, [r7, #12]
        base::write(slot ? ",\r\n" : "\r\n");
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0x7a>
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0xc8>)
 80022a8:	e000      	b.n	80022ac <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0x7c>
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0xcc>)
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f000 fa9a 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
      while (slot != 0) {
 80022b4:	e7d3      	b.n	800225e <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0x2e>
      nesting_--;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7b1b      	ldrb	r3, [r3, #12]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	731a      	strb	r2, [r3, #12]
      indent();
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fa9e 	bl	8002804 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE6indentEv>
      base::write("}");
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	490d      	ldr	r1, [pc, #52]	; (8002300 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0xd0>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fa8b 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
 80022d2:	e004      	b.n	80022de <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0xae>
      base::write("{}");
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	490b      	ldr	r1, [pc, #44]	; (8002304 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE11visitObjectERKNS1_14CollectionDataE+0xd4>)
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fa85 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
    return this->bytesWritten();
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff1e 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 80022e6:	4603      	mov	r3, r0
  }
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd90      	pop	{r4, r7, pc}
 80022f0:	08005dd4 	.word	0x08005dd4
 80022f4:	08005dd8 	.word	0x08005dd8
 80022f8:	08005dc4 	.word	0x08005dc4
 80022fc:	08005dc8 	.word	0x08005dc8
 8002300:	08005ddc 	.word	0x08005ddc
 8002304:	08005de0 	.word	0x08005de0

08002308 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>:
  void operator()(TStoredString s) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	4638      	mov	r0, r7
 8002312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!s)
 8002316:	463b      	mov	r3, r7
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fd26 	bl	8000d6a <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 800231e:	4603      	mov	r3, r0
 8002320:	f083 0301 	eor.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x30>
    instance_->setKey(s);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	463b      	mov	r3, r7
 8002330:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002332:	f7fe fd99 	bl	8000e68 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>
 8002336:	e000      	b.n	800233a <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x32>
      return;
 8002338:	bf00      	nop
  }
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	ed87 0b00 	vstr	d0, [r7]
    if (isnan(value))
 800234c:	ed97 0b00 	vldr	d0, [r7]
 8002350:	f000 f93f 	bl	80025d2 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0x24>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 800235a:	4927      	ldr	r1, [pc, #156]	; (80023f8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb8>)
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f7ff fecd 	bl	80020fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
 8002362:	e045      	b.n	80023f0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb0>
    if (isinf(value))
 8002364:	ed97 0b00 	vldr	d0, [r7]
 8002368:	f000 f94a 	bl	8002600 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0x3c>
      return writeRaw("null");
 8002372:	4921      	ldr	r1, [pc, #132]	; (80023f8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb8>)
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff fec1 	bl	80020fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
 800237a:	e039      	b.n	80023f0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb0>
    if (value < 0.0) {
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002388:	f7fe fa6c 	bl	8000864 <__aeabi_dcmplt>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0x66>
      writeRaw('-');
 8002392:	212d      	movs	r1, #45	; 0x2d
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fa83 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      value = -value;
 800239a:	683c      	ldr	r4, [r7, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80023a2:	e9c7 4500 	strd	r4, r5, [r7]
    FloatParts<T> parts(value);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	ed97 0b00 	vldr	d0, [r7]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f94c 	bl	800264c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>
    writeInteger(parts.integral);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	4619      	mov	r1, r3
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fa81 	bl	80028c0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>
    if (parts.decimalPlaces)
 80023be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d006      	beq.n	80023d4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0x94>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80023cc:	4619      	mov	r1, r3
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 faa8 	bl	8002924 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma>
    if (parts.exponent) {
 80023d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d009      	beq.n	80023f0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE10writeFloatIdEEvT_+0xb0>
      writeRaw('e');
 80023dc:	2165      	movs	r1, #101	; 0x65
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fa5e 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      writeInteger(parts.exponent);
 80023e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023e8:	4619      	mov	r1, r3
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fade 	bl	80029ac <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_>
  }
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	08005db8 	.word	0x08005db8

080023fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKc>:
  void writeString(const char* value) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    writeRaw('\"');
 8002406:	2122      	movs	r1, #34	; 0x22
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fa49 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
    while (*value)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKc+0x2c>
      writeChar(*value++);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	603a      	str	r2, [r7, #0]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fae1 	bl	80029e8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc>
    while (*value)
 8002426:	e7f2      	b.n	800240e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKc+0x12>
    writeRaw('\"');
 8002428:	2122      	movs	r1, #34	; 0x22
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa38 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
  }
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 8002444:	2122      	movs	r1, #34	; 0x22
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fa2a 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
    while (n--)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	1e5a      	subs	r2, r3, #1
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf14      	ite	ne
 8002456:	2301      	movne	r3, #1
 8002458:	2300      	moveq	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKcj+0x3a>
      writeChar(*value++);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	60ba      	str	r2, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fabc 	bl	80029e8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc>
    while (n--)
 8002470:	e7ec      	b.n	800244c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKcj+0x14>
    writeRaw('\"');
 8002472:	2122      	movs	r1, #34	; 0x22
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fa13 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
  }
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcj>:
  void writeRaw(const char* s, size_t n) {
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f879 	bl	800258c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEPKhj>
  }
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 80024a2:	b5b0      	push	{r4, r5, r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 80024ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	da0c      	bge.n	80024d0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_+0x2e>
      writeRaw('-');
 80024b6:	212d      	movs	r1, #45	; 0x2d
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f9f1 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 80024be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c2:	2100      	movs	r1, #0
 80024c4:	4254      	negs	r4, r2
 80024c6:	eb61 0503 	sbc.w	r5, r1, r3
 80024ca:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80024ce:	e003      	b.n	80024d8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_+0x36>
      unsigned_value = unsigned_type(value);
 80024d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 80024d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f804 	bl	80024ea <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>
  }
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bdb0      	pop	{r4, r5, r7, pc}

080024ea <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b08c      	sub	sp, #48	; 0x30
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	3316      	adds	r3, #22
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
    char* begin = end;
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
      *--begin = char(value % 10 + '0');
 8002502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002506:	f04f 020a 	mov.w	r2, #10
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	f7fe f9f1 	bl	80008f4 <__aeabi_uldivmod>
 8002512:	b2d3      	uxtb	r3, r2
 8002514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002516:	3a01      	subs	r2, #1
 8002518:	62fa      	str	r2, [r7, #44]	; 0x2c
 800251a:	3330      	adds	r3, #48	; 0x30
 800251c:	b2da      	uxtb	r2, r3
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8002522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002526:	f04f 020a 	mov.w	r2, #10
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	f7fe f9e1 	bl	80008f4 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 800253a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800253e:	4313      	orrs	r3, r2
 8002540:	d000      	beq.n	8002544 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x5a>
    do {
 8002542:	e7de      	b.n	8002502 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x18>
    writeRaw(begin, end);
 8002544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fa79 	bl	8002a40 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>
  }
 800254e:	bf00      	nop
 8002550:	3730      	adds	r7, #48	; 0x30
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
    if (value)
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb+0x1c>
      writeRaw("true");
 800256a:	4906      	ldr	r1, [pc, #24]	; (8002584 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb+0x2c>)
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fdc5 	bl	80020fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
  }
 8002572:	e003      	b.n	800257c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb+0x24>
      writeRaw("false");
 8002574:	4904      	ldr	r1, [pc, #16]	; (8002588 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeBooleanEb+0x30>)
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fdc0 	bl	80020fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
  }
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	08005de4 	.word	0x08005de4
 8002588:	08005dec 	.word	0x08005dec

0800258c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEPKhj>:
  void write(const uint8_t* s, size_t n) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe ff31 	bl	8001406 <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEPKhj>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	441a      	add	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	609a      	str	r2, [r3, #8]
  }
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
    return writer_.count();
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f960 	bl	8002888 <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5countEv>
 80025c8:	4603      	mov	r3, r0
  }
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>:
bool isnan(T x) {
 80025d2:	b590      	push	{r4, r7, lr}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 80025dc:	2301      	movs	r3, #1
 80025de:	461c      	mov	r4, r3
 80025e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025e8:	f7fe f932 	bl	8000850 <__aeabi_dcmpeq>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_+0x24>
 80025f2:	2300      	movs	r3, #0
 80025f4:	461c      	mov	r4, r3
 80025f6:	b2e3      	uxtb	r3, r4
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}

08002600 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>:
bool isinf(T x) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002616:	f7fe f91b 	bl	8000850 <__aeabi_dcmpeq>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d110      	bne.n	8002642 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 8002620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	f7fd ff06 	bl	8000438 <__adddf3>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002634:	f7fe f90c 	bl	8000850 <__aeabi_dcmpeq>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x44>
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>:
  FloatParts(TFloat value) {
 800264c:	b5b0      	push	{r4, r5, r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	ed87 0b00 	vstr	d0, [r7]
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
 8002658:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x194>)
 800265a:	61fb      	str	r3, [r7, #28]
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2209      	movs	r2, #9
 8002660:	729a      	strb	r2, [r3, #10]
    exponent = normalize(value);
 8002662:	463b      	mov	r3, r7
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f9ff 	bl	8002a68 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	811a      	strh	r2, [r3, #8]
    integral = uint32_t(value);
 8002672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	f7fe f91b 	bl	80008b4 <__aeabi_d2uiz>
 800267e:	4602      	mov	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	601a      	str	r2, [r3, #0]
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b09      	cmp	r3, #9
 800268e:	d915      	bls.n	80026bc <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x70>
      maxDecimalPart /= 10;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	08db      	lsrs	r3, r3, #3
 800269a:	61fb      	str	r3, [r7, #28]
      decimalPlaces--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	b25a      	sxtb	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	729a      	strb	r2, [r3, #10]
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	e7e6      	b.n	800268a <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x3e>
    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
 80026bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd fff3 	bl	80006b0 <__aeabi_ui2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f7fd feaf 	bl	8000434 <__aeabi_dsub>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4614      	mov	r4, r2
 80026dc:	461d      	mov	r5, r3
 80026de:	69f8      	ldr	r0, [r7, #28]
 80026e0:	f7fd ffe6 	bl	80006b0 <__aeabi_ui2d>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd fd74 	bl	80001d8 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    decimal = uint32_t(remainder);
 80026f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026fc:	f7fe f8da 	bl	80008b4 <__aeabi_d2uiz>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	605a      	str	r2, [r3, #4]
    remainder = remainder - TFloat(decimal);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ffd0 	bl	80006b0 <__aeabi_ui2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002718:	f7fd fe8c 	bl	8000434 <__aeabi_dsub>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	e9c7 2304 	strd	r2, r3, [r7, #16]
    decimal += uint32_t(remainder * 2);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685c      	ldr	r4, [r3, #4]
 8002728:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	f7fd fe82 	bl	8000438 <__adddf3>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe f8ba 	bl	80008b4 <__aeabi_d2uiz>
 8002740:	4603      	mov	r3, r0
 8002742:	18e2      	adds	r2, r4, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
    if (decimal >= maxDecimalPart) {
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	429a      	cmp	r2, r3
 8002750:	d81c      	bhi.n	800278c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x140>
      decimal = 0;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
      integral++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	601a      	str	r2, [r3, #0]
      if (exponent && integral >= 10) {
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00f      	beq.n	800278c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x140>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b09      	cmp	r3, #9
 8002772:	d90b      	bls.n	800278c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x140>
        exponent++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800277a:	b29b      	uxth	r3, r3
 800277c:	3301      	adds	r3, #1
 800277e:	b29b      	uxth	r3, r3
 8002780:	b21a      	sxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	811a      	strh	r2, [r3, #8]
        integral = 1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 8002792:	fba3 2301 	umull	r2, r3, r3, r1
 8002796:	08da      	lsrs	r2, r3, #3
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	1aca      	subs	r2, r1, r3
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d116      	bne.n	80027d4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x188>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	dd11      	ble.n	80027d4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x188>
      decimal /= 10;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
      decimalPlaces--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	b25a      	sxtb	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	729a      	strb	r2, [r3, #10]
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 80027d2:	e7db      	b.n	800278c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x140>
  }
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4618      	mov	r0, r3
 80027d8:	3720      	adds	r7, #32
 80027da:	46bd      	mov	sp, r7
 80027dc:	bdb0      	pop	{r4, r5, r7, pc}
 80027de:	bf00      	nop
 80027e0:	3b9aca00 	.word	0x3b9aca00
 80027e4:	cccccccd 	.word	0xcccccccd

080027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>:
  void write(const char* s) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
    formatter_.writeRaw(s);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fc80 	bl	80020fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
  }
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE6indentEv>:
  void indent() {
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < nesting_; i++)
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7b1b      	ldrb	r3, [r3, #12]
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	429a      	cmp	r2, r3
 8002818:	d208      	bcs.n	800282c <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE6indentEv+0x28>
      base::write(ARDUINOJSON_TAB);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4905      	ldr	r1, [pc, #20]	; (8002834 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE6indentEv+0x30>)
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ffe2 	bl	80027e8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE5writeEPKc>
    for (uint8_t i = 0; i < nesting_; i++)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	3301      	adds	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	e7f1      	b.n	8002810 <_ZN11ArduinoJson8V6213HB26detail20PrettyJsonSerializerINS1_18StaticStringWriterEE6indentEv+0xc>
  }
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	08005df4 	.word	0x08005df4

08002838 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE11visitStringEPKc>:
  size_t visitString(const char* value) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
    formatter_.writeString(value);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fdd8 	bl	80023fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE11writeStringEPKc>
    return bytesWritten();
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fc68 	bl	8002122 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_18StaticStringWriterEE12bytesWrittenEv>
 8002852:	4603      	mov	r3, r0
  }
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEh>:
  void write(uint8_t c) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fdad 	bl	80013ce <_ZN11ArduinoJson8V6213HB26detail18StaticStringWriter5writeEh>
 8002874:	4602      	mov	r2, r0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	441a      	add	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	609a      	str	r2, [r3, #8]
  }
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5countEv>:
  size_t count() const {
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    return count_;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
  }
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>:
  void writeRaw(char c) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ffd2 	bl	800285c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEh>
  }
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	3316      	adds	r3, #22
 80028d0:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 80028d6:	6839      	ldr	r1, [r7, #0]
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x60>)
 80028da:	fba3 2301 	umull	r2, r3, r3, r1
 80028de:	08da      	lsrs	r2, r3, #3
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	1aca      	subs	r2, r1, r3
 80028ea:	b2d3      	uxtb	r3, r2
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	3a01      	subs	r2, #1
 80028f0:	627a      	str	r2, [r7, #36]	; 0x24
 80028f2:	3330      	adds	r3, #48	; 0x30
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	4a08      	ldr	r2, [pc, #32]	; (8002920 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x60>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	08db      	lsrs	r3, r3, #3
 8002904:	603b      	str	r3, [r7, #0]
    } while (value);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d000      	beq.n	800290e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x4e>
    do {
 800290c:	e7e3      	b.n	80028d6 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x16>
    writeRaw(begin, end);
 800290e:	6a3a      	ldr	r2, [r7, #32]
 8002910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f894 	bl	8002a40 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>
  }
 8002918:	bf00      	nop
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	cccccccd 	.word	0xcccccccd

08002924 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	4613      	mov	r3, r2
 8002930:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	3310      	adds	r3, #16
 8002938:	623b      	str	r3, [r7, #32]
    char* begin = end;
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    while (width--) {
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	3a01      	subs	r2, #1
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	71fa      	strb	r2, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	bf14      	ite	ne
 800294e:	2301      	movne	r3, #1
 8002950:	2300      	moveq	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d018      	beq.n	800298a <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma+0x66>
      *--begin = char(value % 10 + '0');
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma+0x84>)
 800295c:	fba3 2301 	umull	r2, r3, r3, r1
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	1aca      	subs	r2, r1, r3
 800296c:	b2d3      	uxtb	r3, r2
 800296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002970:	3a01      	subs	r2, #1
 8002972:	627a      	str	r2, [r7, #36]	; 0x24
 8002974:	3330      	adds	r3, #48	; 0x30
 8002976:	b2da      	uxtb	r2, r3
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	701a      	strb	r2, [r3, #0]
      value /= 10;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma+0x84>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	08db      	lsrs	r3, r3, #3
 8002986:	60bb      	str	r3, [r7, #8]
    while (width--) {
 8002988:	e7d9      	b.n	800293e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE13writeDecimalsEma+0x1a>
    *--begin = '.';
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	3b01      	subs	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	222e      	movs	r2, #46	; 0x2e
 8002994:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 8002996:	6a3a      	ldr	r2, [r7, #32]
 8002998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f850 	bl	8002a40 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>
  }
 80029a0:	bf00      	nop
 80029a2:	3728      	adds	r7, #40	; 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	cccccccd 	.word	0xcccccccd

080029ac <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 80029b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da07      	bge.n	80029d0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_+0x24>
      writeRaw('-');
 80029c0:	212d      	movs	r1, #45	; 0x2d
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff6c 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	425b      	negs	r3, r3
 80029cc:	81fb      	strh	r3, [r7, #14]
 80029ce:	e001      	b.n	80029d4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES8_+0x28>
      unsigned_value = unsigned_type(value);
 80029d0:	887b      	ldrh	r3, [r7, #2]
 80029d2:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 80029d4:	89fb      	ldrh	r3, [r7, #14]
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f939 	bl	8002c50 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>
  }
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc>:
  void writeChar(char c) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fca0 	bl	800133c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x32>
      writeRaw('\\');
 8002a06:	215c      	movs	r1, #92	; 0x5c
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff49 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
      writeRaw(specialChar);
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	4619      	mov	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ff44 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
  }
 8002a18:	e00c      	b.n	8002a34 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x4c>
    } else if (c) {
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x44>
      writeRaw(c);
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff3b 	bl	80028a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEc>
  }
 8002a2a:	e003      	b.n	8002a34 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE9writeCharEc+0x54>)
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fb64 	bl	80020fc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKc>
  }
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	08005df8 	.word	0x08005df8

08002a40 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>:
  void writeRaw(const char* begin, const char* end) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8002a4c:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8002a54:	461a      	mov	r2, r3
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	f7ff fd98 	bl	800258c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_18StaticStringWriterEE5writeEPKhj>
  }
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	0000      	movs	r0, r0
	...

08002a68 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>:
  static int16_t normalize(TFloat& value) {
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
    int16_t powersOf10 = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	83fb      	strh	r3, [r7, #30]
    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8002a74:	2308      	movs	r3, #8
 8002a76:	777b      	strb	r3, [r7, #29]
    int bit = 1 << index;
 8002a78:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	61bb      	str	r3, [r7, #24]
    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a8a:	a362      	add	r3, pc, #392	; (adr r3, 8002c14 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1ac>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fefc 	bl	800088c <__aeabi_dcmpge>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d04a      	beq.n	8002b30 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc8>
      for (; index >= 0; index--) {
 8002a9a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db46      	blt.n	8002b30 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc8>
        if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002aa8:	f7ff f85c 	bl	8001b64 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f872 	bl	8001ba4 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 8002ac0:	ec53 2b10 	vmov	r2, r3, d0
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	460e      	mov	r6, r1
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4629      	mov	r1, r5
 8002acc:	f7fd fede 	bl	800088c <__aeabi_dcmpge>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x72>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	461e      	mov	r6, r3
 8002ada:	b2f3      	uxtb	r3, r6
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01d      	beq.n	8002b1c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xb4>
          value *= traits::negativeBinaryPowersOfTen()[index];
 8002ae0:	f7ff f850 	bl	8001b84 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff f856 	bl	8001ba4 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 8002af8:	ec51 0b10 	vmov	r0, r1, d0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fb69 	bl	80001d8 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 + bit);
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	8bfb      	ldrh	r3, [r7, #30]
 8002b16:	4413      	add	r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	83fb      	strh	r3, [r7, #30]
        bit >>= 1;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	105b      	asrs	r3, r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 8002b22:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	777b      	strb	r3, [r7, #29]
 8002b2e:	e7b4      	b.n	8002a9a <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x32>
    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	f7fd feaf 	bl	80008a0 <__aeabi_dcmpgt>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05c      	beq.n	8002c02 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b4e:	a333      	add	r3, pc, #204	; (adr r3, 8002c1c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1b4>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd fe90 	bl	8000878 <__aeabi_dcmple>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d051      	beq.n	8002c02 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
      for (; index >= 0; index--) {
 8002b5e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db4d      	blt.n	8002c02 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
        if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b6c:	f7ff f80a 	bl	8001b84 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8002b70:	4603      	mov	r3, r0
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f810 	bl	8001ba4 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 8002b84:	ec51 0b10 	vmov	r0, r1, d0
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1a8>)
 8002b8e:	f7fd fb23 	bl	80001d8 <__aeabi_dmul>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	2101      	movs	r1, #1
 8002b98:	460e      	mov	r6, r1
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	f7fd fe61 	bl	8000864 <__aeabi_dcmplt>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x144>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	461e      	mov	r6, r3
 8002bac:	b2f3      	uxtb	r3, r6
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01d      	beq.n	8002bee <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x186>
          value *= traits::positiveBinaryPowersOfTen()[index];
 8002bb2:	f7fe ffd7 	bl	8001b64 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ffed 	bl	8001ba4 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 8002bca:	ec51 0b10 	vmov	r0, r1, d0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd fb00 	bl	80001d8 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 - bit);
 8002be2:	8bfa      	ldrh	r2, [r7, #30]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	83fb      	strh	r3, [r7, #30]
        bit >>= 1;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	105b      	asrs	r3, r3, #1
 8002bf2:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 8002bf4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	777b      	strb	r3, [r7, #29]
 8002c00:	e7ad      	b.n	8002b5e <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xf6>
    return powersOf10;
 8002c02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  }
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40240000 	.word	0x40240000
 8002c14:	00000000 	.word	0x00000000
 8002c18:	416312d0 	.word	0x416312d0
 8002c1c:	88e368f1 	.word	0x88e368f1
 8002c20:	3ee4f8b5 	.word	0x3ee4f8b5

08002c24 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>:
VariantData* variantGetOrAddMember(VariantData* var, TAdaptedString key,
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  if (!var)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x16>
    return 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e006      	b.n	8002c48 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x24>
  return var->getOrAddMember(key, pool);
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f83a 	bl	8002cb8 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>
 8002c44:	4603      	mov	r3, r0
 8002c46:	bf00      	nop
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 8002c5c:	f107 0308 	add.w	r3, r7, #8
 8002c60:	3316      	adds	r3, #22
 8002c62:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x64>)
 8002c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c70:	08d9      	lsrs	r1, r3, #3
 8002c72:	460b      	mov	r3, r1
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	3a01      	subs	r2, #1
 8002c84:	627a      	str	r2, [r7, #36]	; 0x24
 8002c86:	3330      	adds	r3, #48	; 0x30
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x64>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	08db      	lsrs	r3, r3, #3
 8002c98:	807b      	strh	r3, [r7, #2]
    } while (value);
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d000      	beq.n	8002ca2 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x52>
    do {
 8002ca0:	e7e2      	b.n	8002c68 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES8_+0x18>
    writeRaw(begin, end);
 8002ca2:	6a3a      	ldr	r2, [r7, #32]
 8002ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff feca 	bl	8002a40 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_18StaticStringWriterEE8writeRawEPKcS6_>
  }
 8002cac:	bf00      	nop
 8002cae:	3728      	adds	r7, #40	; 0x28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	cccccccd 	.word	0xcccccccd

08002cb8 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>:
  VariantData* getOrAddMember(TAdaptedString key, MemoryPool* pool) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
    if (isNull())
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7fe f9b0 	bl	800102a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x1e>
      toObject();
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7fe f9f0 	bl	80010b6 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>
    if (!isObject())
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7fe f994 	bl	8001004 <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f083 0301 	eor.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x34>
      return 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e007      	b.n	8002cfc <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x44>
    return content_.asCollection.getOrAddMember(key, pool);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f806 	bl	8002d04 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	bf00      	nop
  }
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::getOrAddMember(TAdaptedString key,
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  if (key.isNull())
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd ff7e 	bl	8000c16 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x20>
    return 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e013      	b.n	8002d4c <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  VariantSlot* slot = getSlot(key);
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f814 	bl	8002d54 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>
 8002d2c:	6178      	str	r0, [r7, #20]
  if (slot)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d004      	beq.n	8002d3e <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x3a>
    return slot->data();
 8002d34:	6978      	ldr	r0, [r7, #20]
 8002d36:	f7fe f835 	bl	8000da4 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	e006      	b.n	8002d4c <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  return addMember(key, pool);
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f834 	bl	8002db0 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	bf00      	nop
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  if (key.isNull())
 8002d5e:	463b      	mov	r3, r7
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd ff58 	bl	8000c16 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x1c>
    return 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e01b      	b.n	8002da8 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x54>
  VariantSlot* slot = head_;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
  while (slot) {
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d014      	beq.n	8002da6 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x52>
    if (stringEquals(key, adaptString(slot->key())))
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7fe f89b 	bl	8000eb8 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe fe6f 	bl	8001a68 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6838      	ldr	r0, [r7, #0]
 8002d90:	f000 f833 	bl	8002dfa <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x50>
    slot = slot->next();
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7fe f818 	bl	8000dd0 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8002da0:	60f8      	str	r0, [r7, #12]
  while (slot) {
 8002da2:	e7e8      	b.n	8002d76 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x22>
      break;
 8002da4:	bf00      	nop
  return slot;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::addMember(TAdaptedString key,
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  VariantSlot* slot = addSlot(pool);
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7fe fa3e 	bl	8001240 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 8002dc4:	6178      	str	r0, [r7, #20]
  if (!slotSetKey(slot, key, pool)) {
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f000 f84f 	bl	8002e6e <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f083 0301 	eor.w	r3, r3, #1
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x38>
    removeSlot(slot);
 8002ddc:	6979      	ldr	r1, [r7, #20]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7fe fa85 	bl	80012ee <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>
    return 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e004      	b.n	8002df2 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x42>
  return slot->data();
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f7fd ffdb 	bl	8000da4 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 8002dee:	4603      	mov	r3, r0
 8002df0:	bf00      	nop
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8002dfa:	b590      	push	{r4, r7, lr}
 8002dfc:	b087      	sub	sp, #28
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
  size_t size1 = s1.size();
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd ff16 	bl	8000c38 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 8002e0c:	6138      	str	r0, [r7, #16]
  size_t size2 = s2.size();
 8002e0e:	463b      	mov	r3, r7
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fd ff11 	bl	8000c38 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 8002e16:	60f8      	str	r0, [r7, #12]
  if (size1 != size2)
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x2a>
    return false;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e020      	b.n	8002e66 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d219      	bcs.n	8002e64 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6a>
    if (s1[i] != s2[i])
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	6979      	ldr	r1, [r7, #20]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd ff13 	bl	8000c60 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461c      	mov	r4, r3
 8002e3e:	463b      	mov	r3, r7
 8002e40:	6979      	ldr	r1, [r7, #20]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd ff0c 	bl	8000c60 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	429c      	cmp	r4, r3
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x62>
      return false;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e004      	b.n	8002e66 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e7e1      	b.n	8002e28 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x2e>
  return true;
 8002e64:	2301      	movs	r3, #1
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}

08002e6e <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>:
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  if (!var)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x16>
    return false;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e00c      	b.n	8002e9e <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x30>
  return storeString(pool, key, SlotKeySetter(var));
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	68f9      	ldr	r1, [r7, #12]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe f98a 	bl	80011a4 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f806 	bl	8002ea6 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	bf00      	nop
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>:
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 8002ea6:	b590      	push	{r4, r7, lr}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fefd 	bl	8000cb6 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4622      	mov	r2, r4
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f805 	bl	8002ed2 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}

08002ed2 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 8002ed2:	b590      	push	{r4, r7, lr}
 8002ed4:	b089      	sub	sp, #36	; 0x24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	713a      	strb	r2, [r7, #4]
 8002ede:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 8002ee0:	f107 0308 	add.w	r3, r7, #8
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd fecb 	bl	8000c80 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 8002eea:	4604      	mov	r4, r0
 8002eec:	f107 0308 	add.w	r3, r7, #8
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fea1 	bl	8000c38 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	f107 0014 	add.w	r0, r7, #20
 8002efc:	2301      	movs	r3, #1
 8002efe:	4621      	mov	r1, r4
 8002f00:	f7fd fef3 	bl	8000cea <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 8002f04:	4638      	mov	r0, r7
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0c:	f7ff f9fc 	bl	8002308 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 8002f10:	f107 0308 	add.w	r3, r7, #8
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fe7e 	bl	8000c16 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f083 0301 	eor.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd90      	pop	{r4, r7, pc}
	...

08002f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_MspInit+0x44>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <HAL_MspInit+0x44>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6193      	str	r3, [r2, #24]
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_MspInit+0x44>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_MspInit+0x44>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_MspInit+0x44>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	61d3      	str	r3, [r2, #28]
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_MspInit+0x44>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <HAL_SPI_MspInit+0x8c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d130      	bne.n	8002ff8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f96:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_SPI_MspInit+0x90>)
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	4a1a      	ldr	r2, [pc, #104]	; (8003004 <HAL_SPI_MspInit+0x90>)
 8002f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fa0:	6193      	str	r3, [r2, #24]
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <HAL_SPI_MspInit+0x90>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_SPI_MspInit+0x90>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4a14      	ldr	r2, [pc, #80]	; (8003004 <HAL_SPI_MspInit+0x90>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	6153      	str	r3, [r2, #20]
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_SPI_MspInit+0x90>)
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fc6:	23e0      	movs	r3, #224	; 0xe0
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe4:	f000 faa6 	bl	8003534 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2105      	movs	r1, #5
 8002fec:	2023      	movs	r0, #35	; 0x23
 8002fee:	f000 fa2c 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002ff2:	2023      	movs	r0, #35	; 0x23
 8002ff4:	f000 fa45 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ff8:	bf00      	nop
 8002ffa:	3728      	adds	r7, #40	; 0x28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40013000 	.word	0x40013000
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_UART_MspInit+0x80>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d129      	bne.n	800307e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_UART_MspInit+0x84>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <HAL_UART_MspInit+0x84>)
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	61d3      	str	r3, [r2, #28]
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_UART_MspInit+0x84>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_UART_MspInit+0x84>)
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	4a11      	ldr	r2, [pc, #68]	; (800308c <HAL_UART_MspInit+0x84>)
 8003048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304c:	6153      	str	r3, [r2, #20]
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_UART_MspInit+0x84>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800305a:	f248 0304 	movw	r3, #32772	; 0x8004
 800305e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003060:	2302      	movs	r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003068:	2303      	movs	r3, #3
 800306a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800306c:	2307      	movs	r3, #7
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4619      	mov	r1, r3
 8003076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800307a:	f000 fa5b 	bl	8003534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800307e:	bf00      	nop
 8003080:	3728      	adds	r7, #40	; 0x28
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40004400 	.word	0x40004400
 800308c:	40021000 	.word	0x40021000

08003090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003094:	e7fe      	b.n	8003094 <NMI_Handler+0x4>

08003096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800309a:	e7fe      	b.n	800309a <HardFault_Handler+0x4>

0800309c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a0:	e7fe      	b.n	80030a0 <MemManage_Handler+0x4>

080030a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <BusFault_Handler+0x4>

080030a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <UsageFault_Handler+0x4>

080030ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030dc:	f000 f896 	bl	800320c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
	myCount++;
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <SPI1_IRQHandler+0x1c>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	4b03      	ldr	r3, [pc, #12]	; (8003100 <SPI1_IRQHandler+0x1c>)
 80030f4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80030f6:	4803      	ldr	r0, [pc, #12]	; (8003104 <SPI1_IRQHandler+0x20>)
 80030f8:	f001 ff64 	bl	8004fc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200001dc 	.word	0x200001dc
 8003104:	20000028 	.word	0x20000028

08003108 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <SystemInit+0x20>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	4a05      	ldr	r2, [pc, #20]	; (8003128 <SystemInit+0x20>)
 8003114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800312c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003164 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003130:	f7ff ffea 	bl	8003108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003134:	480c      	ldr	r0, [pc, #48]	; (8003168 <LoopForever+0x6>)
  ldr r1, =_edata
 8003136:	490d      	ldr	r1, [pc, #52]	; (800316c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003138:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <LoopForever+0xe>)
  movs r3, #0
 800313a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800313c:	e002      	b.n	8003144 <LoopCopyDataInit>

0800313e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003142:	3304      	adds	r3, #4

08003144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003148:	d3f9      	bcc.n	800313e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800314c:	4c0a      	ldr	r4, [pc, #40]	; (8003178 <LoopForever+0x16>)
  movs r3, #0
 800314e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003150:	e001      	b.n	8003156 <LoopFillZerobss>

08003152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003154:	3204      	adds	r2, #4

08003156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003158:	d3fb      	bcc.n	8003152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800315a:	f002 fddf 	bl	8005d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800315e:	f7fe f9a9 	bl	80014b4 <main>

08003162 <LoopForever>:

LoopForever:
    b LoopForever
 8003162:	e7fe      	b.n	8003162 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003164:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800316c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003170:	08005ed8 	.word	0x08005ed8
  ldr r2, =_sbss
 8003174:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003178:	200001e4 	.word	0x200001e4

0800317c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800317c:	e7fe      	b.n	800317c <ADC1_2_IRQHandler>
	...

08003180 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_Init+0x28>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <HAL_Init+0x28>)
 800318a:	f043 0310 	orr.w	r3, r3, #16
 800318e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003190:	2003      	movs	r0, #3
 8003192:	f000 f94f 	bl	8003434 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003196:	2000      	movs	r0, #0
 8003198:	f000 f808 	bl	80031ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800319c:	f7ff fec6 	bl	8002f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40022000 	.word	0x40022000

080031ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_InitTick+0x54>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_InitTick+0x58>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f967 	bl	800349e <HAL_SYSTICK_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00e      	b.n	80031f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d80a      	bhi.n	80031f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e0:	2200      	movs	r2, #0
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031e8:	f000 f92f 	bl	800344a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ec:	4a06      	ldr	r2, [pc, #24]	; (8003208 <HAL_InitTick+0x5c>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000000 	.word	0x20000000
 8003204:	20000008 	.word	0x20000008
 8003208:	20000004 	.word	0x20000004

0800320c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x20>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_IncTick+0x24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4413      	add	r3, r2
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_IncTick+0x24>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000008 	.word	0x20000008
 8003230:	200001e0 	.word	0x200001e0

08003234 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return uwTick;  
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_GetTick+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	200001e0 	.word	0x200001e0

0800324c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff ffee 	bl	8003234 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003264:	d005      	beq.n	8003272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_Delay+0x44>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003272:	bf00      	nop
 8003274:	f7ff ffde 	bl	8003234 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d8f7      	bhi.n	8003274 <HAL_Delay+0x28>
  {
  }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000008 	.word	0x20000008

08003294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4907      	ldr	r1, [pc, #28]	; (8003330 <__NVIC_EnableIRQ+0x38>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	2b00      	cmp	r3, #0
 8003346:	db0a      	blt.n	800335e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	490c      	ldr	r1, [pc, #48]	; (8003380 <__NVIC_SetPriority+0x4c>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	440b      	add	r3, r1
 8003358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800335c:	e00a      	b.n	8003374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4908      	ldr	r1, [pc, #32]	; (8003384 <__NVIC_SetPriority+0x50>)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	3b04      	subs	r3, #4
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	440b      	add	r3, r1
 8003372:	761a      	strb	r2, [r3, #24]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf28      	it	cs
 80033a6:	2304      	movcs	r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d902      	bls.n	80033b8 <NVIC_EncodePriority+0x30>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3b03      	subs	r3, #3
 80033b6:	e000      	b.n	80033ba <NVIC_EncodePriority+0x32>
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	401a      	ands	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	43d9      	mvns	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	4313      	orrs	r3, r2
         );
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	; 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003400:	d301      	bcc.n	8003406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003402:	2301      	movs	r3, #1
 8003404:	e00f      	b.n	8003426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <SysTick_Config+0x40>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340e:	210f      	movs	r1, #15
 8003410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003414:	f7ff ff8e 	bl	8003334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <SysTick_Config+0x40>)
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <SysTick_Config+0x40>)
 8003420:	2207      	movs	r2, #7
 8003422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	e000e010 	.word	0xe000e010

08003434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ff29 	bl	8003294 <__NVIC_SetPriorityGrouping>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800345c:	f7ff ff3e 	bl	80032dc <__NVIC_GetPriorityGrouping>
 8003460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff8e 	bl	8003388 <NVIC_EncodePriority>
 800346c:	4602      	mov	r2, r0
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff5d 	bl	8003334 <__NVIC_SetPriority>
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff31 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffa2 	bl	80033f0 <SysTick_Config>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d005      	beq.n	80034d8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2204      	movs	r2, #4
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
 80034d6:	e027      	b.n	8003528 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 020e 	bic.w	r2, r2, #14
 80034e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f202 	lsl.w	r2, r1, r2
 8003506:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
    } 
  }
  return status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003542:	e14e      	b.n	80037e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	2101      	movs	r1, #1
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8140 	beq.w	80037dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d005      	beq.n	8003574 <HAL_GPIO_Init+0x40>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d130      	bne.n	80035d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035aa:	2201      	movs	r2, #1
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	f003 0201 	and.w	r2, r3, #1
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d017      	beq.n	8003612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	2203      	movs	r2, #3
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d123      	bne.n	8003666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	08da      	lsrs	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3208      	adds	r2, #8
 8003626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	220f      	movs	r2, #15
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	08da      	lsrs	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3208      	adds	r2, #8
 8003660:	6939      	ldr	r1, [r7, #16]
 8003662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	2203      	movs	r2, #3
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0203 	and.w	r2, r3, #3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 809a 	beq.w	80037dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a8:	4b55      	ldr	r3, [pc, #340]	; (8003800 <HAL_GPIO_Init+0x2cc>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4a54      	ldr	r2, [pc, #336]	; (8003800 <HAL_GPIO_Init+0x2cc>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6193      	str	r3, [r2, #24]
 80036b4:	4b52      	ldr	r3, [pc, #328]	; (8003800 <HAL_GPIO_Init+0x2cc>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036c0:	4a50      	ldr	r2, [pc, #320]	; (8003804 <HAL_GPIO_Init+0x2d0>)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ea:	d013      	beq.n	8003714 <HAL_GPIO_Init+0x1e0>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a46      	ldr	r2, [pc, #280]	; (8003808 <HAL_GPIO_Init+0x2d4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00d      	beq.n	8003710 <HAL_GPIO_Init+0x1dc>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a45      	ldr	r2, [pc, #276]	; (800380c <HAL_GPIO_Init+0x2d8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <HAL_GPIO_Init+0x1d8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a44      	ldr	r2, [pc, #272]	; (8003810 <HAL_GPIO_Init+0x2dc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_GPIO_Init+0x1d4>
 8003704:	2303      	movs	r3, #3
 8003706:	e006      	b.n	8003716 <HAL_GPIO_Init+0x1e2>
 8003708:	2305      	movs	r3, #5
 800370a:	e004      	b.n	8003716 <HAL_GPIO_Init+0x1e2>
 800370c:	2302      	movs	r3, #2
 800370e:	e002      	b.n	8003716 <HAL_GPIO_Init+0x1e2>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_GPIO_Init+0x1e2>
 8003714:	2300      	movs	r3, #0
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	f002 0203 	and.w	r2, r2, #3
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	4093      	lsls	r3, r2
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003726:	4937      	ldr	r1, [pc, #220]	; (8003804 <HAL_GPIO_Init+0x2d0>)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	3302      	adds	r3, #2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003734:	4b37      	ldr	r3, [pc, #220]	; (8003814 <HAL_GPIO_Init+0x2e0>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	43db      	mvns	r3, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <HAL_GPIO_Init+0x2e0>)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_GPIO_Init+0x2e0>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003782:	4a24      	ldr	r2, [pc, #144]	; (8003814 <HAL_GPIO_Init+0x2e0>)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003788:	4b22      	ldr	r3, [pc, #136]	; (8003814 <HAL_GPIO_Init+0x2e0>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037ac:	4a19      	ldr	r2, [pc, #100]	; (8003814 <HAL_GPIO_Init+0x2e0>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_GPIO_Init+0x2e0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037d6:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <HAL_GPIO_Init+0x2e0>)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	3301      	adds	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f aea9 	bne.w	8003544 <HAL_GPIO_Init+0x10>
  }
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40021000 	.word	0x40021000
 8003804:	40010000 	.word	0x40010000
 8003808:	48000400 	.word	0x48000400
 800380c:	48000800 	.word	0x48000800
 8003810:	48000c00 	.word	0x48000c00
 8003814:	40010400 	.word	0x40010400

08003818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e001      	b.n	800383a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
 8003854:	4613      	mov	r3, r2
 8003856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003858:	787b      	ldrb	r3, [r7, #1]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003864:	e002      	b.n	800386c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800387e:	af00      	add	r7, sp, #0
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003888:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f001 b823 	b.w	80048e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 817d 	beq.w	8003bae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038b4:	4bbc      	ldr	r3, [pc, #752]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00c      	beq.n	80038da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038c0:	4bb9      	ldr	r3, [pc, #740]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d15c      	bne.n	8003986 <HAL_RCC_OscConfig+0x10e>
 80038cc:	4bb6      	ldr	r3, [pc, #728]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d155      	bne.n	8003986 <HAL_RCC_OscConfig+0x10e>
 80038da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_RCC_OscConfig+0x94>
 8003906:	4ba8      	ldr	r3, [pc, #672]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e015      	b.n	8003938 <HAL_RCC_OscConfig+0xc0>
 800390c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003910:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003924:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003928:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003934:	4b9c      	ldr	r3, [pc, #624]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800393c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003940:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003944:	fa92 f2a2 	rbit	r2, r2
 8003948:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800394c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003950:	fab2 f282 	clz	r2, r2
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	f042 0220 	orr.w	r2, r2, #32
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	f002 021f 	and.w	r2, r2, #31
 8003960:	2101      	movs	r1, #1
 8003962:	fa01 f202 	lsl.w	r2, r1, r2
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 811f 	beq.w	8003bac <HAL_RCC_OscConfig+0x334>
 800396e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 8116 	bne.w	8003bac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f000 bfaf 	b.w	80048e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12e>
 8003998:	4b83      	ldr	r3, [pc, #524]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a82      	ldr	r2, [pc, #520]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 800399e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e036      	b.n	8003a14 <HAL_RCC_OscConfig+0x19c>
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x158>
 80039b6:	4b7c      	ldr	r3, [pc, #496]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7b      	ldr	r2, [pc, #492]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80039bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b79      	ldr	r3, [pc, #484]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a78      	ldr	r2, [pc, #480]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80039c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e021      	b.n	8003a14 <HAL_RCC_OscConfig+0x19c>
 80039d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x184>
 80039e2:	4b71      	ldr	r3, [pc, #452]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a70      	ldr	r2, [pc, #448]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b6e      	ldr	r3, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6d      	ldr	r2, [pc, #436]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0x19c>
 80039fc:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a69      	ldr	r2, [pc, #420]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a66      	ldr	r2, [pc, #408]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a14:	4b64      	ldr	r3, [pc, #400]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	f023 020f 	bic.w	r2, r3, #15
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	495f      	ldr	r1, [pc, #380]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d059      	beq.n	8003af2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7ff fbf9 	bl	8003234 <HAL_GetTick>
 8003a42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a48:	f7ff fbf4 	bl	8003234 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b64      	cmp	r3, #100	; 0x64
 8003a56:	d902      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f000 bf43 	b.w	80048e4 <HAL_RCC_OscConfig+0x106c>
 8003a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003a72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0x218>
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	e015      	b.n	8003abc <HAL_RCC_OscConfig+0x244>
 8003a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003aac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ac0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003ac4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003ac8:	fa92 f2a2 	rbit	r2, r2
 8003acc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003ad0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ad4:	fab2 f282 	clz	r2, r2
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	f042 0220 	orr.w	r2, r2, #32
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	f002 021f 	and.w	r2, r2, #31
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ab      	beq.n	8003a48 <HAL_RCC_OscConfig+0x1d0>
 8003af0:	e05d      	b.n	8003bae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7ff fb9f 	bl	8003234 <HAL_GetTick>
 8003af6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afc:	f7ff fb9a 	bl	8003234 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b64      	cmp	r3, #100	; 0x64
 8003b0a:	d902      	bls.n	8003b12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	f000 bee9 	b.w	80048e4 <HAL_RCC_OscConfig+0x106c>
 8003b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b16:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003b26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_OscConfig+0x2cc>
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	e015      	b.n	8003b70 <HAL_RCC_OscConfig+0x2f8>
 8003b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b48:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b5c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003b60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_RCC_OscConfig+0x330>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b74:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003b78:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003b7c:	fa92 f2a2 	rbit	r2, r2
 8003b80:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003b84:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003b88:	fab2 f282 	clz	r2, r2
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	f042 0220 	orr.w	r2, r2, #32
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f002 021f 	and.w	r2, r2, #31
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ab      	bne.n	8003afc <HAL_RCC_OscConfig+0x284>
 8003ba4:	e003      	b.n	8003bae <HAL_RCC_OscConfig+0x336>
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 817d 	beq.w	8003ebe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bc4:	4ba6      	ldr	r3, [pc, #664]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bd0:	4ba3      	ldr	r3, [pc, #652]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d172      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x44a>
 8003bdc:	4ba0      	ldr	r3, [pc, #640]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d16c      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x44a>
 8003be8:	2302      	movs	r3, #2
 8003bea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003bfa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d102      	bne.n	8003c18 <HAL_RCC_OscConfig+0x3a0>
 8003c12:	4b93      	ldr	r3, [pc, #588]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	e013      	b.n	8003c40 <HAL_RCC_OscConfig+0x3c8>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003c3c:	4b88      	ldr	r3, [pc, #544]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	2202      	movs	r2, #2
 8003c42:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003c46:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c4a:	fa92 f2a2 	rbit	r2, r2
 8003c4e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003c52:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003c56:	fab2 f282 	clz	r2, r2
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	f042 0220 	orr.w	r2, r2, #32
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f002 021f 	and.w	r2, r2, #31
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCC_OscConfig+0x410>
 8003c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f000 be2e 	b.w	80048e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4b75      	ldr	r3, [pc, #468]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	21f8      	movs	r1, #248	; 0xf8
 8003c9e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003ca6:	fa91 f1a1 	rbit	r1, r1
 8003caa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003cae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003cb2:	fab1 f181 	clz	r1, r1
 8003cb6:	b2c9      	uxtb	r1, r1
 8003cb8:	408b      	lsls	r3, r1
 8003cba:	4969      	ldr	r1, [pc, #420]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc0:	e0fd      	b.n	8003ebe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8088 	beq.w	8003de4 <HAL_RCC_OscConfig+0x56c>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003cde:	fa93 f3a3 	rbit	r3, r3
 8003ce2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003ce6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7ff fa98 	bl	8003234 <HAL_GetTick>
 8003d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	e00a      	b.n	8003d20 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7ff fa93 	bl	8003234 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d902      	bls.n	8003d20 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	f000 bde2 	b.w	80048e4 <HAL_RCC_OscConfig+0x106c>
 8003d20:	2302      	movs	r3, #2
 8003d22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003d32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4d8>
 8003d4a:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	e013      	b.n	8003d78 <HAL_RCC_OscConfig+0x500>
 8003d50:	2302      	movs	r3, #2
 8003d52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d62:	2302      	movs	r3, #2
 8003d64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003d6c:	fa93 f3a3 	rbit	r3, r3
 8003d70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003d74:	4b3a      	ldr	r3, [pc, #232]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003d7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003d82:	fa92 f2a2 	rbit	r2, r2
 8003d86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003d8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d8e:	fab2 f282 	clz	r2, r2
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	f042 0220 	orr.w	r2, r2, #32
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	f002 021f 	and.w	r2, r2, #31
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f202 	lsl.w	r2, r1, r2
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0af      	beq.n	8003d0a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4b2d      	ldr	r3, [pc, #180]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	21f8      	movs	r1, #248	; 0xf8
 8003dc0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003dc8:	fa91 f1a1 	rbit	r1, r1
 8003dcc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003dd0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003dd4:	fab1 f181 	clz	r1, r1
 8003dd8:	b2c9      	uxtb	r1, r1
 8003dda:	408b      	lsls	r3, r1
 8003ddc:	4920      	ldr	r1, [pc, #128]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
 8003de2:	e06c      	b.n	8003ebe <HAL_RCC_OscConfig+0x646>
 8003de4:	2301      	movs	r3, #1
 8003de6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003df6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7ff fa10 	bl	8003234 <HAL_GetTick>
 8003e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7ff fa0b 	bl	8003234 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d902      	bls.n	8003e30 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	f000 bd5a 	b.w	80048e4 <HAL_RCC_OscConfig+0x106c>
 8003e30:	2302      	movs	r3, #2
 8003e32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d104      	bne.n	8003e64 <HAL_RCC_OscConfig+0x5ec>
 8003e5a:	4b01      	ldr	r3, [pc, #4]	; (8003e60 <HAL_RCC_OscConfig+0x5e8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	e015      	b.n	8003e8c <HAL_RCC_OscConfig+0x614>
 8003e60:	40021000 	.word	0x40021000
 8003e64:	2302      	movs	r3, #2
 8003e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e76:	2302      	movs	r3, #2
 8003e78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e80:	fa93 f3a3 	rbit	r3, r3
 8003e84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003e88:	4bc8      	ldr	r3, [pc, #800]	; (80041ac <HAL_RCC_OscConfig+0x934>)
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003e92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003e96:	fa92 f2a2 	rbit	r2, r2
 8003e9a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003e9e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ea2:	fab2 f282 	clz	r2, r2
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	f042 0220 	orr.w	r2, r2, #32
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	f002 021f 	and.w	r2, r2, #31
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ad      	bne.n	8003e1a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8110 	beq.w	80040f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d079      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x760>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	4bab      	ldr	r3, [pc, #684]	; (80041b0 <HAL_RCC_OscConfig+0x938>)
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7ff f991 	bl	8003234 <HAL_GetTick>
 8003f12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f18:	f7ff f98c 	bl	8003234 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d902      	bls.n	8003f2e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	f000 bcdb 	b.w	80048e4 <HAL_RCC_OscConfig+0x106c>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f48:	2202      	movs	r2, #2
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	fa93 f2a3 	rbit	r2, r3
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	fa93 f2a3 	rbit	r2, r3
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f88:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x934>)
 8003f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f94:	2102      	movs	r1, #2
 8003f96:	6019      	str	r1, [r3, #0]
 8003f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	fa93 f1a3 	rbit	r1, r3
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fae:	6019      	str	r1, [r3, #0]
  return result;
 8003fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	2101      	movs	r1, #1
 8003fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0a0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x6a0>
 8003fd6:	e08d      	b.n	80040f4 <HAL_RCC_OscConfig+0x87c>
 8003fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	fa93 f2a3 	rbit	r2, r3
 8003ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ffa:	601a      	str	r2, [r3, #0]
  return result;
 8003ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004000:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004004:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	4b68      	ldr	r3, [pc, #416]	; (80041b0 <HAL_RCC_OscConfig+0x938>)
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	461a      	mov	r2, r3
 8004016:	2300      	movs	r3, #0
 8004018:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401a:	f7ff f90b 	bl	8003234 <HAL_GetTick>
 800401e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004022:	e00a      	b.n	800403a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004024:	f7ff f906 	bl	8003234 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d902      	bls.n	800403a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	f000 bc55 	b.w	80048e4 <HAL_RCC_OscConfig+0x106c>
 800403a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004042:	2202      	movs	r2, #2
 8004044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	fa93 f2a3 	rbit	r2, r3
 8004054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004058:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004062:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004066:	2202      	movs	r2, #2
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	fa93 f2a3 	rbit	r2, r3
 8004078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800408a:	2202      	movs	r2, #2
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	fa93 f2a3 	rbit	r2, r3
 800409c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_OscConfig+0x934>)
 80040a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040b2:	2102      	movs	r1, #2
 80040b4:	6019      	str	r1, [r3, #0]
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f1a3 	rbit	r1, r3
 80040c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040cc:	6019      	str	r1, [r3, #0]
  return result;
 80040ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d197      	bne.n	8004024 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 81a1 	beq.w	800444c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004110:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_RCC_OscConfig+0x934>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d116      	bne.n	800414a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411c:	4b23      	ldr	r3, [pc, #140]	; (80041ac <HAL_RCC_OscConfig+0x934>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	4a22      	ldr	r2, [pc, #136]	; (80041ac <HAL_RCC_OscConfig+0x934>)
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004126:	61d3      	str	r3, [r2, #28]
 8004128:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_RCC_OscConfig+0x934>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004134:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004142:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414a:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_RCC_OscConfig+0x93c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d11a      	bne.n	800418c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004156:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <HAL_RCC_OscConfig+0x93c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <HAL_RCC_OscConfig+0x93c>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004162:	f7ff f867 	bl	8003234 <HAL_GetTick>
 8004166:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	e009      	b.n	8004180 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416c:	f7ff f862 	bl	8003234 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b64      	cmp	r3, #100	; 0x64
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e3b1      	b.n	80048e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <HAL_RCC_OscConfig+0x93c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ef      	beq.n	800416c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800418c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d10d      	bne.n	80041b8 <HAL_RCC_OscConfig+0x940>
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCC_OscConfig+0x934>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4a02      	ldr	r2, [pc, #8]	; (80041ac <HAL_RCC_OscConfig+0x934>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6213      	str	r3, [r2, #32]
 80041a8:	e03c      	b.n	8004224 <HAL_RCC_OscConfig+0x9ac>
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	10908120 	.word	0x10908120
 80041b4:	40007000 	.word	0x40007000
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10c      	bne.n	80041e2 <HAL_RCC_OscConfig+0x96a>
 80041c8:	4bc1      	ldr	r3, [pc, #772]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4ac0      	ldr	r2, [pc, #768]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	6213      	str	r3, [r2, #32]
 80041d4:	4bbe      	ldr	r3, [pc, #760]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4abd      	ldr	r2, [pc, #756]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80041da:	f023 0304 	bic.w	r3, r3, #4
 80041de:	6213      	str	r3, [r2, #32]
 80041e0:	e020      	b.n	8004224 <HAL_RCC_OscConfig+0x9ac>
 80041e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b05      	cmp	r3, #5
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x994>
 80041f2:	4bb7      	ldr	r3, [pc, #732]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4ab6      	ldr	r2, [pc, #728]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	6213      	str	r3, [r2, #32]
 80041fe:	4bb4      	ldr	r3, [pc, #720]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4ab3      	ldr	r2, [pc, #716]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0x9ac>
 800420c:	4bb0      	ldr	r3, [pc, #704]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4aaf      	ldr	r2, [pc, #700]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	6213      	str	r3, [r2, #32]
 8004218:	4bad      	ldr	r3, [pc, #692]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4aac      	ldr	r2, [pc, #688]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 800421e:	f023 0304 	bic.w	r3, r3, #4
 8004222:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8081 	beq.w	8004338 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004236:	f7fe fffd 	bl	8003234 <HAL_GetTick>
 800423a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004240:	f7fe fff8 	bl	8003234 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e345      	b.n	80048e4 <HAL_RCC_OscConfig+0x106c>
 8004258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004260:	2202      	movs	r2, #2
 8004262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004268:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	fa93 f2a3 	rbit	r2, r3
 8004272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004276:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004280:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004284:	2202      	movs	r2, #2
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	fa93 f2a3 	rbit	r2, r3
 8004296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800429e:	601a      	str	r2, [r3, #0]
  return result;
 80042a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d102      	bne.n	80042c4 <HAL_RCC_OscConfig+0xa4c>
 80042be:	4b84      	ldr	r3, [pc, #528]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	e013      	b.n	80042ec <HAL_RCC_OscConfig+0xa74>
 80042c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	4b79      	ldr	r3, [pc, #484]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80042f4:	2102      	movs	r1, #2
 80042f6:	6011      	str	r1, [r2, #0]
 80042f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	fa92 f1a2 	rbit	r1, r2
 8004306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800430a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800430e:	6011      	str	r1, [r2, #0]
  return result;
 8004310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004314:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	fab2 f282 	clz	r2, r2
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	f002 021f 	and.w	r2, r2, #31
 800432a:	2101      	movs	r1, #1
 800432c:	fa01 f202 	lsl.w	r2, r1, r2
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d084      	beq.n	8004240 <HAL_RCC_OscConfig+0x9c8>
 8004336:	e07f      	b.n	8004438 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004338:	f7fe ff7c 	bl	8003234 <HAL_GetTick>
 800433c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004340:	e00b      	b.n	800435a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fe ff77 	bl	8003234 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e2c4      	b.n	80048e4 <HAL_RCC_OscConfig+0x106c>
 800435a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004362:	2202      	movs	r2, #2
 8004364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	fa93 f2a3 	rbit	r2, r3
 8004374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004378:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004382:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004386:	2202      	movs	r2, #2
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	fa93 f2a3 	rbit	r2, r3
 8004398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043a0:	601a      	str	r2, [r3, #0]
  return result;
 80043a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ac:	fab3 f383 	clz	r3, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f043 0302 	orr.w	r3, r3, #2
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d102      	bne.n	80043c6 <HAL_RCC_OscConfig+0xb4e>
 80043c0:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	e013      	b.n	80043ee <HAL_RCC_OscConfig+0xb76>
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80043ce:	2202      	movs	r2, #2
 80043d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	fa93 f2a3 	rbit	r2, r3
 80043e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80043f6:	2102      	movs	r1, #2
 80043f8:	6011      	str	r1, [r2, #0]
 80043fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	fa92 f1a2 	rbit	r1, r2
 8004408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004410:	6011      	str	r1, [r2, #0]
  return result;
 8004412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004416:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	fab2 f282 	clz	r2, r2
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	f002 021f 	and.w	r2, r2, #31
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f202 	lsl.w	r2, r1, r2
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d184      	bne.n	8004342 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004438:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004440:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 8004446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8242 	beq.w	80048e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445e:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <HAL_RCC_OscConfig+0xc58>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b08      	cmp	r3, #8
 8004468:	f000 8213 	beq.w	8004892 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	2b02      	cmp	r3, #2
 800447a:	f040 8162 	bne.w	8004742 <HAL_RCC_OscConfig+0xeca>
 800447e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004482:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800448a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004490:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	fa93 f2a3 	rbit	r2, r3
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044a2:	601a      	str	r2, [r3, #0]
  return result;
 80044a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	461a      	mov	r2, r3
 80044c0:	2300      	movs	r3, #0
 80044c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fe feb6 	bl	8003234 <HAL_GetTick>
 80044c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044cc:	e00c      	b.n	80044e8 <HAL_RCC_OscConfig+0xc70>
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fe feae 	bl	8003234 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1fd      	b.n	80048e4 <HAL_RCC_OscConfig+0x106c>
 80044e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80044f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	fa93 f2a3 	rbit	r2, r3
 8004504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004508:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800450c:	601a      	str	r2, [r3, #0]
  return result;
 800450e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004512:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004516:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d102      	bne.n	8004532 <HAL_RCC_OscConfig+0xcba>
 800452c:	4bb0      	ldr	r3, [pc, #704]	; (80047f0 <HAL_RCC_OscConfig+0xf78>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	e027      	b.n	8004582 <HAL_RCC_OscConfig+0xd0a>
 8004532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004536:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800453a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800453e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004544:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	fa93 f2a3 	rbit	r2, r3
 800454e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004552:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004560:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	fa93 f2a3 	rbit	r2, r3
 8004574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004578:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	4b9c      	ldr	r3, [pc, #624]	; (80047f0 <HAL_RCC_OscConfig+0xf78>)
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004586:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800458a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800458e:	6011      	str	r1, [r2, #0]
 8004590:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004594:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	fa92 f1a2 	rbit	r1, r2
 800459e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045a6:	6011      	str	r1, [r2, #0]
  return result;
 80045a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	fab2 f282 	clz	r2, r2
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	f042 0220 	orr.w	r2, r2, #32
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	f002 021f 	and.w	r2, r2, #31
 80045c2:	2101      	movs	r1, #1
 80045c4:	fa01 f202 	lsl.w	r2, r1, r2
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d182      	bne.n	80044d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ce:	4b88      	ldr	r3, [pc, #544]	; (80047f0 <HAL_RCC_OscConfig+0xf78>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	430b      	orrs	r3, r1
 80045f0:	497f      	ldr	r1, [pc, #508]	; (80047f0 <HAL_RCC_OscConfig+0xf78>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]
 80045f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80045fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004608:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	fa93 f2a3 	rbit	r2, r3
 8004612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004616:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800461a:	601a      	str	r2, [r3, #0]
  return result;
 800461c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004620:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004624:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	461a      	mov	r2, r3
 8004638:	2301      	movs	r3, #1
 800463a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fe fdfa 	bl	8003234 <HAL_GetTick>
 8004640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004644:	e009      	b.n	800465a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe fdf5 	bl	8003234 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e144      	b.n	80048e4 <HAL_RCC_OscConfig+0x106c>
 800465a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	fa93 f2a3 	rbit	r2, r3
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800467e:	601a      	str	r2, [r3, #0]
  return result;
 8004680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004684:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004688:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	d102      	bne.n	80046a4 <HAL_RCC_OscConfig+0xe2c>
 800469e:	4b54      	ldr	r3, [pc, #336]	; (80047f0 <HAL_RCC_OscConfig+0xf78>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	e027      	b.n	80046f4 <HAL_RCC_OscConfig+0xe7c>
 80046a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	fa93 f2a3 	rbit	r2, r3
 80046c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	fa93 f2a3 	rbit	r2, r3
 80046e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <HAL_RCC_OscConfig+0xf78>)
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80046fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004700:	6011      	str	r1, [r2, #0]
 8004702:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004706:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	fa92 f1a2 	rbit	r1, r2
 8004710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004714:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004718:	6011      	str	r1, [r2, #0]
  return result;
 800471a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800471e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	fab2 f282 	clz	r2, r2
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	f042 0220 	orr.w	r2, r2, #32
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	f002 021f 	and.w	r2, r2, #31
 8004734:	2101      	movs	r1, #1
 8004736:	fa01 f202 	lsl.w	r2, r1, r2
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d082      	beq.n	8004646 <HAL_RCC_OscConfig+0xdce>
 8004740:	e0cf      	b.n	80048e2 <HAL_RCC_OscConfig+0x106a>
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800474a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800474e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004754:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	fa93 f2a3 	rbit	r2, r3
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004766:	601a      	str	r2, [r3, #0]
  return result;
 8004768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004770:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800477c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	461a      	mov	r2, r3
 8004784:	2300      	movs	r3, #0
 8004786:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fe fd54 	bl	8003234 <HAL_GetTick>
 800478c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004790:	e009      	b.n	80047a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004792:	f7fe fd4f 	bl	8003234 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e09e      	b.n	80048e4 <HAL_RCC_OscConfig+0x106c>
 80047a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	fa93 f2a3 	rbit	r2, r3
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80047ca:	601a      	str	r2, [r3, #0]
  return result;
 80047cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80047d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d104      	bne.n	80047f4 <HAL_RCC_OscConfig+0xf7c>
 80047ea:	4b01      	ldr	r3, [pc, #4]	; (80047f0 <HAL_RCC_OscConfig+0xf78>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	e029      	b.n	8004844 <HAL_RCC_OscConfig+0xfcc>
 80047f0:	40021000 	.word	0x40021000
 80047f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80047fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004806:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	fa93 f2a3 	rbit	r2, r3
 8004810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004814:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	fa93 f2a3 	rbit	r2, r3
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <HAL_RCC_OscConfig+0x1078>)
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004848:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800484c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004850:	6011      	str	r1, [r2, #0]
 8004852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004856:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	fa92 f1a2 	rbit	r1, r2
 8004860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004864:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004868:	6011      	str	r1, [r2, #0]
  return result;
 800486a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800486e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	fab2 f282 	clz	r2, r2
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	f042 0220 	orr.w	r2, r2, #32
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	f002 021f 	and.w	r2, r2, #31
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f202 	lsl.w	r2, r1, r2
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d180      	bne.n	8004792 <HAL_RCC_OscConfig+0xf1a>
 8004890:	e027      	b.n	80048e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e01e      	b.n	80048e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_RCC_OscConfig+0x1078>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d10b      	bne.n	80048de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80048c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048da:	429a      	cmp	r2, r3
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000

080048f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b09e      	sub	sp, #120	; 0x78
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e162      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800490c:	4b90      	ldr	r3, [pc, #576]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d910      	bls.n	800493c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b8d      	ldr	r3, [pc, #564]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 0207 	bic.w	r2, r3, #7
 8004922:	498b      	ldr	r1, [pc, #556]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b89      	ldr	r3, [pc, #548]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e14a      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b82      	ldr	r3, [pc, #520]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	497f      	ldr	r1, [pc, #508]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004956:	4313      	orrs	r3, r2
 8004958:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80dc 	beq.w	8004b20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d13c      	bne.n	80049ea <HAL_RCC_ClockConfig+0xf6>
 8004970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004974:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d102      	bne.n	800499a <HAL_RCC_ClockConfig+0xa6>
 8004994:	4b6f      	ldr	r3, [pc, #444]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	e00f      	b.n	80049ba <HAL_RCC_ClockConfig+0xc6>
 800499a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800499e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	667b      	str	r3, [r7, #100]	; 0x64
 80049a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ac:	663b      	str	r3, [r7, #96]	; 0x60
 80049ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049b6:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049be:	65ba      	str	r2, [r7, #88]	; 0x58
 80049c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049c2:	fa92 f2a2 	rbit	r2, r2
 80049c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80049c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049ca:	fab2 f282 	clz	r2, r2
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	f042 0220 	orr.w	r2, r2, #32
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	f002 021f 	and.w	r2, r2, #31
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f202 	lsl.w	r2, r1, r2
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d17b      	bne.n	8004ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0f3      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d13c      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x178>
 80049f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d102      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x128>
 8004a16:	4b4f      	ldr	r3, [pc, #316]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	e00f      	b.n	8004a3c <HAL_RCC_ClockConfig+0x148>
 8004a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a38:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a40:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a44:	fa92 f2a2 	rbit	r2, r2
 8004a48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a4c:	fab2 f282 	clz	r2, r2
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	f042 0220 	orr.w	r2, r2, #32
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	f002 021f 	and.w	r2, r2, #31
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d13a      	bne.n	8004ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0b2      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	fa93 f3a3 	rbit	r3, r3
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x1a0>
 8004a8e:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	e00d      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x1bc>
 8004a94:	2302      	movs	r3, #2
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	fa93 f3a3 	rbit	r3, r3
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	623b      	str	r3, [r7, #32]
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	61ba      	str	r2, [r7, #24]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	fa92 f2a2 	rbit	r2, r2
 8004aba:	617a      	str	r2, [r7, #20]
  return result;
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	fab2 f282 	clz	r2, r2
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	f042 0220 	orr.w	r2, r2, #32
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	f002 021f 	and.w	r2, r2, #31
 8004ace:	2101      	movs	r1, #1
 8004ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e079      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f023 0203 	bic.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	491a      	ldr	r1, [pc, #104]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af0:	f7fe fba0 	bl	8003234 <HAL_GetTick>
 8004af4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fe fb9c 	bl	8003234 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e061      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <HAL_RCC_ClockConfig+0x260>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 020c 	and.w	r2, r3, #12
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1eb      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d214      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 0207 	bic.w	r2, r3, #7
 8004b36:	4906      	ldr	r1, [pc, #24]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <HAL_RCC_ClockConfig+0x25c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e040      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x2de>
 8004b50:	40022000 	.word	0x40022000
 8004b54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	491a      	ldr	r1, [pc, #104]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b82:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4912      	ldr	r1, [pc, #72]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b96:	f000 f829 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_ClockConfig+0x2e8>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba4:	22f0      	movs	r2, #240	; 0xf0
 8004ba6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	fa92 f2a2 	rbit	r2, r2
 8004bae:	60fa      	str	r2, [r7, #12]
  return result;
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	fab2 f282 	clz	r2, r2
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	40d3      	lsrs	r3, r2
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x2ec>)
 8004bbc:	5cd3      	ldrb	r3, [r2, r3]
 8004bbe:	fa21 f303 	lsr.w	r3, r1, r3
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <HAL_RCC_ClockConfig+0x2f0>)
 8004bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <HAL_RCC_ClockConfig+0x2f4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe faee 	bl	80031ac <HAL_InitTick>
  
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3778      	adds	r7, #120	; 0x78
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	08005e90 	.word	0x08005e90
 8004be4:	20000000 	.word	0x20000000
 8004be8:	20000004 	.word	0x20000004

08004bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b08b      	sub	sp, #44	; 0x2c
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004c06:	4b29      	ldr	r3, [pc, #164]	; (8004cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d002      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x30>
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d003      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0x36>
 8004c1a:	e03c      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c1c:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c1e:	623b      	str	r3, [r7, #32]
      break;
 8004c20:	e03c      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004c2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	fa92 f2a2 	rbit	r2, r2
 8004c34:	607a      	str	r2, [r7, #4]
  return result;
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	fab2 f282 	clz	r2, r2
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	40d3      	lsrs	r3, r2
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c46:	4b19      	ldr	r3, [pc, #100]	; (8004cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	220f      	movs	r2, #15
 8004c50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	fa92 f2a2 	rbit	r2, r2
 8004c58:	60fa      	str	r2, [r7, #12]
  return result;
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	fab2 f282 	clz	r2, r2
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	40d3      	lsrs	r3, r2
 8004c64:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c66:	5cd3      	ldrb	r3, [r2, r3]
 8004c68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c74:	4a0e      	ldr	r2, [pc, #56]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
 8004c84:	e004      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	623b      	str	r3, [r7, #32]
      break;
 8004c94:	e002      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c98:	623b      	str	r3, [r7, #32]
      break;
 8004c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	372c      	adds	r7, #44	; 0x2c
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	007a1200 	.word	0x007a1200
 8004cb4:	08005ea8 	.word	0x08005ea8
 8004cb8:	08005eb8 	.word	0x08005eb8
 8004cbc:	003d0900 	.word	0x003d0900

08004cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000000 	.word	0x20000000

08004cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004cde:	f7ff ffef 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8004ce2:	4601      	mov	r1, r0
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004cf0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	fa92 f2a2 	rbit	r2, r2
 8004cf8:	603a      	str	r2, [r7, #0]
  return result;
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	fab2 f282 	clz	r2, r2
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	40d3      	lsrs	r3, r2
 8004d04:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d06:	5cd3      	ldrb	r3, [r2, r3]
 8004d08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000
 8004d18:	08005ea0 	.word	0x08005ea0

08004d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d22:	f7ff ffcd 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8004d26:	4601      	mov	r1, r0
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004d34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	fa92 f2a2 	rbit	r2, r2
 8004d3c:	603a      	str	r2, [r7, #0]
  return result;
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	fab2 f282 	clz	r2, r2
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	40d3      	lsrs	r3, r2
 8004d48:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d4a:	5cd3      	ldrb	r3, [r2, r3]
 8004d4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	08005ea0 	.word	0x08005ea0

08004d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e095      	b.n	8004e9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d108      	bne.n	8004d8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d82:	d009      	beq.n	8004d98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	61da      	str	r2, [r3, #28]
 8004d8a:	e005      	b.n	8004d98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fe f8de 	bl	8002f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dd8:	d902      	bls.n	8004de0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e002      	b.n	8004de6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004dee:	d007      	beq.n	8004e00 <HAL_SPI_Init+0xa0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	ea42 0103 	orr.w	r1, r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	f003 0204 	and.w	r2, r3, #4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e7c:	ea42 0103 	orr.w	r1, r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_SPI_Transmit_IT+0x20>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e072      	b.n	8004fae <HAL_SPI_Transmit_IT+0x106>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_SPI_Transmit_IT+0x34>
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d102      	bne.n	8004ee2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ee0:	e060      	b.n	8004fa4 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d002      	beq.n	8004ef4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ef2:	e057      	b.n	8004fa4 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	88fa      	ldrh	r2, [r7, #6]
 8004f0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	88fa      	ldrh	r2, [r7, #6]
 8004f12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f38:	d903      	bls.n	8004f42 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <HAL_SPI_Transmit_IT+0x114>)
 8004f3e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f40:	e002      	b.n	8004f48 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <HAL_SPI_Transmit_IT+0x118>)
 8004f46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f50:	d10f      	bne.n	8004f72 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004f80:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d008      	beq.n	8004fa2 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e000      	b.n	8004fa4 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8004fa2:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	0800525d 	.word	0x0800525d
 8004fc0:	08005217 	.word	0x08005217

08004fc4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	099b      	lsrs	r3, r3, #6
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	099b      	lsrs	r3, r3, #6
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
    return;
 8005006:	e0d7      	b.n	80051b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_SPI_IRQHandler+0x66>
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	09db      	lsrs	r3, r3, #7
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
    return;
 8005028:	e0c6      	b.n	80051b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10c      	bne.n	8005050 <HAL_SPI_IRQHandler+0x8c>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	099b      	lsrs	r3, r3, #6
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80b4 	beq.w	80051b8 <HAL_SPI_IRQHandler+0x1f4>
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80ad 	beq.w	80051b8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	099b      	lsrs	r3, r3, #6
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d023      	beq.n	80050b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b03      	cmp	r3, #3
 8005074:	d011      	beq.n	800509a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507a:	f043 0204 	orr.w	r2, r3, #4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	e00b      	b.n	80050b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	693b      	ldr	r3, [r7, #16]
        return;
 80050b0:	e082      	b.n	80051b8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d014      	beq.n	80050e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00c      	beq.n	800510e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	f043 0208 	orr.w	r2, r3, #8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005100:	2300      	movs	r3, #0
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005112:	2b00      	cmp	r3, #0
 8005114:	d04f      	beq.n	80051b6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005124:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <HAL_SPI_IRQHandler+0x17e>
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d034      	beq.n	80051ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0203 	bic.w	r2, r2, #3
 8005150:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	2b00      	cmp	r3, #0
 8005158:	d011      	beq.n	800517e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <HAL_SPI_IRQHandler+0x1fc>)
 8005160:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe f9a5 	bl	80034b6 <HAL_DMA_Abort_IT>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	4a0d      	ldr	r2, [pc, #52]	; (80051c0 <HAL_SPI_IRQHandler+0x1fc>)
 800518c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe f98f 	bl	80034b6 <HAL_DMA_Abort_IT>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80051aa:	e003      	b.n	80051b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f813 	bl	80051d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051b2:	e000      	b.n	80051b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80051b4:	bf00      	nop
    return;
 80051b6:	bf00      	nop
  }
}
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	080051ed 	.word	0x080051ed

080051c4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff ffe5 	bl	80051d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d102      	bne.n	8005254 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f98a 	bl	8005568 <SPI_CloseTx_ISR>
  }
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	881a      	ldrh	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d102      	bne.n	8005298 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f968 	bl	8005568 <SPI_CloseTx_ISR>
  }
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052b0:	f7fd ffc0 	bl	8003234 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	4413      	add	r3, r2
 80052be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052c0:	f7fd ffb8 	bl	8003234 <HAL_GetTick>
 80052c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052c6:	4b39      	ldr	r3, [pc, #228]	; (80053ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	015b      	lsls	r3, r3, #5
 80052cc:	0d1b      	lsrs	r3, r3, #20
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	fb02 f303 	mul.w	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052d6:	e054      	b.n	8005382 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052de:	d050      	beq.n	8005382 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052e0:	f7fd ffa8 	bl	8003234 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d902      	bls.n	80052f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d13d      	bne.n	8005372 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005304:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530e:	d111      	bne.n	8005334 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005318:	d004      	beq.n	8005324 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005322:	d107      	bne.n	8005334 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005332:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533c:	d10f      	bne.n	800535e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800535c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e017      	b.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	3b01      	subs	r3, #1
 8005380:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4013      	ands	r3, r2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	bf0c      	ite	eq
 8005392:	2301      	moveq	r3, #1
 8005394:	2300      	movne	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	429a      	cmp	r2, r3
 800539e:	d19b      	bne.n	80052d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000000 	.word	0x20000000

080053b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	; 0x28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80053c2:	f7fd ff37 	bl	8003234 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	4413      	add	r3, r2
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80053d2:	f7fd ff2f 	bl	8003234 <HAL_GetTick>
 80053d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	330c      	adds	r3, #12
 80053de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053e0:	4b3d      	ldr	r3, [pc, #244]	; (80054d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	00da      	lsls	r2, r3, #3
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	0d1b      	lsrs	r3, r3, #20
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053f8:	e060      	b.n	80054bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005400:	d107      	bne.n	8005412 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005410:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005418:	d050      	beq.n	80054bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800541a:	f7fd ff0b 	bl	8003234 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005426:	429a      	cmp	r2, r3
 8005428:	d902      	bls.n	8005430 <SPI_WaitFifoStateUntilTimeout+0x80>
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d13d      	bne.n	80054ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800543e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005448:	d111      	bne.n	800546e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005452:	d004      	beq.n	800545e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545c:	d107      	bne.n	800546e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005476:	d10f      	bne.n	8005498 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005496:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e010      	b.n	80054ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d196      	bne.n	80053fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3728      	adds	r7, #40	; 0x28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000000 	.word	0x20000000

080054dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7ff ff5b 	bl	80053b0 <SPI_WaitFifoStateUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e027      	b.n	8005560 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	2180      	movs	r1, #128	; 0x80
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f7ff fec0 	bl	80052a0 <SPI_WaitFlagStateUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e014      	b.n	8005560 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff ff34 	bl	80053b0 <SPI_WaitFifoStateUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e000      	b.n	8005560 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005570:	f7fd fe60 	bl	8003234 <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005584:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	2164      	movs	r1, #100	; 0x64
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ffa6 	bl	80054dc <SPI_EndRxTxTransaction>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559a:	f043 0220 	orr.w	r2, r3, #32
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055aa:	2300      	movs	r3, #0
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff fe01 	bl	80051d8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80055d6:	e002      	b.n	80055de <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff fdf3 	bl	80051c4 <HAL_SPI_TxCpltCallback>
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e040      	b.n	800567a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fd fcfd 	bl	8003008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2224      	movs	r2, #36	; 0x24
 8005612:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0201 	bic.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f82d 	bl	8005684 <UART_SetConfig>
 800562a:	4603      	mov	r3, r0
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e022      	b.n	800567a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f957 	bl	80058f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005650:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005660:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0201 	orr.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f9de 	bl	8005a34 <UART_CheckIdleState>
 8005678:	4603      	mov	r3, r0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b8a      	ldr	r3, [pc, #552]	; (80058d8 <UART_SetConfig+0x254>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	6979      	ldr	r1, [r7, #20]
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a78      	ldr	r2, [pc, #480]	; (80058dc <UART_SetConfig+0x258>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d120      	bne.n	8005742 <UART_SetConfig+0xbe>
 8005700:	4b77      	ldr	r3, [pc, #476]	; (80058e0 <UART_SetConfig+0x25c>)
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	2b03      	cmp	r3, #3
 800570a:	d817      	bhi.n	800573c <UART_SetConfig+0xb8>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0x90>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005725 	.word	0x08005725
 8005718:	08005731 	.word	0x08005731
 800571c:	08005737 	.word	0x08005737
 8005720:	0800572b 	.word	0x0800572b
 8005724:	2300      	movs	r3, #0
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e01d      	b.n	8005766 <UART_SetConfig+0xe2>
 800572a:	2302      	movs	r3, #2
 800572c:	77fb      	strb	r3, [r7, #31]
 800572e:	e01a      	b.n	8005766 <UART_SetConfig+0xe2>
 8005730:	2304      	movs	r3, #4
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e017      	b.n	8005766 <UART_SetConfig+0xe2>
 8005736:	2308      	movs	r3, #8
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e014      	b.n	8005766 <UART_SetConfig+0xe2>
 800573c:	2310      	movs	r3, #16
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e011      	b.n	8005766 <UART_SetConfig+0xe2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a67      	ldr	r2, [pc, #412]	; (80058e4 <UART_SetConfig+0x260>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d102      	bne.n	8005752 <UART_SetConfig+0xce>
 800574c:	2300      	movs	r3, #0
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e009      	b.n	8005766 <UART_SetConfig+0xe2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a64      	ldr	r2, [pc, #400]	; (80058e8 <UART_SetConfig+0x264>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d102      	bne.n	8005762 <UART_SetConfig+0xde>
 800575c:	2300      	movs	r3, #0
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e001      	b.n	8005766 <UART_SetConfig+0xe2>
 8005762:	2310      	movs	r3, #16
 8005764:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576e:	d15a      	bne.n	8005826 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005770:	7ffb      	ldrb	r3, [r7, #31]
 8005772:	2b08      	cmp	r3, #8
 8005774:	d827      	bhi.n	80057c6 <UART_SetConfig+0x142>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <UART_SetConfig+0xf8>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	080057a1 	.word	0x080057a1
 8005780:	080057a9 	.word	0x080057a9
 8005784:	080057b1 	.word	0x080057b1
 8005788:	080057c7 	.word	0x080057c7
 800578c:	080057b7 	.word	0x080057b7
 8005790:	080057c7 	.word	0x080057c7
 8005794:	080057c7 	.word	0x080057c7
 8005798:	080057c7 	.word	0x080057c7
 800579c:	080057bf 	.word	0x080057bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a0:	f7ff fa9a 	bl	8004cd8 <HAL_RCC_GetPCLK1Freq>
 80057a4:	61b8      	str	r0, [r7, #24]
        break;
 80057a6:	e013      	b.n	80057d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a8:	f7ff fab8 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 80057ac:	61b8      	str	r0, [r7, #24]
        break;
 80057ae:	e00f      	b.n	80057d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b0:	4b4e      	ldr	r3, [pc, #312]	; (80058ec <UART_SetConfig+0x268>)
 80057b2:	61bb      	str	r3, [r7, #24]
        break;
 80057b4:	e00c      	b.n	80057d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b6:	f7ff fa19 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 80057ba:	61b8      	str	r0, [r7, #24]
        break;
 80057bc:	e008      	b.n	80057d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c2:	61bb      	str	r3, [r7, #24]
        break;
 80057c4:	e004      	b.n	80057d0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	77bb      	strb	r3, [r7, #30]
        break;
 80057ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d074      	beq.n	80058c0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	005a      	lsls	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	441a      	add	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2b0f      	cmp	r3, #15
 80057f0:	d916      	bls.n	8005820 <UART_SetConfig+0x19c>
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f8:	d212      	bcs.n	8005820 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f023 030f 	bic.w	r3, r3, #15
 8005802:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	085b      	lsrs	r3, r3, #1
 8005808:	b29b      	uxth	r3, r3
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	b29a      	uxth	r2, r3
 8005810:	89fb      	ldrh	r3, [r7, #14]
 8005812:	4313      	orrs	r3, r2
 8005814:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	89fa      	ldrh	r2, [r7, #14]
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	e04f      	b.n	80058c0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	77bb      	strb	r3, [r7, #30]
 8005824:	e04c      	b.n	80058c0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005826:	7ffb      	ldrb	r3, [r7, #31]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d828      	bhi.n	800587e <UART_SetConfig+0x1fa>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x1b0>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005859 	.word	0x08005859
 8005838:	08005861 	.word	0x08005861
 800583c:	08005869 	.word	0x08005869
 8005840:	0800587f 	.word	0x0800587f
 8005844:	0800586f 	.word	0x0800586f
 8005848:	0800587f 	.word	0x0800587f
 800584c:	0800587f 	.word	0x0800587f
 8005850:	0800587f 	.word	0x0800587f
 8005854:	08005877 	.word	0x08005877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7ff fa3e 	bl	8004cd8 <HAL_RCC_GetPCLK1Freq>
 800585c:	61b8      	str	r0, [r7, #24]
        break;
 800585e:	e013      	b.n	8005888 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005860:	f7ff fa5c 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8005864:	61b8      	str	r0, [r7, #24]
        break;
 8005866:	e00f      	b.n	8005888 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <UART_SetConfig+0x268>)
 800586a:	61bb      	str	r3, [r7, #24]
        break;
 800586c:	e00c      	b.n	8005888 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586e:	f7ff f9bd 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8005872:	61b8      	str	r0, [r7, #24]
        break;
 8005874:	e008      	b.n	8005888 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587a:	61bb      	str	r3, [r7, #24]
        break;
 800587c:	e004      	b.n	8005888 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	77bb      	strb	r3, [r7, #30]
        break;
 8005886:	bf00      	nop
    }

    if (pclk != 0U)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d018      	beq.n	80058c0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	085a      	lsrs	r2, r3, #1
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	441a      	add	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b0f      	cmp	r3, #15
 80058a6:	d909      	bls.n	80058bc <UART_SetConfig+0x238>
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ae:	d205      	bcs.n	80058bc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	e001      	b.n	80058c0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	efff69f3 	.word	0xefff69f3
 80058dc:	40013800 	.word	0x40013800
 80058e0:	40021000 	.word	0x40021000
 80058e4:	40004400 	.word	0x40004400
 80058e8:	40004800 	.word	0x40004800
 80058ec:	007a1200 	.word	0x007a1200

080058f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ee:	d10a      	bne.n	8005a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b098      	sub	sp, #96	; 0x60
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a44:	f7fd fbf6 	bl	8003234 <HAL_GetTick>
 8005a48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d12e      	bne.n	8005ab6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a60:	2200      	movs	r2, #0
 8005a62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f88c 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d021      	beq.n	8005ab6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a86:	653b      	str	r3, [r7, #80]	; 0x50
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a90:	647b      	str	r3, [r7, #68]	; 0x44
 8005a92:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e6      	bne.n	8005a72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e062      	b.n	8005b7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d149      	bne.n	8005b58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005acc:	2200      	movs	r2, #0
 8005ace:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f856 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d03c      	beq.n	8005b58 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	623b      	str	r3, [r7, #32]
   return(result);
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afc:	633b      	str	r3, [r7, #48]	; 0x30
 8005afe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e6      	bne.n	8005ade <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3308      	adds	r3, #8
 8005b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b30:	61fa      	str	r2, [r7, #28]
 8005b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	69b9      	ldr	r1, [r7, #24]
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e5      	bne.n	8005b10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e011      	b.n	8005b7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3758      	adds	r7, #88	; 0x58
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b94:	e049      	b.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9c:	d045      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fd fb49 	bl	8003234 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e048      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d031      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d110      	bne.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2208      	movs	r2, #8
 8005bda:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f838 	bl	8005c52 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2208      	movs	r2, #8
 8005be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e029      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c04:	d111      	bne.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f81e 	bl	8005c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e00f      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d0a6      	beq.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b095      	sub	sp, #84	; 0x54
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e5      	bne.n	8005c8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d118      	bne.n	8005cfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 0310 	bic.w	r3, r3, #16
 8005cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6979      	ldr	r1, [r7, #20]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e6      	bne.n	8005cc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d0e:	bf00      	nop
 8005d10:	3754      	adds	r7, #84	; 0x54
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <__libc_init_array>:
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	4d0d      	ldr	r5, [pc, #52]	; (8005d54 <__libc_init_array+0x38>)
 8005d20:	4c0d      	ldr	r4, [pc, #52]	; (8005d58 <__libc_init_array+0x3c>)
 8005d22:	1b64      	subs	r4, r4, r5
 8005d24:	10a4      	asrs	r4, r4, #2
 8005d26:	2600      	movs	r6, #0
 8005d28:	42a6      	cmp	r6, r4
 8005d2a:	d109      	bne.n	8005d40 <__libc_init_array+0x24>
 8005d2c:	4d0b      	ldr	r5, [pc, #44]	; (8005d5c <__libc_init_array+0x40>)
 8005d2e:	4c0c      	ldr	r4, [pc, #48]	; (8005d60 <__libc_init_array+0x44>)
 8005d30:	f000 f820 	bl	8005d74 <_init>
 8005d34:	1b64      	subs	r4, r4, r5
 8005d36:	10a4      	asrs	r4, r4, #2
 8005d38:	2600      	movs	r6, #0
 8005d3a:	42a6      	cmp	r6, r4
 8005d3c:	d105      	bne.n	8005d4a <__libc_init_array+0x2e>
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d44:	4798      	blx	r3
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7ee      	b.n	8005d28 <__libc_init_array+0xc>
 8005d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4e:	4798      	blx	r3
 8005d50:	3601      	adds	r6, #1
 8005d52:	e7f2      	b.n	8005d3a <__libc_init_array+0x1e>
 8005d54:	08005ed0 	.word	0x08005ed0
 8005d58:	08005ed0 	.word	0x08005ed0
 8005d5c:	08005ed0 	.word	0x08005ed0
 8005d60:	08005ed4 	.word	0x08005ed4

08005d64 <memset>:
 8005d64:	4402      	add	r2, r0
 8005d66:	4603      	mov	r3, r0
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d100      	bne.n	8005d6e <memset+0xa>
 8005d6c:	4770      	bx	lr
 8005d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d72:	e7f9      	b.n	8005d68 <memset+0x4>

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
