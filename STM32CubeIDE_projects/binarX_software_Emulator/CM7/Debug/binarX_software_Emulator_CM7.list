
binarX_software_Emulator_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007364  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800775c  0800775c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800775c  0800775c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007764  08007764  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08007770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  24000078  080077e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240006ec  080077e8  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8e2  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae9  00000000  00000000  0003f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00043478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00044690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f471  00000000  00000000  00045770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e42  00000000  00000000  00084be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187023  00000000  00000000  0009da23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00224a46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e74  00000000  00000000  00224a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080075e4 	.word	0x080075e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	080075e4 	.word	0x080075e4

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <SystemInit+0xfc>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <SystemInit+0xfc>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0xfc>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <SystemInit+0xfc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <SystemInit+0x100>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	2b06      	cmp	r3, #6
 8000616:	d807      	bhi.n	8000628 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <SystemInit+0x100>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x100>)
 8000622:	f043 0307 	orr.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemInit+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemInit+0x104>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x104>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemInit+0x104>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	492c      	ldr	r1, [pc, #176]	; (80006f0 <SystemInit+0x104>)
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemInit+0x108>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemInit+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemInit+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <SystemInit+0x100>)
 800065c:	f043 0307 	orr.w	r3, r3, #7
 8000660:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemInit+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemInit+0x104>)
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemInit+0x10c>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemInit+0x104>)
 800067c:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <SystemInit+0x110>)
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <SystemInit+0x104>)
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <SystemInit+0x114>)
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <SystemInit+0x104>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <SystemInit+0x114>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <SystemInit+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x104>)
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <SystemInit+0x114>)
 800069c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <SystemInit+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x104>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <SystemInit+0x104>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x118>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <SystemInit+0x118>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x11c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x120>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ce:	d202      	bcs.n	80006d6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0x124>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SystemInit+0x128>)
 80006d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006dc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	52002000 	.word	0x52002000
 80006f0:	58024400 	.word	0x58024400
 80006f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f8:	02020200 	.word	0x02020200
 80006fc:	01ff0000 	.word	0x01ff0000
 8000700:	01010280 	.word	0x01010280
 8000704:	580000c0 	.word	0x580000c0
 8000708:	5c001000 	.word	0x5c001000
 800070c:	ffff0000 	.word	0xffff0000
 8000710:	51008108 	.word	0x51008108
 8000714:	52004000 	.word	0x52004000

08000718 <_ZN15binarx_emulator14BinarXEmulator3RunEv>:

#include <string.h>

namespace binarx_emulator {

void BinarXEmulator::Run() {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if (!button_pressed_) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7c1b      	ldrb	r3, [r3, #16]
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d134      	bne.n	8000798 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x80>
    return;
  }
  BinarXEmulator::RunStartInfo();
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f8f8 	bl	8000924 <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv>

  // Need to start a timer
  uint32_t emulator_timeout =
      time_controller_->GetTicks() + kWaitForPayloadMaxTime;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68da      	ldr	r2, [r3, #12]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3304      	adds	r3, #4
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4610      	mov	r0, r2
 8000744:	4798      	blx	r3
 8000746:	4602      	mov	r2, r0
 8000748:	f64e 2360 	movw	r3, #60000	; 0xea60
 800074c:	4413      	add	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]

  while (emulator_timeout > time_controller_->GetTicks() &&
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68da      	ldr	r2, [r3, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3304      	adds	r3, #4
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4610      	mov	r0, r2
 8000760:	4798      	blx	r3
 8000762:	4602      	mov	r2, r0
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4293      	cmp	r3, r2
 8000768:	d905      	bls.n	8000776 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x5e>
         payload_status_ != PayloadDataStatus::kTrasferCompleted) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	695b      	ldr	r3, [r3, #20]
  while (emulator_timeout > time_controller_->GetTicks() &&
 800076e:	2b02      	cmp	r3, #2
 8000770:	d001      	beq.n	8000776 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x5e>
 8000772:	2301      	movs	r3, #1
 8000774:	e000      	b.n	8000778 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x60>
 8000776:	2300      	movs	r3, #0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x6c>
    PayloadCommunicationHandler();
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 f80f 	bl	80007a0 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv>
  while (emulator_timeout > time_controller_->GetTicks() &&
 8000782:	e7e5      	b.n	8000750 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x38>
  }

  button_pressed_ = false;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	741a      	strb	r2, [r3, #16]
  payload_status_ = PayloadDataStatus::kWaitingForPayload;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]

  BinarXEmulator::RunEndInfo();
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f8f5 	bl	8000980 <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv>
 8000796:	e000      	b.n	800079a <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x82>
    return;
 8000798:	bf00      	nop
}
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv>:

void BinarXEmulator::PayloadCommunicationHandler() {
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b0c8      	sub	sp, #288	; 0x120
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007ae:	6018      	str	r0, [r3, #0]
  // Only run once the payload is ready
  if (payload_status_ != PayloadDataStatus::kPayloadReady) {
 80007b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d17e      	bne.n	80008be <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x11e>
    return;
  }

  // Turn on the LED to demostrate SPI success
  gpio_controller_->SetHigh(binarx_gpio_interface::GpioSelector::GreenLed);
 80007c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2102      	movs	r1, #2
 80007de:	4610      	mov	r0, r2
 80007e0:	4798      	blx	r3

  char error_msg[] =
 80007e2:	4a39      	ldr	r2, [pc, #228]	; (80008c8 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x128>)
 80007e4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007e8:	4611      	mov	r1, r2
 80007ea:	224d      	movs	r2, #77	; 0x4d
 80007ec:	4618      	mov	r0, r3
 80007ee:	f006 fe9f 	bl	8007530 <memcpy>
      "Emulator \n ";

  // // Trigger the Spi Receive message
  uint8_t receive_buffer[kMaxPayloadDataLength];
  binarx_serial_interface::SerialStatus serial_status =
      payload_communication_->Receive(receive_buffer, kMaxPayloadDataLength,
 80007f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000802:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
                                      kDefaultCommunicationDelay);
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3304      	adds	r3, #4
 800080e:	681c      	ldr	r4, [r3, #0]
      payload_communication_->Receive(receive_buffer, kMaxPayloadDataLength,
 8000810:	f107 0108 	add.w	r1, r7, #8
 8000814:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000818:	22c8      	movs	r2, #200	; 0xc8
 800081a:	47a0      	blx	r4
 800081c:	4603      	mov	r3, r0
 800081e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  // Check the status of the SPI transaction
  if (serial_status == binarx_serial_interface::SerialStatus::Success) {
 8000822:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000826:	2b00      	cmp	r3, #0
 8000828:	d114      	bne.n	8000854 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0xb4>
    // Send the data over UART if SPI data was received succesfully
    computer_communication_->Transmit(receive_buffer, sizeof(receive_buffer),
 800082a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800082e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6858      	ldr	r0, [r3, #4]
 8000836:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800083a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
                                      kDefaultCommunicationDelay);
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681c      	ldr	r4, [r3, #0]
    computer_communication_->Transmit(receive_buffer, sizeof(receive_buffer),
 8000846:	f107 0108 	add.w	r1, r7, #8
 800084a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800084e:	22c8      	movs	r2, #200	; 0xc8
 8000850:	47a0      	blx	r4
 8000852:	e01a      	b.n	800088a <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0xea>
  } else {
    // Otherwise, copy error message to receive buffer
    computer_communication_->Transmit((uint8_t *)error_msg, strlen(error_msg),
 8000854:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000858:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685d      	ldr	r5, [r3, #4]
 8000860:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000864:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
                                      kDefaultCommunicationDelay);
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681c      	ldr	r4, [r3, #0]
    computer_communication_->Transmit((uint8_t *)error_msg, strlen(error_msg),
 8000870:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fd2f 	bl	80002d8 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000882:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000886:	4628      	mov	r0, r5
 8000888:	47a0      	blx	r4
  }
  // // Let the main runner know that the payload has sent the information
  payload_status_ = PayloadDataStatus::kTrasferCompleted;
 800088a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800088e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2202      	movs	r2, #2
 8000896:	615a      	str	r2, [r3, #20]

  // Make sure the Green LED is off
  gpio_controller_->SetLow(binarx_gpio_interface::GpioSelector::GreenLed);
 8000898:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800089c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	689a      	ldr	r2, [r3, #8]
 80008a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3304      	adds	r3, #4
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2102      	movs	r1, #2
 80008b8:	4610      	mov	r0, r2
 80008ba:	4798      	blx	r3
 80008bc:	e000      	b.n	80008c0 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x120>
    return;
 80008be:	bf00      	nop
}
 80008c0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bdb0      	pop	{r4, r5, r7, pc}
 80008c8:	080075fc 	.word	0x080075fc

080008cc <_ZN15binarx_emulator14BinarXEmulator4InitEv>:

void BinarXEmulator::Init() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  // turn on Yellow LED
  gpio_controller_->SetHigh(binarx_gpio_interface::GpioSelector::YellowLed);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2101      	movs	r1, #1
 80008e2:	4610      	mov	r0, r2
 80008e4:	4798      	blx	r3
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <_ZN15binarx_emulator14BinarXEmulator28PayloadCommunicationCallbackEv>:

void BinarXEmulator::PayloadCommunicationCallback() {
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  payload_status_ = PayloadDataStatus::kPayloadReady;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	615a      	str	r2, [r3, #20]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <_ZN15binarx_emulator14BinarXEmulator19ButtonPressCallbackEv>:
void BinarXEmulator::ButtonPressCallback() { button_pressed_ = true; }
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2201      	movs	r2, #1
 8000914:	741a      	strb	r2, [r3, #16]
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv>:

void BinarXEmulator::RunStartInfo() {
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b090      	sub	sp, #64	; 0x40
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  // turn on red LED
  gpio_controller_->SetHigh(binarx_gpio_interface::GpioSelector::RedLed);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2103      	movs	r1, #3
 800093a:	4610      	mov	r0, r2
 800093c:	4798      	blx	r3
  // Print a message to the Serial Monitor to inform the students
  uint8_t info_msg[] =
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv+0x58>)
 8000940:	f107 0408 	add.w	r4, r7, #8
 8000944:	461d      	mov	r5, r3
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000952:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000956:	e884 0003 	stmia.w	r4, {r0, r1}
      "INFO: Button pressed and waiting for SPI transmission \n";
  computer_communication_->Transmit(info_msg, sizeof(info_msg),
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6858      	ldr	r0, [r3, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685b      	ldr	r3, [r3, #4]
                                    kDefaultCommunicationDelay);
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681c      	ldr	r4, [r3, #0]
  computer_communication_->Transmit(info_msg, sizeof(info_msg),
 8000966:	f107 0108 	add.w	r1, r7, #8
 800096a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800096e:	2238      	movs	r2, #56	; 0x38
 8000970:	47a0      	blx	r4
}
 8000972:	bf00      	nop
 8000974:	3740      	adds	r7, #64	; 0x40
 8000976:	46bd      	mov	sp, r7
 8000978:	bdb0      	pop	{r4, r5, r7, pc}
 800097a:	bf00      	nop
 800097c:	0800764c 	.word	0x0800764c

08000980 <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv>:

void BinarXEmulator::RunEndInfo() {
 8000980:	b5b0      	push	{r4, r5, r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  // Print a message to the Serial Monitor to inform the students
  uint8_t info_msg[] = "INFO: Turning emulator off \n";
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv+0x50>)
 800098a:	f107 0408 	add.w	r4, r7, #8
 800098e:	461d      	mov	r5, r3
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000998:	c407      	stmia	r4!, {r0, r1, r2}
 800099a:	7023      	strb	r3, [r4, #0]
  computer_communication_->Transmit(info_msg, sizeof(info_msg),
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6858      	ldr	r0, [r3, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
                                    kDefaultCommunicationDelay);
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681c      	ldr	r4, [r3, #0]
  computer_communication_->Transmit(info_msg, sizeof(info_msg),
 80009a8:	f107 0108 	add.w	r1, r7, #8
 80009ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80009b0:	221d      	movs	r2, #29
 80009b2:	47a0      	blx	r4

  // turn on red LED
  gpio_controller_->SetLow(binarx_gpio_interface::GpioSelector::RedLed);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3304      	adds	r3, #4
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2103      	movs	r1, #3
 80009c4:	4610      	mov	r0, r2
 80009c6:	4798      	blx	r3
}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bdb0      	pop	{r4, r5, r7, pc}
 80009d0:	08007684 	.word	0x08007684

080009d4 <_ZN16binarx_gpio_impl8GpioImpl7SetHighEN21binarx_gpio_interface12GpioSelectorE>:
#include "gpio_interface.h"
#include "main.h"

namespace binarx_gpio_impl {

void GpioImpl::SetHigh(binarx_gpio_interface::GpioSelector gpio) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(GetPort(gpio), GetPin(gpio), GPIO_PIN_SET);
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	4619      	mov	r1, r3
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f895 	bl	8000b14 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 80009ea:	4604      	mov	r4, r0
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	4619      	mov	r1, r3
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f871 	bl	8000ad8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2201      	movs	r2, #1
 80009fa:	4619      	mov	r1, r3
 80009fc:	4620      	mov	r0, r4
 80009fe:	f001 fa41 	bl	8001e84 <HAL_GPIO_WritePin>
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}

08000a0a <_ZN16binarx_gpio_impl8GpioImpl6SetLowEN21binarx_gpio_interface12GpioSelectorE>:
void GpioImpl::SetLow(binarx_gpio_interface::GpioSelector gpio) {
 8000a0a:	b590      	push	{r4, r7, lr}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(GetPort(gpio), GetPin(gpio), GPIO_PIN_RESET);
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 f87a 	bl	8000b14 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000a20:	4604      	mov	r4, r0
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	4619      	mov	r1, r3
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f856 	bl	8000ad8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4619      	mov	r1, r3
 8000a32:	4620      	mov	r0, r4
 8000a34:	f001 fa26 	bl	8001e84 <HAL_GPIO_WritePin>
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}

08000a40 <_ZN16binarx_gpio_impl8GpioImpl9TogglePinEN21binarx_gpio_interface12GpioSelectorE>:
void GpioImpl::TogglePin(binarx_gpio_interface::GpioSelector gpio) {
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_TogglePin(GetPort(gpio), GetPin(gpio));
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f85f 	bl	8000b14 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000a56:	4604      	mov	r4, r0
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f83b 	bl	8000ad8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4620      	mov	r0, r4
 8000a68:	f001 fa25 	bl	8001eb6 <HAL_GPIO_TogglePin>
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd90      	pop	{r4, r7, pc}

08000a74 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm>:
binarx_gpio_interface::GpioStatus GpioImpl::WaitForInterrupt(
    binarx_gpio_interface::GpioSelector gpio, uint32_t timeout) {
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	72fb      	strb	r3, [r7, #11]
  for (uint32_t i = timeout; i > 0; i--) {
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d020      	beq.n	8000ace <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x5a>
    if (HAL_GPIO_ReadPin(GetPort(gpio), GetPin(gpio)) == GPIO_PIN_SET) {
 8000a8c:	7afb      	ldrb	r3, [r7, #11]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f000 f83f 	bl	8000b14 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000a96:	4604      	mov	r4, r0
 8000a98:	7afb      	ldrb	r3, [r7, #11]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f000 f81b 	bl	8000ad8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f001 f9d4 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x4c>
      return binarx_gpio_interface::GpioStatus::Success;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e007      	b.n	8000ad0 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x5c>
    }
    HAL_Delay(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f000 fed7 	bl	8001874 <HAL_Delay>
  for (uint32_t i = timeout; i > 0; i--) {
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e7db      	b.n	8000a86 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x12>
  }
  return binarx_gpio_interface::GpioStatus::Timeout;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}

08000ad8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>:

uint16_t GpioImpl::GetPin(binarx_gpio_interface::GpioSelector gpio) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
  switch (gpio) {
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d00a      	beq.n	8000b00 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x28>
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	dc0b      	bgt.n	8000b06 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d002      	beq.n	8000af8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x20>
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d002      	beq.n	8000afc <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x24>
 8000af6:	e006      	b.n	8000b06 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
    case binarx_gpio_interface::GpioSelector::YellowLed:
      return LD2_Pin;
 8000af8:	2302      	movs	r3, #2
 8000afa:	e004      	b.n	8000b06 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
    case binarx_gpio_interface::GpioSelector::GreenLed:
      return LD1_Pin;
 8000afc:	2301      	movs	r3, #1
 8000afe:	e002      	b.n	8000b06 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
    case binarx_gpio_interface::GpioSelector::RedLed:
      return LD3_Pin;
 8000b00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b04:	e7ff      	b.n	8000b06 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
  }
};
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>:
GPIO_TypeDef* GpioImpl::GetPort(binarx_gpio_interface::GpioSelector gpio) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
  switch (gpio) {
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d00a      	beq.n	8000b3c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x28>
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	dc0a      	bgt.n	8000b40 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d002      	beq.n	8000b34 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x20>
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d002      	beq.n	8000b38 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x24>
 8000b32:	e005      	b.n	8000b40 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
    case binarx_gpio_interface::GpioSelector::YellowLed:
      return LD2_GPIO_Port;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x38>)
 8000b36:	e003      	b.n	8000b40 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
    case binarx_gpio_interface::GpioSelector::GreenLed:
      return LD1_GPIO_Port;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x3c>)
 8000b3a:	e001      	b.n	8000b40 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
    case binarx_gpio_interface::GpioSelector::RedLed:
      return LD3_GPIO_Port;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x3c>)
 8000b3e:	e7ff      	b.n	8000b40 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
  }
};
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	58021000 	.word	0x58021000
 8000b50:	58020400 	.word	0x58020400

08000b54 <_ZN21binarx_gpio_interface13GpioInterfaceC1Ev>:

/**
 * @brief The GPIO interface to allow for dependency injection and testing
 *
 */
class GpioInterface {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <_ZN21binarx_gpio_interface13GpioInterfaceC1Ev+0x1c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	080076f4 	.word	0x080076f4

08000b74 <_ZN16binarx_gpio_impl8GpioImplC1Ev>:

namespace binarx_gpio_impl {

class GpioImpl : public binarx_gpio_interface::GpioInterface {
 public:
  GpioImpl(){};
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffe8 	bl	8000b54 <_ZN21binarx_gpio_interface13GpioInterfaceC1Ev>
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <_ZN16binarx_gpio_impl8GpioImplC1Ev+0x20>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	080076bc 	.word	0x080076bc

08000b98 <_ZN21binarx_time_interface13TimeInterfaceC1Ev>:
#pragma once
#include <stdint.h>

namespace binarx_time_interface {

class TimeInterface {
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <_ZN21binarx_time_interface13TimeInterfaceC1Ev+0x1c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	080076e4 	.word	0x080076e4

08000bb8 <_ZN16binarx_time_impl8TimeImplC1Ev>:

namespace binarx_time_impl {

class TimeImpl : public binarx_time_interface::TimeInterface {
 public:
   TimeImpl(){};
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffe8 	bl	8000b98 <_ZN21binarx_time_interface13TimeInterfaceC1Ev>
 8000bc8:	4a03      	ldr	r2, [pc, #12]	; (8000bd8 <_ZN16binarx_time_impl8TimeImplC1Ev+0x20>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	0800772c 	.word	0x0800772c

08000bdc <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev>:
/**
 * @brief The Serial Comunication interface to allow for dependency injection
 * and testing
 *
 */
class SerialCommunicationInterface {
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev+0x1c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	080076d4 	.word	0x080076d4

08000bfc <_ZN18binarx_serial_impl7SpiImplC1Ev>:

namespace binarx_serial_impl {

class SpiImpl : public binarx_serial_interface::SerialCommunicationInterface {
 public:
  SpiImpl(){};
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ffe8 	bl	8000bdc <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev>
 8000c0c:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <_ZN18binarx_serial_impl7SpiImplC1Ev+0x20>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	0800771c 	.word	0x0800771c

08000c20 <_ZN18binarx_serial_impl8UartImplC1Ev>:
                                                uint32_t timeout);
};

class UartImpl : public binarx_serial_interface::SerialCommunicationInterface {
 public:
  UartImpl(){};
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ffd6 	bl	8000bdc <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev>
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <_ZN18binarx_serial_impl8UartImplC1Ev+0x20>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	0800770c 	.word	0x0800770c

08000c44 <_ZN15binarx_emulator14BinarXEmulatorC1EPN23binarx_serial_interface28SerialCommunicationInterfaceES3_PN21binarx_gpio_interface13GpioInterfaceEPN21binarx_time_interface13TimeInterfaceE>:
   *
   * @param spi_communication Pointer to the SPI implementation object
   * @param uart_communication Pointer to the UART implementation object
   * @param gpio_object Pointer to the GPIO implementation object
   */
  BinarXEmulator(binarx_serial_interface::SerialCommunicationInterface*
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
      : payload_communication_(payload_communication),
        computer_communication_(computer_communication),
        gpio_controller_(gpio_object),
        time_controller_(time_object),
        button_pressed_(false),
        payload_status_(PayloadDataStatus::kWaitingForPayload){};
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	741a      	strb	r2, [r3, #16]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <HAL_GPIO_EXTI_Callback>:
  binarx_time_impl::TimeImpl time_controller = binarx_time_impl::TimeImpl();
  binarx_emulator::BinarXEmulator emulator =  binarx_emulator::BinarXEmulator(&spi_controller, &uart_controller, &gpio_controller, &time_controller);



extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	2b10      	cmp	r3, #16
 8000c92:	d006      	beq.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x1e>
 8000c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c98:	d107      	bne.n	8000caa <HAL_GPIO_EXTI_Callback+0x26>
    case B1_Pin:
      emulator.ButtonPressCallback();
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c9c:	f7ff fe34 	bl	8000908 <_ZN15binarx_emulator14BinarXEmulator19ButtonPressCallbackEv>
      break;
 8000ca0:	e004      	b.n	8000cac <HAL_GPIO_EXTI_Callback+0x28>
    case Payload_Pin:
      emulator.PayloadCommunicationCallback();
 8000ca2:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000ca4:	f7ff fe23 	bl	80008ee <_ZN15binarx_emulator14BinarXEmulator28PayloadCommunicationCallbackEv>
      break;
 8000ca8:	e000      	b.n	8000cac <HAL_GPIO_EXTI_Callback+0x28>
    default:
      break;
 8000caa:	bf00      	nop
  }
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	240006cc 	.word	0x240006cc

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fd47 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f829 	bl	8000d18 <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <main+0x58>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <main+0x58>)
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <main+0x58>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f001 f91b 	bl	8001f20 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f001 f931 	bl	8001f54 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf2:	f000 f991 	bl	8001018 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000cf6:	f000 f8f9 	bl	8000eec <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000cfa:	f000 f957 	bl	8000fac <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_SPI1_Init();
 8000cfe:	f000 f899 	bl	8000e34 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  emulator.Init();
 8000d02:	4804      	ldr	r0, [pc, #16]	; (8000d14 <main+0x5c>)
 8000d04:	f7ff fde2 	bl	80008cc <_ZN15binarx_emulator14BinarXEmulator4InitEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  emulator.Run();
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <main+0x5c>)
 8000d0a:	f7ff fd05 	bl	8000718 <_ZN15binarx_emulator14BinarXEmulator3RunEv>
 8000d0e:	e7fb      	b.n	8000d08 <main+0x50>
 8000d10:	58024400 	.word	0x58024400
 8000d14:	240006cc 	.word	0x240006cc

08000d18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09c      	sub	sp, #112	; 0x70
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	224c      	movs	r2, #76	; 0x4c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f006 fc10 	bl	800754c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2220      	movs	r2, #32
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f006 fc0a 	bl	800754c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d38:	2004      	movs	r0, #4
 8000d3a:	f001 fa67 	bl	800220c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <_Z18SystemClock_Configv+0x114>)
 8000d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d46:	4a39      	ldr	r2, [pc, #228]	; (8000e2c <_Z18SystemClock_Configv+0x114>)
 8000d48:	f023 0301 	bic.w	r3, r3, #1
 8000d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d4e:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <_Z18SystemClock_Configv+0x114>)
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <_Z18SystemClock_Configv+0x118>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d60:	4a33      	ldr	r2, [pc, #204]	; (8000e30 <_Z18SystemClock_Configv+0x118>)
 8000d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <_Z18SystemClock_Configv+0x118>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <_Z18SystemClock_Configv+0x118>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d80:	bf14      	ite	ne
 8000d82:	2301      	movne	r3, #1
 8000d84:	2300      	moveq	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d000      	beq.n	8000d8e <_Z18SystemClock_Configv+0x76>
 8000d8c:	e7f2      	b.n	8000d74 <_Z18SystemClock_Configv+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d92:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9c:	2340      	movs	r3, #64	; 0x40
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da0:	2302      	movs	r3, #2
 8000da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da4:	2302      	movs	r3, #2
 8000da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000dac:	2318      	movs	r3, #24
 8000dae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db4:	2304      	movs	r3, #4
 8000db6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fa87 	bl	80022e0 <HAL_RCC_OscConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	bf14      	ite	ne
 8000dd8:	2301      	movne	r3, #1
 8000dda:	2300      	moveq	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8000de2:	f000 f9df 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	233f      	movs	r3, #63	; 0x3f
 8000de8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fec2 	bl	8002b94 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 8000e20:	f000 f9c0 	bl	80011a4 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3770      	adds	r7, #112	; 0x70
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	58000400 	.word	0x58000400
 8000e30:	58024800 	.word	0x58024800

08000e34 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ee8 <_ZL12MX_SPI1_Initv+0xb4>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e52:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ec6:	f004 f81d 	bl	8004f04 <HAL_SPI_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf14      	ite	ne
 8000ed0:	2301      	movne	r3, #1
 8000ed2:	2300      	moveq	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <_ZL12MX_SPI1_Initv+0xaa>
  {
    Error_Handler();
 8000eda:	f000 f963 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000094 	.word	0x24000094
 8000ee8:	40013000 	.word	0x40013000

08000eec <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ef2:	4a2d      	ldr	r2, [pc, #180]	; (8000fa8 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f34:	481b      	ldr	r0, [pc, #108]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f36:	f004 fd7e 	bl	8005a36 <HAL_UART_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf14      	ite	ne
 8000f40:	2301      	movne	r3, #1
 8000f42:	2300      	moveq	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000f4a:	f000 f92b 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f52:	f005 fed2 	bl	8006cfa <HAL_UARTEx_SetTxFifoThreshold>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000f66:	f000 f91d 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f6e:	f005 ff02 	bl	8006d76 <HAL_UARTEx_SetRxFifoThreshold>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000f82:	f000 f90f 	bl	80011a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f88:	f005 fe7e 	bl	8006c88 <HAL_UARTEx_DisableFifoMode>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf14      	ite	ne
 8000f92:	2301      	movne	r3, #1
 8000f94:	2300      	moveq	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000f9c:	f000 f902 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2400011c 	.word	0x2400011c
 8000fa8:	40004800 	.word	0x40004800

08000fac <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fb8:	2209      	movs	r2, #9
 8000fba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fca:	2202      	movs	r2, #2
 8000fcc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ff4:	f000 ffc2 	bl	8001f7c <HAL_PCD_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf14      	ite	ne
 8000ffe:	2301      	movne	r3, #1
 8001000:	2300      	moveq	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8001008:	f000 f8cc 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	240001b0 	.word	0x240001b0
 8001014:	40080000 	.word	0x40080000

08001018 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b58      	ldr	r3, [pc, #352]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001034:	4a56      	ldr	r2, [pc, #344]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103e:	4b54      	ldr	r3, [pc, #336]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104c:	4b50      	ldr	r3, [pc, #320]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001052:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105c:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001070:	4a47      	ldr	r2, [pc, #284]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107a:	4b45      	ldr	r3, [pc, #276]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b41      	ldr	r3, [pc, #260]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108e:	4a40      	ldr	r2, [pc, #256]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001098:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	4a38      	ldr	r2, [pc, #224]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	4a31      	ldr	r2, [pc, #196]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <_ZL12MX_GPIO_Initv+0x178>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f244 0101 	movw	r1, #16385	; 0x4001
 80010e8:	482a      	ldr	r0, [pc, #168]	; (8001194 <_ZL12MX_GPIO_Initv+0x17c>)
 80010ea:	f000 fecb 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2102      	movs	r1, #2
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <_ZL12MX_GPIO_Initv+0x180>)
 80010f4:	f000 fec6 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4823      	ldr	r0, [pc, #140]	; (800119c <_ZL12MX_GPIO_Initv+0x184>)
 8001110:	f000 fcf0 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Payload_Pin */
  GPIO_InitStruct.Pin = Payload_Pin;
 8001114:	2310      	movs	r3, #16
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001118:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Payload_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	481d      	ldr	r0, [pc, #116]	; (80011a0 <_ZL12MX_GPIO_Initv+0x188>)
 800112a:	f000 fce3 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800112e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4813      	ldr	r0, [pc, #76]	; (8001194 <_ZL12MX_GPIO_Initv+0x17c>)
 8001148:	f000 fcd4 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <_ZL12MX_GPIO_Initv+0x180>)
 8001164:	f000 fcc6 	bl	8001af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	200a      	movs	r0, #10
 800116e:	f000 fc8c 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001172:	200a      	movs	r0, #10
 8001174:	f000 fca3 	bl	8001abe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2028      	movs	r0, #40	; 0x28
 800117e:	f000 fc84 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001182:	2028      	movs	r0, #40	; 0x28
 8001184:	f000 fc9b 	bl	8001abe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001188:	bf00      	nop
 800118a:	3730      	adds	r7, #48	; 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	58024400 	.word	0x58024400
 8001194:	58020400 	.word	0x58020400
 8001198:	58021000 	.word	0x58021000
 800119c:	58020800 	.word	0x58020800
 80011a0:	58020000 	.word	0x58020000

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d118      	bne.n	80011f2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d113      	bne.n	80011f2 <_Z41__static_initialization_and_destruction_0ii+0x42>
binarx_gpio_impl::GpioImpl gpio_controller = binarx_gpio_impl::GpioImpl();
 80011ca:	480c      	ldr	r0, [pc, #48]	; (80011fc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80011cc:	f7ff fcd2 	bl	8000b74 <_ZN16binarx_gpio_impl8GpioImplC1Ev>
  binarx_serial_impl::SpiImpl spi_controller = binarx_serial_impl::SpiImpl();
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80011d2:	f7ff fd13 	bl	8000bfc <_ZN18binarx_serial_impl7SpiImplC1Ev>
  binarx_serial_impl::UartImpl uart_controller = binarx_serial_impl::UartImpl();
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80011d8:	f7ff fd22 	bl	8000c20 <_ZN18binarx_serial_impl8UartImplC1Ev>
  binarx_time_impl::TimeImpl time_controller = binarx_time_impl::TimeImpl();
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80011de:	f7ff fceb 	bl	8000bb8 <_ZN16binarx_time_impl8TimeImplC1Ev>
  binarx_emulator::BinarXEmulator emulator =  binarx_emulator::BinarXEmulator(&spi_controller, &uart_controller, &gpio_controller, &time_controller);
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80011ea:	4905      	ldr	r1, [pc, #20]	; (8001200 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80011ee:	f7ff fd29 	bl	8000c44 <_ZN15binarx_emulator14BinarXEmulatorC1EPN23binarx_serial_interface28SerialCommunicationInterfaceES3_PN21binarx_gpio_interface13GpioInterfaceEPN21binarx_time_interface13TimeInterfaceE>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240006bc 	.word	0x240006bc
 8001200:	240006c0 	.word	0x240006c0
 8001204:	240006c4 	.word	0x240006c4
 8001208:	240006c8 	.word	0x240006c8
 800120c:	240006cc 	.word	0x240006cc

08001210 <_GLOBAL__sub_I_hspi1>:
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
 8001214:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ffc9 	bl	80011b0 <_Z41__static_initialization_and_destruction_0ii>
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZN18binarx_serial_impl7SpiImpl8TransmitEPhtm>:

namespace binarx_serial_impl {

binarx_serial_interface::SerialStatus SpiImpl::Transmit(uint8_t *buffer,
                                                        uint16_t size,
                                                        uint32_t timeout) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	4613      	mov	r3, r2
 800122e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_SPI_Transmit(&hspi1, buffer, size, timeout);
 8001230:	88fa      	ldrh	r2, [r7, #6]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <_ZN18binarx_serial_impl7SpiImpl8TransmitEPhtm+0x34>)
 8001238:	f003 ff88 	bl	800514c <HAL_SPI_Transmit>
 800123c:	4603      	mov	r3, r0
 800123e:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f85c 	bl	8001300 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 8001248:	4603      	mov	r3, r0
};
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	24000094 	.word	0x24000094

08001258 <_ZN18binarx_serial_impl7SpiImpl7ReceiveEPhtm>:
binarx_serial_interface::SerialStatus SpiImpl::Receive(uint8_t *receive_buffer,
                                                       uint16_t size,
                                                       uint32_t timeout) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	4613      	mov	r3, r2
 8001266:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_SPI_Receive(&hspi1, receive_buffer, size, timeout);
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <_ZN18binarx_serial_impl7SpiImpl7ReceiveEPhtm+0x34>)
 8001270:	f004 f968 	bl	8005544 <HAL_SPI_Receive>
 8001274:	4603      	mov	r3, r0
 8001276:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f840 	bl	8001300 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 8001280:	4603      	mov	r3, r0
};
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24000094 	.word	0x24000094

08001290 <_ZN18binarx_serial_impl8UartImpl8TransmitEPhtm>:

binarx_serial_interface::SerialStatus UartImpl::Transmit(uint8_t *buffer,
                                                         uint16_t size,
                                                         uint32_t timeout) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	4613      	mov	r3, r2
 800129e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_UART_Transmit(&huart3, buffer, size, timeout);
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <_ZN18binarx_serial_impl8UartImpl8TransmitEPhtm+0x34>)
 80012a8:	f004 fc15 	bl	8005ad6 <HAL_UART_Transmit>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f824 	bl	8001300 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 80012b8:	4603      	mov	r3, r0
};
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2400011c 	.word	0x2400011c

080012c8 <_ZN18binarx_serial_impl8UartImpl7ReceiveEPhtm>:
binarx_serial_interface::SerialStatus UartImpl::Receive(uint8_t *receive_buffer,
                                                        uint16_t size,
                                                        uint32_t timeout) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_UART_Receive(&huart3, receive_buffer, size, timeout);
 80012d8:	88fa      	ldrh	r2, [r7, #6]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <_ZN18binarx_serial_impl8UartImpl7ReceiveEPhtm+0x34>)
 80012e0:	f004 fc87 	bl	8005bf2 <HAL_UART_Receive>
 80012e4:	4603      	mov	r3, r0
 80012e6:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f808 	bl	8001300 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 80012f0:	4603      	mov	r3, r0
};
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2400011c 	.word	0x2400011c

08001300 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>:

binarx_serial_interface::SerialStatus SerialErrorHandler(
    HAL_StatusTypeDef hal_status) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  switch (hal_status) {
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d813      	bhi.n	8001338 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x38>
 8001310:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x18>)
 8001312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001316:	bf00      	nop
 8001318:	08001329 	.word	0x08001329
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001331 	.word	0x08001331
 8001324:	08001335 	.word	0x08001335
    case HAL_OK:
      return binarx_serial_interface::SerialStatus::Success;
 8001328:	2300      	movs	r3, #0
 800132a:	e006      	b.n	800133a <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    case HAL_ERROR:
      return binarx_serial_interface::SerialStatus::Error;
 800132c:	2301      	movs	r3, #1
 800132e:	e004      	b.n	800133a <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    case HAL_BUSY:
      return binarx_serial_interface::SerialStatus::Busy;
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    case HAL_TIMEOUT:
      return binarx_serial_interface::SerialStatus::Timeout;
 8001334:	2303      	movs	r3, #3
 8001336:	e000      	b.n	800133a <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    default:
      return binarx_serial_interface::SerialStatus::Error;
 8001338:	2301      	movs	r3, #1
  }
};
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_MspInit+0x30>)
 8001350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001354:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x30>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x30>)
 8001360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	58024400 	.word	0x58024400

0800137c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0ba      	sub	sp, #232	; 0xe8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	22c0      	movs	r2, #192	; 0xc0
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f006 f8d5 	bl	800754c <memset>
  if(hspi->Instance==SPI1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a26      	ldr	r2, [pc, #152]	; (8001440 <HAL_SPI_MspInit+0xc4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d144      	bne.n	8001436 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80013ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 ff73 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80013cc:	f7ff feea 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_SPI_MspInit+0xc8>)
 80013d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_SPI_MspInit+0xc8>)
 80013d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_SPI_MspInit+0xc8>)
 80013e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_SPI_MspInit+0xc8>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <HAL_SPI_MspInit+0xc8>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_SPI_MspInit+0xc8>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800140c:	23e0      	movs	r3, #224	; 0xe0
 800140e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001424:	2305      	movs	r3, #5
 8001426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_SPI_MspInit+0xcc>)
 8001432:	f000 fb5f 	bl	8001af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	37e8      	adds	r7, #232	; 0xe8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40013000 	.word	0x40013000
 8001444:	58024400 	.word	0x58024400
 8001448:	58020000 	.word	0x58020000

0800144c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0ba      	sub	sp, #232	; 0xe8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	22c0      	movs	r2, #192	; 0xc0
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f006 f86d 	bl	800754c <memset>
  if(huart->Instance==USART3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a27      	ldr	r2, [pc, #156]	; (8001514 <HAL_UART_MspInit+0xc8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d146      	bne.n	800150a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800147c:	f04f 0202 	mov.w	r2, #2
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4618      	mov	r0, r3
 8001494:	f001 ff0a 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800149e:	f7ff fe81 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_UART_MspInit+0xcc>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f8:	2307      	movs	r3, #7
 80014fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <HAL_UART_MspInit+0xd0>)
 8001506:	f000 faf5 	bl	8001af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	37e8      	adds	r7, #232	; 0xe8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40004800 	.word	0x40004800
 8001518:	58024400 	.word	0x58024400
 800151c:	58020c00 	.word	0x58020c00

08001520 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0ba      	sub	sp, #232	; 0xe8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	22c0      	movs	r2, #192	; 0xc0
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f006 f803 	bl	800754c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a30      	ldr	r2, [pc, #192]	; (800160c <HAL_PCD_MspInit+0xec>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d159      	bne.n	8001604 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001550:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800155c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4618      	mov	r0, r3
 800156a:	f001 fe9f 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001574:	f7ff fe16 	bl	80011a4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001578:	f000 fea2 	bl	80022c0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <HAL_PCD_MspInit+0xf0>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <HAL_PCD_MspInit+0xf0>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_PCD_MspInit+0xf0>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800159a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800159e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015b4:	230a      	movs	r3, #10
 80015b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015be:	4619      	mov	r1, r3
 80015c0:	4814      	ldr	r0, [pc, #80]	; (8001614 <HAL_PCD_MspInit+0xf4>)
 80015c2:	f000 fa97 	bl	8001af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015de:	4619      	mov	r1, r3
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <HAL_PCD_MspInit+0xf4>)
 80015e2:	f000 fa87 	bl	8001af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_PCD_MspInit+0xf0>)
 80015e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_PCD_MspInit+0xf0>)
 80015ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_PCD_MspInit+0xf0>)
 80015f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001604:	bf00      	nop
 8001606:	37e8      	adds	r7, #232	; 0xe8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40080000 	.word	0x40080000
 8001610:	58024400 	.word	0x58024400
 8001614:	58020000 	.word	0x58020000

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001664:	f000 f8e6 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Payload_Pin);
 8001670:	2010      	movs	r0, #16
 8001672:	f000 fc3a 	bl	8001eea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}

0800167a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800167e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001682:	f000 fc32 	bl	8001eea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}

0800168a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_kill>:

int _kill(int pid, int sig)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a4:	f005 ff1a 	bl	80074dc <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2216      	movs	r2, #22
 80016ac:	601a      	str	r2, [r3, #0]
  return -1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_exit>:

void _exit (int status)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffe7 	bl	800169a <_kill>
  while (1) {}    /* Make sure we hang here */
 80016cc:	e7fe      	b.n	80016cc <_exit+0x12>

080016ce <_ZN16binarx_time_impl8TimeImpl5DelayEm>:
#include "time_interface.h"
#include "time_impl.h"

namespace binarx_time_impl {

void TimeImpl::Delay(uint32_t milliseconds) { HAL_Delay(milliseconds); };
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f000 f8cb 	bl	8001874 <HAL_Delay>
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_ZN16binarx_time_impl8TimeImpl8GetTicksEv>:

uint32_t TimeImpl::GetTicks(){return HAL_GetTick();};
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	f000 f8b5 	bl	800185c <HAL_GetTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001700:	f7fe ff74 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	; (8001748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f005 fedd 	bl	80074e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fac3 	bl	8000cb8 <main>
  bx  lr
 8001732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001738:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800173c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001740:	08007770 	.word	0x08007770
  ldr r2, =_sbss
 8001744:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001748:	240006ec 	.word	0x240006ec

0800174c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC3_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001756:	2003      	movs	r0, #3
 8001758:	f000 f98c 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800175c:	f001 fbd0 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8001760:	4602      	mov	r2, r0
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_Init+0x68>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	4913      	ldr	r1, [pc, #76]	; (80017bc <HAL_Init+0x6c>)
 800176e:	5ccb      	ldrb	r3, [r1, r3]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_Init+0x68>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_Init+0x6c>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_Init+0x70>)
 8001792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001794:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <HAL_Init+0x74>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179a:	2000      	movs	r0, #0
 800179c:	f000 f814 	bl	80017c8 <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e002      	b.n	80017b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017aa:	f7ff fdcd 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	58024400 	.word	0x58024400
 80017bc:	080076a4 	.word	0x080076a4
 80017c0:	24000004 	.word	0x24000004
 80017c4:	24000000 	.word	0x24000000

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_InitTick+0x60>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e021      	b.n	8001820 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_InitTick+0x64>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_InitTick+0x60>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f971 	bl	8001ada <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001810:	f000 f93b 	bl	8001a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_InitTick+0x68>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2400000c 	.word	0x2400000c
 800182c:	24000000 	.word	0x24000000
 8001830:	24000008 	.word	0x24000008

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	2400000c 	.word	0x2400000c
 8001858:	240006e4 	.word	0x240006e4

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	240006e4 	.word	0x240006e4

08001874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff ffee 	bl	800185c <HAL_GetTick>
 8001880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800188c:	d005      	beq.n	800189a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_Delay+0x44>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189a:	bf00      	nop
 800189c:	f7ff ffde 	bl	800185c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d8f7      	bhi.n	800189c <HAL_Delay+0x28>
  {
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2400000c 	.word	0x2400000c

080018bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetREVID+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0c1b      	lsrs	r3, r3, #16
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	5c001000 	.word	0x5c001000

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <__NVIC_SetPriorityGrouping+0x40>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x40>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00
 8001918:	05fa0000 	.word	0x05fa0000

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	; (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a40:	d301      	bcc.n	8001a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <SysTick_Config+0x40>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a54:	f7ff ff8e 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <SysTick_Config+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <SysTick_Config+0x40>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000e010 	.word	0xe000e010

08001a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff29 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a98:	f7ff ff40 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	6978      	ldr	r0, [r7, #20]
 8001aa4:	f7ff ff90 	bl	80019c8 <NVIC_EncodePriority>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5f 	bl	8001974 <__NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff33 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffa4 	bl	8001a30 <SysTick_Config>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <HAL_GPIO_Init+0x234>)
 8001b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b06:	e194      	b.n	8001e32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8186 	beq.w	8001e2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d005      	beq.n	8001b38 <HAL_GPIO_Init+0x44>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d130      	bne.n	8001b9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b6e:	2201      	movs	r2, #1
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f003 0201 	and.w	r2, r3, #1
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d017      	beq.n	8001bd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d123      	bne.n	8001c2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3208      	adds	r2, #8
 8001bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	08da      	lsrs	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3208      	adds	r2, #8
 8001c24:	69b9      	ldr	r1, [r7, #24]
 8001c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0203 	and.w	r2, r3, #3
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80e0 	beq.w	8001e2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_GPIO_Init+0x238>)
 8001c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c72:	4a2e      	ldr	r2, [pc, #184]	; (8001d2c <HAL_GPIO_Init+0x238>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_GPIO_Init+0x238>)
 8001c7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8a:	4a29      	ldr	r2, [pc, #164]	; (8001d30 <HAL_GPIO_Init+0x23c>)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <HAL_GPIO_Init+0x240>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d052      	beq.n	8001d5c <HAL_GPIO_Init+0x268>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_GPIO_Init+0x244>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d031      	beq.n	8001d22 <HAL_GPIO_Init+0x22e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_GPIO_Init+0x248>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d02b      	beq.n	8001d1e <HAL_GPIO_Init+0x22a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_GPIO_Init+0x24c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d025      	beq.n	8001d1a <HAL_GPIO_Init+0x226>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_GPIO_Init+0x250>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01f      	beq.n	8001d16 <HAL_GPIO_Init+0x222>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_GPIO_Init+0x254>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d019      	beq.n	8001d12 <HAL_GPIO_Init+0x21e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <HAL_GPIO_Init+0x258>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_Init+0x21a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_GPIO_Init+0x25c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_Init+0x216>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_GPIO_Init+0x260>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x212>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_GPIO_Init+0x264>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_Init+0x20e>
 8001cfe:	2309      	movs	r3, #9
 8001d00:	e02d      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d02:	230a      	movs	r3, #10
 8001d04:	e02b      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d06:	2308      	movs	r3, #8
 8001d08:	e029      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	e027      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d0e:	2306      	movs	r3, #6
 8001d10:	e025      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d12:	2305      	movs	r3, #5
 8001d14:	e023      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e021      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e01f      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e01d      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e01b      	b.n	8001d5e <HAL_GPIO_Init+0x26a>
 8001d26:	bf00      	nop
 8001d28:	58000080 	.word	0x58000080
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	58000400 	.word	0x58000400
 8001d34:	58020000 	.word	0x58020000
 8001d38:	58020400 	.word	0x58020400
 8001d3c:	58020800 	.word	0x58020800
 8001d40:	58020c00 	.word	0x58020c00
 8001d44:	58021000 	.word	0x58021000
 8001d48:	58021400 	.word	0x58021400
 8001d4c:	58021800 	.word	0x58021800
 8001d50:	58021c00 	.word	0x58021c00
 8001d54:	58022000 	.word	0x58022000
 8001d58:	58022400 	.word	0x58022400
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	f002 0203 	and.w	r2, r2, #3
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	4093      	lsls	r3, r2
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6e:	4938      	ldr	r1, [pc, #224]	; (8001e50 <HAL_GPIO_Init+0x35c>)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f47f ae63 	bne.w	8001b08 <HAL_GPIO_Init+0x14>
  }
}
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	3724      	adds	r7, #36	; 0x24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	58000400 	.word	0x58000400

08001e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e001      	b.n	8001e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ea0:	e003      	b.n	8001eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	619a      	str	r2, [r3, #24]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ec8:	887a      	ldrh	r2, [r7, #2]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	041a      	lsls	r2, r3, #16
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	400b      	ands	r3, r1
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	619a      	str	r2, [r3, #24]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe feb7 	bl	8000c84 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f28:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <HAL_HSEM_FastTake+0x2c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3320      	adds	r3, #32
 8001f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_HSEM_FastTake+0x30>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e000      	b.n	8001f3e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	58026400 	.word	0x58026400
 8001f50:	80000300 	.word	0x80000300

08001f54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001f5e:	4906      	ldr	r1, [pc, #24]	; (8001f78 <HAL_HSEM_Release+0x24>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	58026400 	.word	0x58026400

08001f7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7e:	b08f      	sub	sp, #60	; 0x3c
 8001f80:	af0a      	add	r7, sp, #40	; 0x28
 8001f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e116      	b.n	80021bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fab9 	bl	8001520 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f004 ffcd 	bl	8006f6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	687e      	ldr	r6, [r7, #4]
 8001fda:	466d      	mov	r5, sp
 8001fdc:	f106 0410 	add.w	r4, r6, #16
 8001fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fec:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff0:	1d33      	adds	r3, r6, #4
 8001ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff4:	6838      	ldr	r0, [r7, #0]
 8001ff6:	f004 ff4b 	bl	8006e90 <USB_CoreInit>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0d7      	b.n	80021bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f004 ffbb 	bl	8006f8e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e04a      	b.n	80020b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	333d      	adds	r3, #61	; 0x3d
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	333c      	adds	r3, #60	; 0x3c
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	b298      	uxth	r0, r3
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3356      	adds	r3, #86	; 0x56
 800205a:	4602      	mov	r2, r0
 800205c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3340      	adds	r3, #64	; 0x40
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3344      	adds	r3, #68	; 0x44
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3348      	adds	r3, #72	; 0x48
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	334c      	adds	r3, #76	; 0x4c
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	3301      	adds	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3af      	bcc.n	800201e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e044      	b.n	800214e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	3301      	adds	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d3b5      	bcc.n	80020c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	687e      	ldr	r6, [r7, #4]
 8002160:	466d      	mov	r5, sp
 8002162:	f106 0410 	add.w	r4, r6, #16
 8002166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002172:	e885 0003 	stmia.w	r5, {r0, r1}
 8002176:	1d33      	adds	r3, r6, #4
 8002178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800217a:	6838      	ldr	r0, [r7, #0]
 800217c:	f004 ff54 	bl	8007028 <USB_DevInit>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e014      	b.n	80021bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d102      	bne.n	80021b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f80a 	bl	80021c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f005 f912 	bl	80073de <USB_DevDisconnect>

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_PCDEx_ActivateLPM+0x44>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	10000003 	.word	0x10000003

0800220c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	2b06      	cmp	r3, #6
 800221e:	d00a      	beq.n	8002236 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002220:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e040      	b.n	80022b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e03e      	b.n	80022b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002236:	4b21      	ldr	r3, [pc, #132]	; (80022bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800223e:	491f      	ldr	r1, [pc, #124]	; (80022bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4313      	orrs	r3, r2
 8002244:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002246:	f7ff fb09 	bl	800185c <HAL_GetTick>
 800224a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800224c:	e009      	b.n	8002262 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800224e:	f7ff fb05 	bl	800185c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800225c:	d901      	bls.n	8002262 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e028      	b.n	80022b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002262:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800226a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226e:	d1ee      	bne.n	800224e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b1e      	cmp	r3, #30
 8002274:	d008      	beq.n	8002288 <HAL_PWREx_ConfigSupply+0x7c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b2e      	cmp	r3, #46	; 0x2e
 800227a:	d005      	beq.n	8002288 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b1d      	cmp	r3, #29
 8002280:	d002      	beq.n	8002288 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b2d      	cmp	r3, #45	; 0x2d
 8002286:	d114      	bne.n	80022b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002288:	f7ff fae8 	bl	800185c <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800228e:	e009      	b.n	80022a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002290:	f7ff fae4 	bl	800185c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800229e:	d901      	bls.n	80022a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e007      	b.n	80022b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_PWREx_ConfigSupply+0xb0>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d1ee      	bne.n	8002290 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	58024800 	.word	0x58024800

080022c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80022ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	58024800 	.word	0x58024800

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	; 0x30
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f000 bc48 	b.w	8002b84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8088 	beq.w	8002412 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002302:	4b99      	ldr	r3, [pc, #612]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800230c:	4b96      	ldr	r3, [pc, #600]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	2b10      	cmp	r3, #16
 8002316:	d007      	beq.n	8002328 <HAL_RCC_OscConfig+0x48>
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	2b18      	cmp	r3, #24
 800231c:	d111      	bne.n	8002342 <HAL_RCC_OscConfig+0x62>
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d10c      	bne.n	8002342 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	4b8f      	ldr	r3, [pc, #572]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d06d      	beq.n	8002410 <HAL_RCC_OscConfig+0x130>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d169      	bne.n	8002410 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	f000 bc21 	b.w	8002b84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x7a>
 800234c:	4b86      	ldr	r3, [pc, #536]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a85      	ldr	r2, [pc, #532]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e02e      	b.n	80023b8 <HAL_RCC_OscConfig+0xd8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x9c>
 8002362:	4b81      	ldr	r3, [pc, #516]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a80      	ldr	r2, [pc, #512]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b7e      	ldr	r3, [pc, #504]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a7d      	ldr	r2, [pc, #500]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e01d      	b.n	80023b8 <HAL_RCC_OscConfig+0xd8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0xc0>
 8002386:	4b78      	ldr	r3, [pc, #480]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a77      	ldr	r2, [pc, #476]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b75      	ldr	r3, [pc, #468]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a74      	ldr	r2, [pc, #464]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0xd8>
 80023a0:	4b71      	ldr	r3, [pc, #452]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a70      	ldr	r2, [pc, #448]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b6e      	ldr	r3, [pc, #440]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a6d      	ldr	r2, [pc, #436]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff fa4c 	bl	800185c <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff fa48 	bl	800185c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e3d4      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe8>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff fa38 	bl	800185c <HAL_GetTick>
 80023ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7ff fa34 	bl	800185c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e3c0      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002402:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x110>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80ca 	beq.w	80025b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002420:	4b51      	ldr	r3, [pc, #324]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002428:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800242a:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_RCC_OscConfig+0x166>
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	2b18      	cmp	r3, #24
 800243a:	d156      	bne.n	80024ea <HAL_RCC_OscConfig+0x20a>
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d151      	bne.n	80024ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002446:	4b48      	ldr	r3, [pc, #288]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x17e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e392      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800245e:	4b42      	ldr	r3, [pc, #264]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 0219 	bic.w	r2, r3, #25
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	493f      	ldr	r1, [pc, #252]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff f9f4 	bl	800185c <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002478:	f7ff f9f0 	bl	800185c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e37c      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248a:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	f7ff fa11 	bl	80018bc <HAL_GetREVID>
 800249a:	4603      	mov	r3, r0
 800249c:	f241 0203 	movw	r2, #4099	; 0x1003
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d817      	bhi.n	80024d4 <HAL_RCC_OscConfig+0x1f4>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d108      	bne.n	80024be <HAL_RCC_OscConfig+0x1de>
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024b4:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80024b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024bc:	e07a      	b.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	031b      	lsls	r3, r3, #12
 80024cc:	4926      	ldr	r1, [pc, #152]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d2:	e06f      	b.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	4921      	ldr	r1, [pc, #132]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e8:	e064      	b.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d047      	beq.n	8002582 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0219 	bic.w	r2, r3, #25
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	491a      	ldr	r1, [pc, #104]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff f9aa 	bl	800185c <HAL_GetTick>
 8002508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250c:	f7ff f9a6 	bl	800185c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e332      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	f7ff f9c7 	bl	80018bc <HAL_GetREVID>
 800252e:	4603      	mov	r3, r0
 8002530:	f241 0203 	movw	r2, #4099	; 0x1003
 8002534:	4293      	cmp	r3, r2
 8002536:	d819      	bhi.n	800256c <HAL_RCC_OscConfig+0x28c>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d108      	bne.n	8002552 <HAL_RCC_OscConfig+0x272>
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 800254a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254e:	6053      	str	r3, [r2, #4]
 8002550:	e030      	b.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	031b      	lsls	r3, r3, #12
 8002560:	4901      	ldr	r1, [pc, #4]	; (8002568 <HAL_RCC_OscConfig+0x288>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
 8002566:	e025      	b.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
 8002568:	58024400 	.word	0x58024400
 800256c:	4b9a      	ldr	r3, [pc, #616]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	4997      	ldr	r1, [pc, #604]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
 8002580:	e018      	b.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b95      	ldr	r3, [pc, #596]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a94      	ldr	r2, [pc, #592]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7ff f965 	bl	800185c <HAL_GetTick>
 8002592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7ff f961 	bl	800185c <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e2ed      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025a8:	4b8b      	ldr	r3, [pc, #556]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a9 	beq.w	8002714 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c2:	4b85      	ldr	r3, [pc, #532]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025cc:	4b82      	ldr	r3, [pc, #520]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d007      	beq.n	80025e8 <HAL_RCC_OscConfig+0x308>
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b18      	cmp	r3, #24
 80025dc:	d13a      	bne.n	8002654 <HAL_RCC_OscConfig+0x374>
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d135      	bne.n	8002654 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025e8:	4b7b      	ldr	r3, [pc, #492]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_OscConfig+0x320>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b80      	cmp	r3, #128	; 0x80
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e2c1      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002600:	f7ff f95c 	bl	80018bc <HAL_GetREVID>
 8002604:	4603      	mov	r3, r0
 8002606:	f241 0203 	movw	r2, #4099	; 0x1003
 800260a:	4293      	cmp	r3, r2
 800260c:	d817      	bhi.n	800263e <HAL_RCC_OscConfig+0x35e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2b20      	cmp	r3, #32
 8002614:	d108      	bne.n	8002628 <HAL_RCC_OscConfig+0x348>
 8002616:	4b70      	ldr	r3, [pc, #448]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800261e:	4a6e      	ldr	r2, [pc, #440]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002624:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002626:	e075      	b.n	8002714 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002628:	4b6b      	ldr	r3, [pc, #428]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	069b      	lsls	r3, r3, #26
 8002636:	4968      	ldr	r1, [pc, #416]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800263c:	e06a      	b.n	8002714 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800263e:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	061b      	lsls	r3, r3, #24
 800264c:	4962      	ldr	r1, [pc, #392]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002652:	e05f      	b.n	8002714 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d042      	beq.n	80026e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800265c:	4b5e      	ldr	r3, [pc, #376]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a5d      	ldr	r2, [pc, #372]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff f8f8 	bl	800185c <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002670:	f7ff f8f4 	bl	800185c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e280      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002682:	4b55      	ldr	r3, [pc, #340]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268e:	f7ff f915 	bl	80018bc <HAL_GetREVID>
 8002692:	4603      	mov	r3, r0
 8002694:	f241 0203 	movw	r2, #4099	; 0x1003
 8002698:	4293      	cmp	r3, r2
 800269a:	d817      	bhi.n	80026cc <HAL_RCC_OscConfig+0x3ec>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d108      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3d6>
 80026a4:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026ac:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026b2:	6053      	str	r3, [r2, #4]
 80026b4:	e02e      	b.n	8002714 <HAL_RCC_OscConfig+0x434>
 80026b6:	4b48      	ldr	r3, [pc, #288]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	069b      	lsls	r3, r3, #26
 80026c4:	4944      	ldr	r1, [pc, #272]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
 80026ca:	e023      	b.n	8002714 <HAL_RCC_OscConfig+0x434>
 80026cc:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	493f      	ldr	r1, [pc, #252]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	60cb      	str	r3, [r1, #12]
 80026e0:	e018      	b.n	8002714 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026e2:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3c      	ldr	r2, [pc, #240]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7ff f8b5 	bl	800185c <HAL_GetTick>
 80026f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026f6:	f7ff f8b1 	bl	800185c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e23d      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002708:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d036      	beq.n	800278e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d019      	beq.n	800275c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f892 	bl	800185c <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff f88e 	bl	800185c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e21a      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x45c>
 800275a:	e018      	b.n	800278e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7ff f878 	bl	800185c <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7ff f874 	bl	800185c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e200      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d039      	beq.n	800280e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01c      	beq.n	80027dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027ae:	f7ff f855 	bl	800185c <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b6:	f7ff f851 	bl	800185c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e1dd      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
 80027d4:	e01b      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
 80027d6:	bf00      	nop
 80027d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027dc:	4b9b      	ldr	r3, [pc, #620]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a9a      	ldr	r2, [pc, #616]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80027e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027e8:	f7ff f838 	bl	800185c <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f0:	f7ff f834 	bl	800185c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e1c0      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002802:	4b92      	ldr	r3, [pc, #584]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8081 	beq.w	800291e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800281c:	4b8c      	ldr	r3, [pc, #560]	; (8002a50 <HAL_RCC_OscConfig+0x770>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a8b      	ldr	r2, [pc, #556]	; (8002a50 <HAL_RCC_OscConfig+0x770>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002828:	f7ff f818 	bl	800185c <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7ff f814 	bl	800185c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1a0      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002842:	4b83      	ldr	r3, [pc, #524]	; (8002a50 <HAL_RCC_OscConfig+0x770>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x584>
 8002856:	4b7d      	ldr	r3, [pc, #500]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a7c      	ldr	r2, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	e02d      	b.n	80028c0 <HAL_RCC_OscConfig+0x5e0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10c      	bne.n	8002886 <HAL_RCC_OscConfig+0x5a6>
 800286c:	4b77      	ldr	r3, [pc, #476]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a76      	ldr	r2, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	4b74      	ldr	r3, [pc, #464]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a73      	ldr	r2, [pc, #460]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 800287e:	f023 0304 	bic.w	r3, r3, #4
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x5e0>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5c8>
 800288e:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	4b6c      	ldr	r3, [pc, #432]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a6b      	ldr	r2, [pc, #428]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0x5e0>
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a67      	ldr	r2, [pc, #412]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a64      	ldr	r2, [pc, #400]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe ffc8 	bl	800185c <HAL_GetTick>
 80028cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe ffc4 	bl	800185c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e14e      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028e6:	4b59      	ldr	r3, [pc, #356]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ee      	beq.n	80028d0 <HAL_RCC_OscConfig+0x5f0>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe ffb2 	bl	800185c <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe ffae 	bl	800185c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e138      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ee      	bne.n	80028fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 812d 	beq.w	8002b82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002928:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002930:	2b18      	cmp	r3, #24
 8002932:	f000 80bd 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2b02      	cmp	r3, #2
 800293c:	f040 809e 	bne.w	8002a7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a41      	ldr	r2, [pc, #260]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe ff86 	bl	800185c <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe ff82 	bl	800185c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e10e      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002966:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002972:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_RCC_OscConfig+0x774>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	430a      	orrs	r2, r1
 8002986:	4931      	ldr	r1, [pc, #196]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002988:	4313      	orrs	r3, r2
 800298a:	628b      	str	r3, [r1, #40]	; 0x28
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	3b01      	subs	r3, #1
 8002992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	3b01      	subs	r3, #1
 800299c:	025b      	lsls	r3, r3, #9
 800299e:	b29b      	uxth	r3, r3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	3b01      	subs	r3, #1
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	3b01      	subs	r3, #1
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80029bc:	4923      	ldr	r1, [pc, #140]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80029d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_RCC_OscConfig+0x778>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029da:	00d2      	lsls	r2, r2, #3
 80029dc:	491b      	ldr	r1, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f023 020c 	bic.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4917      	ldr	r1, [pc, #92]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	f023 0202 	bic.w	r2, r3, #2
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	4912      	ldr	r1, [pc, #72]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe ff0b 	bl	800185c <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a48:	e011      	b.n	8002a6e <HAL_RCC_OscConfig+0x78e>
 8002a4a:	bf00      	nop
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	58024800 	.word	0x58024800
 8002a54:	fffffc0c 	.word	0xfffffc0c
 8002a58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fefe 	bl	800185c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e08a      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x77c>
 8002a7a:	e082      	b.n	8002b82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7c:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a42      	ldr	r2, [pc, #264]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fee8 	bl	800185c <HAL_GetTick>
 8002a8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe fee4 	bl	800185c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e070      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x7b0>
 8002aae:	e068      	b.n	8002b82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ab6:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d031      	beq.n	8002b28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f003 0203 	and.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d12a      	bne.n	8002b28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d122      	bne.n	8002b28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d11a      	bne.n	8002b28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	0a5b      	lsrs	r3, r3, #9
 8002af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d111      	bne.n	8002b28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d108      	bne.n	8002b28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0e1b      	lsrs	r3, r3, #24
 8002b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e02b      	b.n	8002b84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b2c:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	08db      	lsrs	r3, r3, #3
 8002b32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d01f      	beq.n	8002b82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b4e:	f7fe fe85 	bl	800185c <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b54:	bf00      	nop
 8002b56:	f7fe fe81 	bl	800185c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d0f9      	beq.n	8002b56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_RCC_OscConfig+0x8b0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b6e:	00d2      	lsls	r2, r2, #3
 8002b70:	4906      	ldr	r1, [pc, #24]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_RCC_OscConfig+0x8ac>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3730      	adds	r7, #48	; 0x30
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	ffff0007 	.word	0xffff0007

08002b94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e19c      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b8a      	ldr	r3, [pc, #552]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d910      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b87      	ldr	r3, [pc, #540]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 020f 	bic.w	r2, r3, #15
 8002bbe:	4985      	ldr	r1, [pc, #532]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b83      	ldr	r3, [pc, #524]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e184      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	4b7b      	ldr	r3, [pc, #492]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d908      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bf4:	4b78      	ldr	r3, [pc, #480]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	4975      	ldr	r1, [pc, #468]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d010      	beq.n	8002c34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d908      	bls.n	8002c34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	496a      	ldr	r1, [pc, #424]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	4b64      	ldr	r3, [pc, #400]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d908      	bls.n	8002c62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c50:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	495e      	ldr	r1, [pc, #376]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d908      	bls.n	8002c90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c7e:	4b56      	ldr	r3, [pc, #344]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4953      	ldr	r1, [pc, #332]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d010      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d908      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f023 020f 	bic.w	r2, r3, #15
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4947      	ldr	r1, [pc, #284]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d055      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cca:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	4940      	ldr	r1, [pc, #256]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ce4:	4b3c      	ldr	r3, [pc, #240]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d121      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0f6      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d115      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0ea      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0de      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d24:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0d6      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d34:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f023 0207 	bic.w	r2, r3, #7
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4925      	ldr	r1, [pc, #148]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d46:	f7fe fd89 	bl	800185c <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4e:	f7fe fd85 	bl	800185c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0be      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d1eb      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d208      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f023 020f 	bic.w	r2, r3, #15
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	490e      	ldr	r1, [pc, #56]	; (8002dd8 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d214      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 020f 	bic.w	r2, r3, #15
 8002dba:	4906      	ldr	r1, [pc, #24]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <HAL_RCC_ClockConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e086      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x34e>
 8002dd4:	52002000 	.word	0x52002000
 8002dd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d010      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	4b3f      	ldr	r3, [pc, #252]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d208      	bcs.n	8002e0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002df8:	4b3c      	ldr	r3, [pc, #240]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	4939      	ldr	r1, [pc, #228]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d010      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d208      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e26:	4b31      	ldr	r3, [pc, #196]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	492e      	ldr	r1, [pc, #184]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d208      	bcs.n	8002e66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	4922      	ldr	r1, [pc, #136]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d208      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e82:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4917      	ldr	r1, [pc, #92]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e94:	f000 f834 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b14      	ldr	r3, [pc, #80]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	4912      	ldr	r1, [pc, #72]	; (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <HAL_RCC_ClockConfig+0x35c>)
 8002ebc:	5cd3      	ldrb	r3, [r2, r3]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <HAL_RCC_ClockConfig+0x360>)
 8002eca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HAL_RCC_ClockConfig+0x364>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x368>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fc76 	bl	80017c8 <HAL_InitTick>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	080076a4 	.word	0x080076a4
 8002ef4:	24000004 	.word	0x24000004
 8002ef8:	24000000 	.word	0x24000000
 8002efc:	24000008 	.word	0x24000008

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f06:	4bb3      	ldr	r3, [pc, #716]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f0e:	2b18      	cmp	r3, #24
 8002f10:	f200 8155 	bhi.w	80031be <HAL_RCC_GetSysClockFreq+0x2be>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f81 	.word	0x08002f81
 8002f20:	080031bf 	.word	0x080031bf
 8002f24:	080031bf 	.word	0x080031bf
 8002f28:	080031bf 	.word	0x080031bf
 8002f2c:	080031bf 	.word	0x080031bf
 8002f30:	080031bf 	.word	0x080031bf
 8002f34:	080031bf 	.word	0x080031bf
 8002f38:	080031bf 	.word	0x080031bf
 8002f3c:	08002fa7 	.word	0x08002fa7
 8002f40:	080031bf 	.word	0x080031bf
 8002f44:	080031bf 	.word	0x080031bf
 8002f48:	080031bf 	.word	0x080031bf
 8002f4c:	080031bf 	.word	0x080031bf
 8002f50:	080031bf 	.word	0x080031bf
 8002f54:	080031bf 	.word	0x080031bf
 8002f58:	080031bf 	.word	0x080031bf
 8002f5c:	08002fad 	.word	0x08002fad
 8002f60:	080031bf 	.word	0x080031bf
 8002f64:	080031bf 	.word	0x080031bf
 8002f68:	080031bf 	.word	0x080031bf
 8002f6c:	080031bf 	.word	0x080031bf
 8002f70:	080031bf 	.word	0x080031bf
 8002f74:	080031bf 	.word	0x080031bf
 8002f78:	080031bf 	.word	0x080031bf
 8002f7c:	08002fb3 	.word	0x08002fb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f80:	4b94      	ldr	r3, [pc, #592]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d009      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f8c:	4b91      	ldr	r3, [pc, #580]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	4a90      	ldr	r2, [pc, #576]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f9e:	e111      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fa0:	4b8d      	ldr	r3, [pc, #564]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fa2:	61bb      	str	r3, [r7, #24]
      break;
 8002fa4:	e10e      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fa6:	4b8d      	ldr	r3, [pc, #564]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fa8:	61bb      	str	r3, [r7, #24]
      break;
 8002faa:	e10b      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fac:	4b8c      	ldr	r3, [pc, #560]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fae:	61bb      	str	r3, [r7, #24]
      break;
 8002fb0:	e108      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fb2:	4b88      	ldr	r3, [pc, #544]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fbc:	4b85      	ldr	r3, [pc, #532]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fc8:	4b82      	ldr	r3, [pc, #520]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fd2:	4b80      	ldr	r3, [pc, #512]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	08db      	lsrs	r3, r3, #3
 8002fd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80e1 	beq.w	80031b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f000 8083 	beq.w	8003104 <HAL_RCC_GetSysClockFreq+0x204>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b02      	cmp	r3, #2
 8003002:	f200 80a1 	bhi.w	8003148 <HAL_RCC_GetSysClockFreq+0x248>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0x114>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d056      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003012:	e099      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003014:	4b6f      	ldr	r3, [pc, #444]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02d      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003020:	4b6c      	ldr	r3, [pc, #432]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	4a6b      	ldr	r2, [pc, #428]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
 8003030:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800304a:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800305a:	ed97 6a02 	vldr	s12, [r7, #8]
 800305e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80031e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800306a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800306e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003076:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800307a:	e087      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003086:	eddf 6a58 	vldr	s13, [pc, #352]	; 80031e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800308a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308e:	4b51      	ldr	r3, [pc, #324]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309e:	ed97 6a02 	vldr	s12, [r7, #8]
 80030a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80031e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030be:	e065      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80031ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80031e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003102:	e043      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80031f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003116:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003126:	ed97 6a02 	vldr	s12, [r7, #8]
 800312a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80031e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800312e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800313a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003146:	e021      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	eddf 6a26 	vldr	s13, [pc, #152]	; 80031ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316a:	ed97 6a02 	vldr	s12, [r7, #8]
 800316e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80031e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003186:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800318a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	0a5b      	lsrs	r3, r3, #9
 8003192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003196:	3301      	adds	r3, #1
 8003198:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80031a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031b0:	ee17 3a90 	vmov	r3, s15
 80031b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031b6:	e005      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
      break;
 80031bc:	e002      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031be:	4b07      	ldr	r3, [pc, #28]	; (80031dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031c0:	61bb      	str	r3, [r7, #24]
      break;
 80031c2:	bf00      	nop
  }

  return sysclockfreq;
 80031c4:	69bb      	ldr	r3, [r7, #24]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	58024400 	.word	0x58024400
 80031d8:	03d09000 	.word	0x03d09000
 80031dc:	003d0900 	.word	0x003d0900
 80031e0:	007a1200 	.word	0x007a1200
 80031e4:	46000000 	.word	0x46000000
 80031e8:	4c742400 	.word	0x4c742400
 80031ec:	4a742400 	.word	0x4a742400
 80031f0:	4af42400 	.word	0x4af42400

080031f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031fa:	f7ff fe81 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 80031fe:	4602      	mov	r2, r0
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCC_GetHCLKFreq+0x50>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	490f      	ldr	r1, [pc, #60]	; (8003248 <HAL_RCC_GetHCLKFreq+0x54>)
 800320c:	5ccb      	ldrb	r3, [r1, r3]
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	fa22 f303 	lsr.w	r3, r2, r3
 8003216:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_RCC_GetHCLKFreq+0x50>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_GetHCLKFreq+0x54>)
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	4a07      	ldr	r2, [pc, #28]	; (800324c <HAL_RCC_GetHCLKFreq+0x58>)
 8003230:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003232:	4a07      	ldr	r2, [pc, #28]	; (8003250 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_RCC_GetHCLKFreq+0x58>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	58024400 	.word	0x58024400
 8003248:	080076a4 	.word	0x080076a4
 800324c:	24000004 	.word	0x24000004
 8003250:	24000000 	.word	0x24000000

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003258:	f7ff ffcc 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4904      	ldr	r1, [pc, #16]	; (800327c <HAL_RCC_GetPCLK1Freq+0x28>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	58024400 	.word	0x58024400
 800327c:	080076a4 	.word	0x080076a4

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003284:	f7ff ffb6 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	58024400 	.word	0x58024400
 80032a8:	080076a4 	.word	0x080076a4

080032ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b0:	b0ca      	sub	sp, #296	; 0x128
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80032d0:	2500      	movs	r5, #0
 80032d2:	ea54 0305 	orrs.w	r3, r4, r5
 80032d6:	d049      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032e2:	d02f      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032e8:	d828      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ee:	d01a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f4:	d822      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fe:	d007      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003300:	e01c      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003302:	4bb8      	ldr	r3, [pc, #736]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	4ab7      	ldr	r2, [pc, #732]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800330e:	e01a      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003314:	3308      	adds	r3, #8
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f001 fc8f 	bl	8004c3c <RCCEx_PLL2_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003324:	e00f      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800332a:	3328      	adds	r3, #40	; 0x28
 800332c:	2102      	movs	r1, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f001 fd36 	bl	8004da0 <RCCEx_PLL3_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800333a:	e004      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003342:	e000      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800334e:	4ba5      	ldr	r3, [pc, #660]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003352:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800335a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800335c:	4aa1      	ldr	r2, [pc, #644]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335e:	430b      	orrs	r3, r1
 8003360:	6513      	str	r3, [r2, #80]	; 0x50
 8003362:	e003      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003378:	f04f 0900 	mov.w	r9, #0
 800337c:	ea58 0309 	orrs.w	r3, r8, r9
 8003380:	d047      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	2b04      	cmp	r3, #4
 800338a:	d82a      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033a9 	.word	0x080033a9
 8003398:	080033b7 	.word	0x080033b7
 800339c:	080033cd 	.word	0x080033cd
 80033a0:	080033eb 	.word	0x080033eb
 80033a4:	080033eb 	.word	0x080033eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a8:	4b8e      	ldr	r3, [pc, #568]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	4a8d      	ldr	r2, [pc, #564]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033b4:	e01a      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ba:	3308      	adds	r3, #8
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 fc3c 	bl	8004c3c <RCCEx_PLL2_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ca:	e00f      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d0:	3328      	adds	r3, #40	; 0x28
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 fce3 	bl	8004da0 <RCCEx_PLL3_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e0:	e004      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033e8:	e000      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f4:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f8:	f023 0107 	bic.w	r1, r3, #7
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	4a78      	ldr	r2, [pc, #480]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003404:	430b      	orrs	r3, r1
 8003406:	6513      	str	r3, [r2, #80]	; 0x50
 8003408:	e003      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800340e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800341e:	f04f 0b00 	mov.w	fp, #0
 8003422:	ea5a 030b 	orrs.w	r3, sl, fp
 8003426:	d04c      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003432:	d030      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003438:	d829      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800343a:	2bc0      	cmp	r3, #192	; 0xc0
 800343c:	d02d      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800343e:	2bc0      	cmp	r3, #192	; 0xc0
 8003440:	d825      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003442:	2b80      	cmp	r3, #128	; 0x80
 8003444:	d018      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003446:	2b80      	cmp	r3, #128	; 0x80
 8003448:	d821      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d007      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003452:	e01c      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003454:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	4a62      	ldr	r2, [pc, #392]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800345a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003460:	e01c      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003466:	3308      	adds	r3, #8
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fbe6 	bl	8004c3c <RCCEx_PLL2_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003476:	e011      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347c:	3328      	adds	r3, #40	; 0x28
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f001 fc8d 	bl	8004da0 <RCCEx_PLL3_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800348c:	e006      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003494:	e002      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800349a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034a4:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	4a4c      	ldr	r2, [pc, #304]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6513      	str	r3, [r2, #80]	; 0x50
 80034b8:	e003      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80034ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80034d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80034dc:	460b      	mov	r3, r1
 80034de:	4313      	orrs	r3, r2
 80034e0:	d053      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ee:	d035      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80034f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034f4:	d82e      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034fa:	d031      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80034fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003500:	d828      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	d01a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350c:	d822      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003516:	d007      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003518:	e01c      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800351a:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003524:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003526:	e01c      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352c:	3308      	adds	r3, #8
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f001 fb83 	bl	8004c3c <RCCEx_PLL2_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800353c:	e011      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003542:	3328      	adds	r3, #40	; 0x28
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fc2a 	bl	8004da0 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003552:	e006      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800355a:	e002      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800355c:	bf00      	nop
 800355e:	e000      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800356a:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800357a:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357c:	430b      	orrs	r3, r1
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	e003      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003596:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800359a:	2300      	movs	r3, #0
 800359c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80035a4:	460b      	mov	r3, r1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	d056      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b6:	d038      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035bc:	d831      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035c2:	d034      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035c8:	d82b      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035ce:	d01d      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035d4:	d825      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80035da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80035e0:	e01f      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035e2:	bf00      	nop
 80035e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e8:	4ba2      	ldr	r3, [pc, #648]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	4aa1      	ldr	r2, [pc, #644]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f4:	e01c      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fa:	3308      	adds	r3, #8
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fb1c 	bl	8004c3c <RCCEx_PLL2_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800360a:	e011      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003610:	3328      	adds	r3, #40	; 0x28
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fbc3 	bl	8004da0 <RCCEx_PLL3_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003620:	e006      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003628:	e002      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800362e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003638:	4b8e      	ldr	r3, [pc, #568]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003648:	4a8a      	ldr	r2, [pc, #552]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800364a:	430b      	orrs	r3, r1
 800364c:	6593      	str	r3, [r2, #88]	; 0x58
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003654:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800366e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003672:	460b      	mov	r3, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	d03a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	2b30      	cmp	r3, #48	; 0x30
 8003680:	d01f      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003682:	2b30      	cmp	r3, #48	; 0x30
 8003684:	d819      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003686:	2b20      	cmp	r3, #32
 8003688:	d00c      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800368a:	2b20      	cmp	r3, #32
 800368c:	d815      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d019      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003692:	2b10      	cmp	r3, #16
 8003694:	d111      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003696:	4b77      	ldr	r3, [pc, #476]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	4a76      	ldr	r2, [pc, #472]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800369c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036a2:	e011      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a8:	3308      	adds	r3, #8
 80036aa:	2102      	movs	r1, #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fac5 	bl	8004c3c <RCCEx_PLL2_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036c0:	e002      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036d0:	4b68      	ldr	r3, [pc, #416]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	4a65      	ldr	r2, [pc, #404]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e0:	430b      	orrs	r3, r1
 80036e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80036fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003704:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d051      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003718:	d035      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800371a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800371e:	d82e      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003724:	d031      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800372a:	d828      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003730:	d01a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003736:	d822      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d007      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003742:	e01c      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003744:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4a4a      	ldr	r2, [pc, #296]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800374a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003750:	e01c      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003756:	3308      	adds	r3, #8
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fa6e 	bl	8004c3c <RCCEx_PLL2_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003766:	e011      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	3328      	adds	r3, #40	; 0x28
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f001 fb15 	bl	8004da0 <RCCEx_PLL3_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800377c:	e006      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003784:	e002      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800378a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003794:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003798:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a2:	4a34      	ldr	r2, [pc, #208]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6513      	str	r3, [r2, #80]	; 0x50
 80037a8:	e003      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80037be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037c2:	2300      	movs	r3, #0
 80037c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80037c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80037cc:	460b      	mov	r3, r1
 80037ce:	4313      	orrs	r3, r2
 80037d0:	d056      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037dc:	d033      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80037de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e2:	d82c      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037e8:	d02f      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80037ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ee:	d826      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037f4:	d02b      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80037f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037fa:	d820      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003800:	d012      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003806:	d81a      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d022      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d115      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003816:	3308      	adds	r3, #8
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fa0e 	bl	8004c3c <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003826:	e015      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382c:	3328      	adds	r3, #40	; 0x28
 800382e:	2101      	movs	r1, #1
 8003830:	4618      	mov	r0, r3
 8003832:	f001 fab5 	bl	8004da0 <RCCEx_PLL3_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800383c:	e00a      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003844:	e006      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003846:	bf00      	nop
 8003848:	e004      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800384a:	bf00      	nop
 800384c:	e002      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800385e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003860:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800386a:	4a02      	ldr	r2, [pc, #8]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386c:	430b      	orrs	r3, r1
 800386e:	6513      	str	r3, [r2, #80]	; 0x50
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003872:	bf00      	nop
 8003874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800387c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800388c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003896:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800389a:	460b      	mov	r3, r1
 800389c:	4313      	orrs	r3, r2
 800389e:	d055      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ac:	d033      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b2:	d82c      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b8:	d02f      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d826      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038c4:	d02b      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ca:	d820      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d0:	d012      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d6:	d81a      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80038dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e0:	d115      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e6:	3308      	adds	r3, #8
 80038e8:	2101      	movs	r1, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 f9a6 	bl	8004c3c <RCCEx_PLL2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038f6:	e015      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fc:	3328      	adds	r3, #40	; 0x28
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fa4d 	bl	8004da0 <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800390c:	e00a      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003916:	bf00      	nop
 8003918:	e004      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800392c:	4ba3      	ldr	r3, [pc, #652]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800393c:	4a9f      	ldr	r2, [pc, #636]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800393e:	430b      	orrs	r3, r1
 8003940:	6593      	str	r3, [r2, #88]	; 0x58
 8003942:	e003      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003948:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003962:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d037      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003976:	d00e      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800397c:	d816      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d018      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003986:	d111      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003988:	4b8c      	ldr	r3, [pc, #560]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	4a8b      	ldr	r2, [pc, #556]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003994:	e00f      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399a:	3308      	adds	r3, #8
 800399c:	2101      	movs	r1, #1
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 f94c 	bl	8004c3c <RCCEx_PLL2_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039aa:	e004      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039b2:	e000      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039be:	4b7f      	ldr	r3, [pc, #508]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a7b      	ldr	r2, [pc, #492]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ce:	430b      	orrs	r3, r1
 80039d0:	6513      	str	r3, [r2, #80]	; 0x50
 80039d2:	e003      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80039e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80039f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4313      	orrs	r3, r2
 80039fa:	d039      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d81c      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a06:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0c:	08003a49 	.word	0x08003a49
 8003a10:	08003a1d 	.word	0x08003a1d
 8003a14:	08003a2b 	.word	0x08003a2b
 8003a18:	08003a49 	.word	0x08003a49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1c:	4b67      	ldr	r3, [pc, #412]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4a66      	ldr	r2, [pc, #408]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a28:	e00f      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2e:	3308      	adds	r3, #8
 8003a30:	2102      	movs	r1, #2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 f902 	bl	8004c3c <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a3e:	e004      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a52:	4b5a      	ldr	r3, [pc, #360]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	f023 0103 	bic.w	r1, r3, #3
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a60:	4a56      	ldr	r2, [pc, #344]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a62:	430b      	orrs	r3, r1
 8003a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a66:	e003      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f000 809f 	beq.w	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a92:	4b4b      	ldr	r3, [pc, #300]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a4a      	ldr	r2, [pc, #296]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a9e:	f7fd fedd 	bl	800185c <HAL_GetTick>
 8003aa2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa8:	f7fd fed8 	bl	800185c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b64      	cmp	r3, #100	; 0x64
 8003ab6:	d903      	bls.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003abe:	e005      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ac0:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ed      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d179      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ad4:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ae0:	4053      	eors	r3, r2
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d015      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aea:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a30      	ldr	r2, [pc, #192]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b02:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4a2d      	ldr	r2, [pc, #180]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b0e:	4a2b      	ldr	r2, [pc, #172]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b22:	d118      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fe9a 	bl	800185c <HAL_GetTick>
 8003b28:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b2c:	e00d      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7fd fe95 	bl	800185c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b38:	1ad2      	subs	r2, r2, r3
 8003b3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d903      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003b48:	e005      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0eb      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d129      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b6e:	d10e      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b80:	091a      	lsrs	r2, r3, #4
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6113      	str	r3, [r2, #16]
 8003b8c:	e005      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b98:	6113      	str	r3, [r2, #16]
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003baa:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e00e      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003bba:	e009      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	58024800 	.word	0x58024800
 8003bc4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f002 0301 	and.w	r3, r2, #1
 8003bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003be6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f000 8089 	beq.w	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf8:	2b28      	cmp	r3, #40	; 0x28
 8003bfa:	d86b      	bhi.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003bfc:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003cdd 	.word	0x08003cdd
 8003c08:	08003cd5 	.word	0x08003cd5
 8003c0c:	08003cd5 	.word	0x08003cd5
 8003c10:	08003cd5 	.word	0x08003cd5
 8003c14:	08003cd5 	.word	0x08003cd5
 8003c18:	08003cd5 	.word	0x08003cd5
 8003c1c:	08003cd5 	.word	0x08003cd5
 8003c20:	08003cd5 	.word	0x08003cd5
 8003c24:	08003ca9 	.word	0x08003ca9
 8003c28:	08003cd5 	.word	0x08003cd5
 8003c2c:	08003cd5 	.word	0x08003cd5
 8003c30:	08003cd5 	.word	0x08003cd5
 8003c34:	08003cd5 	.word	0x08003cd5
 8003c38:	08003cd5 	.word	0x08003cd5
 8003c3c:	08003cd5 	.word	0x08003cd5
 8003c40:	08003cd5 	.word	0x08003cd5
 8003c44:	08003cbf 	.word	0x08003cbf
 8003c48:	08003cd5 	.word	0x08003cd5
 8003c4c:	08003cd5 	.word	0x08003cd5
 8003c50:	08003cd5 	.word	0x08003cd5
 8003c54:	08003cd5 	.word	0x08003cd5
 8003c58:	08003cd5 	.word	0x08003cd5
 8003c5c:	08003cd5 	.word	0x08003cd5
 8003c60:	08003cd5 	.word	0x08003cd5
 8003c64:	08003cdd 	.word	0x08003cdd
 8003c68:	08003cd5 	.word	0x08003cd5
 8003c6c:	08003cd5 	.word	0x08003cd5
 8003c70:	08003cd5 	.word	0x08003cd5
 8003c74:	08003cd5 	.word	0x08003cd5
 8003c78:	08003cd5 	.word	0x08003cd5
 8003c7c:	08003cd5 	.word	0x08003cd5
 8003c80:	08003cd5 	.word	0x08003cd5
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cd5 	.word	0x08003cd5
 8003c8c:	08003cd5 	.word	0x08003cd5
 8003c90:	08003cd5 	.word	0x08003cd5
 8003c94:	08003cd5 	.word	0x08003cd5
 8003c98:	08003cd5 	.word	0x08003cd5
 8003c9c:	08003cd5 	.word	0x08003cd5
 8003ca0:	08003cd5 	.word	0x08003cd5
 8003ca4:	08003cdd 	.word	0x08003cdd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cac:	3308      	adds	r3, #8
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 ffc3 	bl	8004c3c <RCCEx_PLL2_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cbc:	e00f      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc2:	3328      	adds	r3, #40	; 0x28
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 f86a 	bl	8004da0 <RCCEx_PLL3_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cd2:	e004      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ce6:	4bbf      	ldr	r3, [pc, #764]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf4:	4abb      	ldr	r2, [pc, #748]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	6553      	str	r3, [r2, #84]	; 0x54
 8003cfa:	e003      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f002 0302 	and.w	r3, r2, #2
 8003d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	d041      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d824      	bhi.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d81 	.word	0x08003d81
 8003d38:	08003d4d 	.word	0x08003d4d
 8003d3c:	08003d63 	.word	0x08003d63
 8003d40:	08003d81 	.word	0x08003d81
 8003d44:	08003d81 	.word	0x08003d81
 8003d48:	08003d81 	.word	0x08003d81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d50:	3308      	adds	r3, #8
 8003d52:	2101      	movs	r1, #1
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 ff71 	bl	8004c3c <RCCEx_PLL2_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d60:	e00f      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d66:	3328      	adds	r3, #40	; 0x28
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 f818 	bl	8004da0 <RCCEx_PLL3_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d76:	e004      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d7e:	e000      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d8a:	4b96      	ldr	r3, [pc, #600]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	f023 0107 	bic.w	r1, r3, #7
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d98:	4a92      	ldr	r2, [pc, #584]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	6553      	str	r3, [r2, #84]	; 0x54
 8003d9e:	e003      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	f002 0304 	and.w	r3, r2, #4
 8003db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003db8:	2300      	movs	r3, #0
 8003dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	d044      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d825      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003dd4:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003e29 	.word	0x08003e29
 8003de0:	08003df5 	.word	0x08003df5
 8003de4:	08003e0b 	.word	0x08003e0b
 8003de8:	08003e29 	.word	0x08003e29
 8003dec:	08003e29 	.word	0x08003e29
 8003df0:	08003e29 	.word	0x08003e29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df8:	3308      	adds	r3, #8
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 ff1d 	bl	8004c3c <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e08:	e00f      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0e:	3328      	adds	r3, #40	; 0x28
 8003e10:	2101      	movs	r1, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 ffc4 	bl	8004da0 <RCCEx_PLL3_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e1e:	e004      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e26:	e000      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10b      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e32:	4b6c      	ldr	r3, [pc, #432]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	f023 0107 	bic.w	r1, r3, #7
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	4a68      	ldr	r2, [pc, #416]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6593      	str	r3, [r2, #88]	; 0x58
 8003e48:	e003      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f002 0320 	and.w	r3, r2, #32
 8003e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	d055      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e7e:	d033      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e84:	d82c      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d02f      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e90:	d826      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e96:	d02b      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e9c:	d820      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea2:	d012      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea8:	d81a      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d022      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb2:	d115      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb8:	3308      	adds	r3, #8
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 febd 	bl	8004c3c <RCCEx_PLL2_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ece:	3328      	adds	r3, #40	; 0x28
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 ff64 	bl	8004da0 <RCCEx_PLL3_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ee6:	e006      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ee8:	bf00      	nop
 8003eea:	e004      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003eec:	bf00      	nop
 8003eee:	e002      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efe:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	4a35      	ldr	r2, [pc, #212]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6553      	str	r3, [r2, #84]	; 0x54
 8003f14:	e003      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	d058      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f4a:	d033      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f50:	d82c      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f56:	d02f      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5c:	d826      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f62:	d02b      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f68:	d820      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f6e:	d012      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f74:	d81a      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d022      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d115      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f84:	3308      	adds	r3, #8
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fe57 	bl	8004c3c <RCCEx_PLL2_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f94:	e015      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f9a:	3328      	adds	r3, #40	; 0x28
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fefe 	bl	8004da0 <RCCEx_PLL3_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fb2:	e006      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fb4:	bf00      	nop
 8003fb6:	e004      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fb8:	bf00      	nop
 8003fba:	e002      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fda:	4a02      	ldr	r2, [pc, #8]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe0:	e006      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003fe2:	bf00      	nop
 8003fe4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004006:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800400a:	460b      	mov	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	d055      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004018:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800401c:	d033      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800401e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004022:	d82c      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d02f      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402e:	d826      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004030:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004034:	d02b      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004036:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800403a:	d820      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800403c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004040:	d012      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004046:	d81a      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d022      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800404c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004050:	d115      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004056:	3308      	adds	r3, #8
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fdee 	bl	8004c3c <RCCEx_PLL2_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004066:	e015      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406c:	3328      	adds	r3, #40	; 0x28
 800406e:	2102      	movs	r1, #2
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fe95 	bl	8004da0 <RCCEx_PLL3_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800407c:	e00a      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004084:	e006      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004086:	bf00      	nop
 8004088:	e004      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800408a:	bf00      	nop
 800408c:	e002      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800409c:	4ba1      	ldr	r3, [pc, #644]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040ac:	4a9d      	ldr	r2, [pc, #628]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ae:	430b      	orrs	r3, r1
 80040b0:	6593      	str	r3, [r2, #88]	; 0x58
 80040b2:	e003      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 0308 	and.w	r3, r2, #8
 80040c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	d01e      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ee:	3328      	adds	r3, #40	; 0x28
 80040f0:	2102      	movs	r1, #2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fe54 	bl	8004da0 <RCCEx_PLL3_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004104:	4b87      	ldr	r3, [pc, #540]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004114:	4a83      	ldr	r2, [pc, #524]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004116:	430b      	orrs	r3, r1
 8004118:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f002 0310 	and.w	r3, r2, #16
 8004126:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004130:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004134:	460b      	mov	r3, r1
 8004136:	4313      	orrs	r3, r2
 8004138:	d01e      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	d10c      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414c:	3328      	adds	r3, #40	; 0x28
 800414e:	2102      	movs	r1, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fe25 	bl	8004da0 <RCCEx_PLL3_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004162:	4b70      	ldr	r3, [pc, #448]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004172:	4a6c      	ldr	r2, [pc, #432]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004174:	430b      	orrs	r3, r1
 8004176:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800418e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004192:	460b      	mov	r3, r1
 8004194:	4313      	orrs	r3, r2
 8004196:	d03e      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041a4:	d022      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041aa:	d81b      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b4:	d00b      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041b6:	e015      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041bc:	3308      	adds	r3, #8
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fd3b 	bl	8004c3c <RCCEx_PLL2_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041cc:	e00f      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d2:	3328      	adds	r3, #40	; 0x28
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fde2 	bl	8004da0 <RCCEx_PLL3_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041e2:	e004      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80041ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041f6:	4b4b      	ldr	r3, [pc, #300]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004202:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004206:	4a47      	ldr	r2, [pc, #284]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004208:	430b      	orrs	r3, r1
 800420a:	6593      	str	r3, [r2, #88]	; 0x58
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004222:	67bb      	str	r3, [r7, #120]	; 0x78
 8004224:	2300      	movs	r3, #0
 8004226:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004228:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d03b      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800423e:	d01f      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004240:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004244:	d818      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424a:	d003      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800424c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004250:	d007      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004252:	e011      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004254:	4b33      	ldr	r3, [pc, #204]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	4a32      	ldr	r2, [pc, #200]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800425a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004260:	e00f      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	3328      	adds	r3, #40	; 0x28
 8004268:	2101      	movs	r1, #1
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fd98 	bl	8004da0 <RCCEx_PLL3_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004276:	e004      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800428a:	4b26      	ldr	r3, [pc, #152]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	4a22      	ldr	r2, [pc, #136]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800429c:	430b      	orrs	r3, r1
 800429e:	6553      	str	r3, [r2, #84]	; 0x54
 80042a0:	e003      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80042b6:	673b      	str	r3, [r7, #112]	; 0x70
 80042b8:	2300      	movs	r3, #0
 80042ba:	677b      	str	r3, [r7, #116]	; 0x74
 80042bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80042c0:	460b      	mov	r3, r1
 80042c2:	4313      	orrs	r3, r2
 80042c4:	d034      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d007      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042d6:	e011      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4a11      	ldr	r2, [pc, #68]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042e4:	e00e      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ea:	3308      	adds	r3, #8
 80042ec:	2102      	movs	r1, #2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fca4 	bl	8004c3c <RCCEx_PLL2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042fa:	e003      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10d      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800430e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431a:	4a02      	ldr	r2, [pc, #8]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431c:	430b      	orrs	r3, r1
 800431e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004320:	e006      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004322:	bf00      	nop
 8004324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800432c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800433c:	66bb      	str	r3, [r7, #104]	; 0x68
 800433e:	2300      	movs	r3, #0
 8004340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004342:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004346:	460b      	mov	r3, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	d00c      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004350:	3328      	adds	r3, #40	; 0x28
 8004352:	2102      	movs	r1, #2
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fd23 	bl	8004da0 <RCCEx_PLL3_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004372:	663b      	str	r3, [r7, #96]	; 0x60
 8004374:	2300      	movs	r3, #0
 8004376:	667b      	str	r3, [r7, #100]	; 0x64
 8004378:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800437c:	460b      	mov	r3, r1
 800437e:	4313      	orrs	r3, r2
 8004380:	d038      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800438e:	d018      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004394:	d811      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800439a:	d014      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800439c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a0:	d80b      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d011      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043aa:	d106      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ac:	4bc3      	ldr	r3, [pc, #780]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	4ac2      	ldr	r2, [pc, #776]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043b8:	e008      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043c0:	e004      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043c2:	bf00      	nop
 80043c4:	e002      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d4:	4bb9      	ldr	r3, [pc, #740]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e4:	4ab5      	ldr	r2, [pc, #724]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	6553      	str	r3, [r2, #84]	; 0x54
 80043ea:	e003      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004400:	65bb      	str	r3, [r7, #88]	; 0x58
 8004402:	2300      	movs	r3, #0
 8004404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004406:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800440a:	460b      	mov	r3, r1
 800440c:	4313      	orrs	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004410:	4baa      	ldr	r3, [pc, #680]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004414:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441e:	4aa7      	ldr	r2, [pc, #668]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004420:	430b      	orrs	r3, r1
 8004422:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004430:	653b      	str	r3, [r7, #80]	; 0x50
 8004432:	2300      	movs	r3, #0
 8004434:	657b      	str	r3, [r7, #84]	; 0x54
 8004436:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800443a:	460b      	mov	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004440:	4b9e      	ldr	r3, [pc, #632]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004450:	4a9a      	ldr	r2, [pc, #616]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004452:	430b      	orrs	r3, r1
 8004454:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004462:	64bb      	str	r3, [r7, #72]	; 0x48
 8004464:	2300      	movs	r3, #0
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004468:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800446c:	460b      	mov	r3, r1
 800446e:	4313      	orrs	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004472:	4b92      	ldr	r3, [pc, #584]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004480:	4a8e      	ldr	r2, [pc, #568]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004482:	430b      	orrs	r3, r1
 8004484:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004492:	643b      	str	r3, [r7, #64]	; 0x40
 8004494:	2300      	movs	r3, #0
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
 8004498:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800449c:	460b      	mov	r3, r1
 800449e:	4313      	orrs	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044a2:	4b86      	ldr	r3, [pc, #536]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	4a85      	ldr	r2, [pc, #532]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044ac:	6113      	str	r3, [r2, #16]
 80044ae:	4b83      	ldr	r3, [pc, #524]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b0:	6919      	ldr	r1, [r3, #16]
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80044ba:	4a80      	ldr	r2, [pc, #512]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044bc:	430b      	orrs	r3, r1
 80044be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80044cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ce:	2300      	movs	r3, #0
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044dc:	4b77      	ldr	r3, [pc, #476]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	4a74      	ldr	r2, [pc, #464]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ec:	430b      	orrs	r3, r1
 80044ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30
 80044fe:	2300      	movs	r3, #0
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
 8004502:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004506:	460b      	mov	r3, r1
 8004508:	4313      	orrs	r3, r2
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800450c:	4b6b      	ldr	r3, [pc, #428]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004510:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800451c:	4a67      	ldr	r2, [pc, #412]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451e:	430b      	orrs	r3, r1
 8004520:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	2100      	movs	r1, #0
 800452c:	62b9      	str	r1, [r7, #40]	; 0x28
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004534:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d011      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004542:	3308      	adds	r3, #8
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fb78 	bl	8004c3c <RCCEx_PLL2_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	2100      	movs	r1, #0
 800456c:	6239      	str	r1, [r7, #32]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
 8004574:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004578:	460b      	mov	r3, r1
 800457a:	4313      	orrs	r3, r2
 800457c:	d011      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004582:	3308      	adds	r3, #8
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb58 	bl	8004c3c <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800459e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	2100      	movs	r1, #0
 80045ac:	61b9      	str	r1, [r7, #24]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045b8:	460b      	mov	r3, r1
 80045ba:	4313      	orrs	r3, r2
 80045bc:	d011      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c2:	3308      	adds	r3, #8
 80045c4:	2102      	movs	r1, #2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fb38 	bl	8004c3c <RCCEx_PLL2_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	2100      	movs	r1, #0
 80045ec:	6139      	str	r1, [r7, #16]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d011      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004602:	3328      	adds	r3, #40	; 0x28
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fbca 	bl	8004da0 <RCCEx_PLL3_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800461e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	2100      	movs	r1, #0
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d011      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004642:	3328      	adds	r3, #40	; 0x28
 8004644:	2101      	movs	r1, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fbaa 	bl	8004da0 <RCCEx_PLL3_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800465e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	2100      	movs	r1, #0
 800466c:	6039      	str	r1, [r7, #0]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004678:	460b      	mov	r3, r1
 800467a:	4313      	orrs	r3, r2
 800467c:	d011      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004682:	3328      	adds	r3, #40	; 0x28
 8004684:	2102      	movs	r1, #2
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fb8a 	bl	8004da0 <RCCEx_PLL3_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800469e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80046a2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80046b6:	46bd      	mov	sp, r7
 80046b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046bc:	58024400 	.word	0x58024400

080046c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046c4:	f7fe fd96 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4904      	ldr	r1, [pc, #16]	; (80046e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	58024400 	.word	0x58024400
 80046e8:	080076a4 	.word	0x080076a4

080046ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b089      	sub	sp, #36	; 0x24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046f4:	4ba1      	ldr	r3, [pc, #644]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80046fe:	4b9f      	ldr	r3, [pc, #636]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	0b1b      	lsrs	r3, r3, #12
 8004704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004708:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800470a:	4b9c      	ldr	r3, [pc, #624]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004716:	4b99      	ldr	r3, [pc, #612]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	08db      	lsrs	r3, r3, #3
 800471c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8111 	beq.w	800495c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b02      	cmp	r3, #2
 800473e:	f000 8083 	beq.w	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b02      	cmp	r3, #2
 8004746:	f200 80a1 	bhi.w	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d056      	beq.n	8004804 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004756:	e099      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004758:	4b88      	ldr	r3, [pc, #544]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d02d      	beq.n	80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004764:	4b85      	ldr	r3, [pc, #532]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	4a84      	ldr	r2, [pc, #528]	; (8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	ee07 3a90 	vmov	s15, r3
 800477c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478e:	4b7b      	ldr	r3, [pc, #492]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479e:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047be:	e087      	b.n	80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d2:	4b6a      	ldr	r3, [pc, #424]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004802:	e065      	b.n	80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800498c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b59      	ldr	r3, [pc, #356]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a03 	vldr	s12, [r7, #12]
 800482a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004846:	e043      	b.n	80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	4b48      	ldr	r3, [pc, #288]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	ed97 6a03 	vldr	s12, [r7, #12]
 800486e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488a:	e021      	b.n	80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800498c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800489a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489e:	4b37      	ldr	r3, [pc, #220]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048d0:	4b2a      	ldr	r3, [pc, #168]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	0a5b      	lsrs	r3, r3, #9
 80048d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f6:	ee17 2a90 	vmov	r2, s15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048fe:	4b1f      	ldr	r3, [pc, #124]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004914:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004918:	edd7 6a07 	vldr	s13, [r7, #28]
 800491c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004924:	ee17 2a90 	vmov	r2, s15
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800492c:	4b13      	ldr	r3, [pc, #76]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	0e1b      	lsrs	r3, r3, #24
 8004932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004946:	edd7 6a07 	vldr	s13, [r7, #28]
 800494a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800494e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004952:	ee17 2a90 	vmov	r2, s15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800495a:	e008      	b.n	800496e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	609a      	str	r2, [r3, #8]
}
 800496e:	bf00      	nop
 8004970:	3724      	adds	r7, #36	; 0x24
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	58024400 	.word	0x58024400
 8004980:	03d09000 	.word	0x03d09000
 8004984:	46000000 	.word	0x46000000
 8004988:	4c742400 	.word	0x4c742400
 800498c:	4a742400 	.word	0x4a742400
 8004990:	4af42400 	.word	0x4af42400

08004994 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800499c:	4ba1      	ldr	r3, [pc, #644]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049a6:	4b9f      	ldr	r3, [pc, #636]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	0d1b      	lsrs	r3, r3, #20
 80049ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049b2:	4b9c      	ldr	r3, [pc, #624]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049be:	4b99      	ldr	r3, [pc, #612]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	08db      	lsrs	r3, r3, #3
 80049c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8111 	beq.w	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	f000 8083 	beq.w	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	f200 80a1 	bhi.w	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d056      	beq.n	8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049fe:	e099      	b.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a00:	4b88      	ldr	r3, [pc, #544]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d02d      	beq.n	8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a0c:	4b85      	ldr	r3, [pc, #532]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	08db      	lsrs	r3, r3, #3
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	4a84      	ldr	r2, [pc, #528]	; (8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a36:	4b7b      	ldr	r3, [pc, #492]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a66:	e087      	b.n	8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7a:	4b6a      	ldr	r3, [pc, #424]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aaa:	e065      	b.n	8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abe:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aee:	e043      	b.n	8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b02:	4b48      	ldr	r3, [pc, #288]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b32:	e021      	b.n	8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b46:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b78:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	0a5b      	lsrs	r3, r3, #9
 8004b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b9e:	ee17 2a90 	vmov	r2, s15
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004ba6:	4b1f      	ldr	r3, [pc, #124]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	0c1b      	lsrs	r3, r3, #16
 8004bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bcc:	ee17 2a90 	vmov	r2, s15
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004bd4:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	0e1b      	lsrs	r3, r3, #24
 8004bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfa:	ee17 2a90 	vmov	r2, s15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c02:	e008      	b.n	8004c16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	609a      	str	r2, [r3, #8]
}
 8004c16:	bf00      	nop
 8004c18:	3724      	adds	r7, #36	; 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	58024400 	.word	0x58024400
 8004c28:	03d09000 	.word	0x03d09000
 8004c2c:	46000000 	.word	0x46000000
 8004c30:	4c742400 	.word	0x4c742400
 8004c34:	4a742400 	.word	0x4a742400
 8004c38:	4af42400 	.word	0x4af42400

08004c3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c4a:	4b53      	ldr	r3, [pc, #332]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d101      	bne.n	8004c5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e099      	b.n	8004d8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a4e      	ldr	r2, [pc, #312]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c66:	f7fc fdf9 	bl	800185c <HAL_GetTick>
 8004c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c6c:	e008      	b.n	8004c80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c6e:	f7fc fdf5 	bl	800185c <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e086      	b.n	8004d8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c80:	4b45      	ldr	r3, [pc, #276]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c8c:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	031b      	lsls	r3, r3, #12
 8004c9a:	493f      	ldr	r1, [pc, #252]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	628b      	str	r3, [r1, #40]	; 0x28
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	025b      	lsls	r3, r3, #9
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	061b      	lsls	r3, r3, #24
 8004ccc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cd0:	4931      	ldr	r1, [pc, #196]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cd6:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	492d      	ldr	r1, [pc, #180]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	f023 0220 	bic.w	r2, r3, #32
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	4928      	ldr	r1, [pc, #160]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cfa:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfe:	4a26      	ldr	r2, [pc, #152]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d00:	f023 0310 	bic.w	r3, r3, #16
 8004d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d06:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d0a:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <RCCEx_PLL2_Config+0x160>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	69d2      	ldr	r2, [r2, #28]
 8004d12:	00d2      	lsls	r2, r2, #3
 8004d14:	4920      	ldr	r1, [pc, #128]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d1a:	4b1f      	ldr	r3, [pc, #124]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d20:	f043 0310 	orr.w	r3, r3, #16
 8004d24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d106      	bne.n	8004d3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	4a19      	ldr	r2, [pc, #100]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d38:	e00f      	b.n	8004d5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d106      	bne.n	8004d4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d40:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	4a14      	ldr	r2, [pc, #80]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d4c:	e005      	b.n	8004d5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d66:	f7fc fd79 	bl	800185c <HAL_GetTick>
 8004d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d6c:	e008      	b.n	8004d80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d6e:	f7fc fd75 	bl	800185c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e006      	b.n	8004d8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <RCCEx_PLL2_Config+0x15c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	ffff0007 	.word	0xffff0007

08004da0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dae:	4b53      	ldr	r3, [pc, #332]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d101      	bne.n	8004dbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e099      	b.n	8004ef2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dbe:	4b4f      	ldr	r3, [pc, #316]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a4e      	ldr	r2, [pc, #312]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dca:	f7fc fd47 	bl	800185c <HAL_GetTick>
 8004dce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dd2:	f7fc fd43 	bl	800185c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e086      	b.n	8004ef2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004de4:	4b45      	ldr	r3, [pc, #276]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004df0:	4b42      	ldr	r3, [pc, #264]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	051b      	lsls	r3, r3, #20
 8004dfe:	493f      	ldr	r1, [pc, #252]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	628b      	str	r3, [r1, #40]	; 0x28
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	025b      	lsls	r3, r3, #9
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	061b      	lsls	r3, r3, #24
 8004e30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e34:	4931      	ldr	r1, [pc, #196]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e3a:	4b30      	ldr	r3, [pc, #192]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	492d      	ldr	r1, [pc, #180]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e4c:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	4928      	ldr	r1, [pc, #160]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e5e:	4b27      	ldr	r3, [pc, #156]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	4a26      	ldr	r2, [pc, #152]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e6a:	4b24      	ldr	r3, [pc, #144]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6e:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <RCCEx_PLL3_Config+0x160>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	69d2      	ldr	r2, [r2, #28]
 8004e76:	00d2      	lsls	r2, r2, #3
 8004e78:	4920      	ldr	r1, [pc, #128]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e7e:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e90:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004e96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e9c:	e00f      	b.n	8004ebe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d106      	bne.n	8004eb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ea4:	4b15      	ldr	r3, [pc, #84]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	4a14      	ldr	r2, [pc, #80]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004eb0:	e005      	b.n	8004ebe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	4a11      	ldr	r2, [pc, #68]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ebc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ebe:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a0e      	ldr	r2, [pc, #56]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eca:	f7fc fcc7 	bl	800185c <HAL_GetTick>
 8004ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ed0:	e008      	b.n	8004ee4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ed2:	f7fc fcc3 	bl	800185c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e006      	b.n	8004ef2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	58024400 	.word	0x58024400
 8004f00:	ffff0007 	.word	0xffff0007

08004f04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e10f      	b.n	8005136 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a87      	ldr	r2, [pc, #540]	; (8005140 <HAL_SPI_Init+0x23c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00f      	beq.n	8004f46 <HAL_SPI_Init+0x42>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a86      	ldr	r2, [pc, #536]	; (8005144 <HAL_SPI_Init+0x240>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00a      	beq.n	8004f46 <HAL_SPI_Init+0x42>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a84      	ldr	r2, [pc, #528]	; (8005148 <HAL_SPI_Init+0x244>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d005      	beq.n	8004f46 <HAL_SPI_Init+0x42>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	2b0f      	cmp	r3, #15
 8004f40:	d901      	bls.n	8004f46 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0f7      	b.n	8005136 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fd5a 	bl	8005a00 <SPI_GetPacketSize>
 8004f4c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a7b      	ldr	r2, [pc, #492]	; (8005140 <HAL_SPI_Init+0x23c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00c      	beq.n	8004f72 <HAL_SPI_Init+0x6e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a79      	ldr	r2, [pc, #484]	; (8005144 <HAL_SPI_Init+0x240>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <HAL_SPI_Init+0x6e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a78      	ldr	r2, [pc, #480]	; (8005148 <HAL_SPI_Init+0x244>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d002      	beq.n	8004f72 <HAL_SPI_Init+0x6e>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d811      	bhi.n	8004f96 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f76:	4a72      	ldr	r2, [pc, #456]	; (8005140 <HAL_SPI_Init+0x23c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a70      	ldr	r2, [pc, #448]	; (8005144 <HAL_SPI_Init+0x240>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_SPI_Init+0x8c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a6f      	ldr	r2, [pc, #444]	; (8005148 <HAL_SPI_Init+0x244>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d104      	bne.n	8004f9a <HAL_SPI_Init+0x96>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d901      	bls.n	8004f9a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0cd      	b.n	8005136 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fc f9e4 	bl	800137c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004fd6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fe0:	d119      	bne.n	8005016 <HAL_SPI_Init+0x112>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fea:	d103      	bne.n	8004ff4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10c      	bne.n	8005016 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005004:	d107      	bne.n	8005016 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005014:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00f      	beq.n	8005042 <HAL_SPI_Init+0x13e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b06      	cmp	r3, #6
 8005028:	d90b      	bls.n	8005042 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e007      	b.n	8005052 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005050:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69da      	ldr	r2, [r3, #28]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	431a      	orrs	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005064:	ea42 0103 	orr.w	r1, r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b2:	ea42 0103 	orr.w	r1, r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d113      	bne.n	80050f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40013000 	.word	0x40013000
 8005144:	40003800 	.word	0x40003800
 8005148:	40003c00 	.word	0x40003c00

0800514c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	; 0x28
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	4613      	mov	r3, r2
 800515a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3320      	adds	r3, #32
 8005162:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_SPI_Transmit+0x2a>
 8005172:	2302      	movs	r3, #2
 8005174:	e1e1      	b.n	800553a <HAL_SPI_Transmit+0x3ee>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800517e:	f7fc fb6d 	bl	800185c <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d007      	beq.n	80051a0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005190:	2302      	movs	r3, #2
 8005192:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800519c:	7efb      	ldrb	r3, [r7, #27]
 800519e:	e1cc      	b.n	800553a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_SPI_Transmit+0x60>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80051b8:	7efb      	ldrb	r3, [r7, #27]
 80051ba:	e1be      	b.n	800553a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2203      	movs	r2, #3
 80051c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	88fa      	ldrh	r2, [r7, #6]
 80051d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800520c:	d108      	bne.n	8005220 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e009      	b.n	8005234 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005232:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4b96      	ldr	r3, [pc, #600]	; (8005494 <HAL_SPI_Transmit+0x348>)
 800523c:	4013      	ands	r3, r2
 800523e:	88f9      	ldrh	r1, [r7, #6]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	430b      	orrs	r3, r1
 8005246:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005260:	d107      	bne.n	8005272 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005270:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d947      	bls.n	800530a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800527a:	e03f      	b.n	80052fc <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b02      	cmp	r3, #2
 8005288:	d114      	bne.n	80052b4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529a:	1d1a      	adds	r2, r3, #4
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052b2:	e023      	b.n	80052fc <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b4:	f7fc fad2 	bl	800185c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d803      	bhi.n	80052cc <HAL_SPI_Transmit+0x180>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ca:	d102      	bne.n	80052d2 <HAL_SPI_Transmit+0x186>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d114      	bne.n	80052fc <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fac6 	bl	8005864 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e11e      	b.n	800553a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1b9      	bne.n	800527c <HAL_SPI_Transmit+0x130>
 8005308:	e0f1      	b.n	80054ee <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2b07      	cmp	r3, #7
 8005310:	f240 80e6 	bls.w	80054e0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005314:	e05d      	b.n	80053d2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b02      	cmp	r3, #2
 8005322:	d132      	bne.n	800538a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d918      	bls.n	8005362 <HAL_SPI_Transmit+0x216>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d014      	beq.n	8005362 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b02      	subs	r3, #2
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005360:	e037      	b.n	80053d2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	881a      	ldrh	r2, [r3, #0]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	1c9a      	adds	r2, r3, #2
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005388:	e023      	b.n	80053d2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800538a:	f7fc fa67 	bl	800185c <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d803      	bhi.n	80053a2 <HAL_SPI_Transmit+0x256>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a0:	d102      	bne.n	80053a8 <HAL_SPI_Transmit+0x25c>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d114      	bne.n	80053d2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fa5b 	bl	8005864 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e0b3      	b.n	800553a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d19b      	bne.n	8005316 <HAL_SPI_Transmit+0x1ca>
 80053de:	e086      	b.n	80054ee <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d154      	bne.n	8005498 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d918      	bls.n	800542c <HAL_SPI_Transmit+0x2e0>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d914      	bls.n	800542c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005412:	1d1a      	adds	r2, r3, #4
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b04      	subs	r3, #4
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800542a:	e059      	b.n	80054e0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d917      	bls.n	8005468 <HAL_SPI_Transmit+0x31c>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005444:	881a      	ldrh	r2, [r3, #0]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b02      	subs	r3, #2
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005466:	e03b      	b.n	80054e0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3320      	adds	r3, #32
 8005472:	7812      	ldrb	r2, [r2, #0]
 8005474:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005492:	e025      	b.n	80054e0 <HAL_SPI_Transmit+0x394>
 8005494:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005498:	f7fc f9e0 	bl	800185c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d803      	bhi.n	80054b0 <HAL_SPI_Transmit+0x364>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ae:	d102      	bne.n	80054b6 <HAL_SPI_Transmit+0x36a>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d114      	bne.n	80054e0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f9d4 	bl	8005864 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e02c      	b.n	800553a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f47f af79 	bne.w	80053e0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2108      	movs	r1, #8
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fa53 	bl	80059a4 <SPI_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f9a5 	bl	8005864 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005538:	7efb      	ldrb	r3, [r7, #27]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop

08005544 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	4613      	mov	r3, r2
 8005552:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3330      	adds	r3, #48	; 0x30
 800555e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_SPI_Receive+0x2a>
 800556a:	2302      	movs	r3, #2
 800556c:	e173      	b.n	8005856 <HAL_SPI_Receive+0x312>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005576:	f7fc f971 	bl	800185c <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d007      	beq.n	8005598 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8005588:	2302      	movs	r3, #2
 800558a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005594:	7ffb      	ldrb	r3, [r7, #31]
 8005596:	e15e      	b.n	8005856 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Receive+0x60>
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d107      	bne.n	80055b4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055b0:	7ffb      	ldrb	r3, [r7, #31]
 80055b2:	e150      	b.n	8005856 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2204      	movs	r2, #4
 80055b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005604:	d108      	bne.n	8005618 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	e009      	b.n	800562c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800562a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	4b8b      	ldr	r3, [pc, #556]	; (8005860 <HAL_SPI_Receive+0x31c>)
 8005634:	4013      	ands	r3, r2
 8005636:	88f9      	ldrh	r1, [r7, #6]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	430b      	orrs	r3, r1
 800563e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005658:	d107      	bne.n	800566a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005668:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b0f      	cmp	r3, #15
 8005670:	d948      	bls.n	8005704 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005672:	e040      	b.n	80056f6 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	f248 0308 	movw	r3, #32776	; 0x8008
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d014      	beq.n	80056ae <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800568c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800568e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80056ac:	e023      	b.n	80056f6 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ae:	f7fc f8d5 	bl	800185c <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d803      	bhi.n	80056c6 <HAL_SPI_Receive+0x182>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Receive+0x188>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d114      	bne.n	80056f6 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f8c9 	bl	8005864 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0af      	b.n	8005856 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1b8      	bne.n	8005674 <HAL_SPI_Receive+0x130>
 8005702:	e095      	b.n	8005830 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b07      	cmp	r3, #7
 800570a:	f240 808b 	bls.w	8005824 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800570e:	e03f      	b.n	8005790 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b01      	cmp	r3, #1
 800571c:	d114      	bne.n	8005748 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	8812      	ldrh	r2, [r2, #0]
 8005726:	b292      	uxth	r2, r2
 8005728:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572e:	1c9a      	adds	r2, r3, #2
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005746:	e023      	b.n	8005790 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005748:	f7fc f888 	bl	800185c <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d803      	bhi.n	8005760 <HAL_SPI_Receive+0x21c>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800575e:	d102      	bne.n	8005766 <HAL_SPI_Receive+0x222>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d114      	bne.n	8005790 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f87c 	bl	8005864 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e062      	b.n	8005856 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1b9      	bne.n	8005710 <HAL_SPI_Receive+0x1cc>
 800579c:	e048      	b.n	8005830 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d117      	bne.n	80057dc <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80057da:	e023      	b.n	8005824 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057dc:	f7fc f83e 	bl	800185c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d803      	bhi.n	80057f4 <HAL_SPI_Receive+0x2b0>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f2:	d102      	bne.n	80057fa <HAL_SPI_Receive+0x2b6>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d114      	bne.n	8005824 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f832 	bl	8005864 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800580e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e018      	b.n	8005856 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1b6      	bne.n	800579e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f817 	bl	8005864 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8005854:	7ffb      	ldrb	r3, [r7, #31]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3720      	adds	r7, #32
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	ffff0000 	.word	0xffff0000

08005864 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0208 	orr.w	r2, r2, #8
 8005882:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0210 	orr.w	r2, r2, #16
 8005892:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6919      	ldr	r1, [r3, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b3c      	ldr	r3, [pc, #240]	; (80059a0 <SPI_CloseTransfer+0x13c>)
 80058b0:	400b      	ands	r3, r1
 80058b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80058c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d014      	beq.n	80058fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00f      	beq.n	80058fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0220 	orr.w	r2, r2, #32
 80058f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b03      	cmp	r3, #3
 8005904:	d014      	beq.n	8005930 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00f      	beq.n	8005930 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005916:	f043 0204 	orr.w	r2, r3, #4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00f      	beq.n	800595a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005958:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00f      	beq.n	8005984 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596a:	f043 0208 	orr.w	r2, r3, #8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005982:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	fffffc90 	.word	0xfffffc90

080059a4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059b4:	e010      	b.n	80059d8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b6:	f7fb ff51 	bl	800185c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d803      	bhi.n	80059ce <SPI_WaitOnFlagUntilTimeout+0x2a>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059cc:	d102      	bne.n	80059d4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e00f      	b.n	80059f8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4013      	ands	r3, r2
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	bf0c      	ite	eq
 80059e8:	2301      	moveq	r3, #1
 80059ea:	2300      	movne	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d0df      	beq.n	80059b6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	08db      	lsrs	r3, r3, #3
 8005a20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e042      	b.n	8005ace <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fb fcf6 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2224      	movs	r2, #36	; 0x24
 8005a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f983 	bl	8005d84 <UART_SetConfig>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e022      	b.n	8005ace <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fedf 	bl	8006854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 ff66 	bl	8006998 <UART_CheckIdleState>
 8005acc:	4603      	mov	r3, r0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b08a      	sub	sp, #40	; 0x28
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d17b      	bne.n	8005be8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_UART_Transmit+0x26>
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e074      	b.n	8005bea <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2221      	movs	r2, #33	; 0x21
 8005b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b10:	f7fb fea4 	bl	800185c <HAL_GetTick>
 8005b14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	88fa      	ldrh	r2, [r7, #6]
 8005b22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	d108      	bne.n	8005b42 <HAL_UART_Transmit+0x6c>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d104      	bne.n	8005b42 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	e003      	b.n	8005b4a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b4a:	e030      	b.n	8005bae <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	2180      	movs	r1, #128	; 0x80
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 ffc8 	bl	8006aec <UART_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e03d      	b.n	8005bea <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	3302      	adds	r3, #2
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	e007      	b.n	8005b9c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	781a      	ldrb	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1c8      	bne.n	8005b4c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2140      	movs	r1, #64	; 0x40
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 ff91 	bl	8006aec <UART_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e006      	b.n	8005bea <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e000      	b.n	8005bea <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b08a      	sub	sp, #40	; 0x28
 8005bf6:	af02      	add	r7, sp, #8
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	f040 80b5 	bne.w	8005d78 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <HAL_UART_Receive+0x28>
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e0ad      	b.n	8005d7a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2222      	movs	r2, #34	; 0x22
 8005c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c34:	f7fb fe12 	bl	800185c <HAL_GetTick>
 8005c38:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d10e      	bne.n	8005c72 <HAL_UART_Receive+0x80>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <HAL_UART_Receive+0x76>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c66:	e02d      	b.n	8005cc4 <HAL_UART_Receive+0xd2>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	22ff      	movs	r2, #255	; 0xff
 8005c6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c70:	e028      	b.n	8005cc4 <HAL_UART_Receive+0xd2>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10d      	bne.n	8005c96 <HAL_UART_Receive+0xa4>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <HAL_UART_Receive+0x9a>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c8a:	e01b      	b.n	8005cc4 <HAL_UART_Receive+0xd2>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	227f      	movs	r2, #127	; 0x7f
 8005c90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c94:	e016      	b.n	8005cc4 <HAL_UART_Receive+0xd2>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c9e:	d10d      	bne.n	8005cbc <HAL_UART_Receive+0xca>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d104      	bne.n	8005cb2 <HAL_UART_Receive+0xc0>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	227f      	movs	r2, #127	; 0x7f
 8005cac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cb0:	e008      	b.n	8005cc4 <HAL_UART_Receive+0xd2>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	223f      	movs	r2, #63	; 0x3f
 8005cb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cba:	e003      	b.n	8005cc4 <HAL_UART_Receive+0xd2>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005cca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd4:	d108      	bne.n	8005ce8 <HAL_UART_Receive+0xf6>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d104      	bne.n	8005ce8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	e003      	b.n	8005cf0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005cf0:	e036      	b.n	8005d60 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2120      	movs	r1, #32
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fef5 	bl	8006aec <UART_WaitOnFlagUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e032      	b.n	8005d7a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10c      	bne.n	8005d34 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	8a7b      	ldrh	r3, [r7, #18]
 8005d24:	4013      	ands	r3, r2
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	3302      	adds	r3, #2
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e00c      	b.n	8005d4e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	8a7b      	ldrh	r3, [r7, #18]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	4013      	ands	r3, r2
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1c2      	bne.n	8005cf2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e000      	b.n	8005d7a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005d78:	2302      	movs	r3, #2
  }
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d88:	b092      	sub	sp, #72	; 0x48
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4bbe      	ldr	r3, [pc, #760]	; (80060ac <UART_SetConfig+0x328>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4ab3      	ldr	r2, [pc, #716]	; (80060b0 <UART_SetConfig+0x32c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dec:	4313      	orrs	r3, r2
 8005dee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	4baf      	ldr	r3, [pc, #700]	; (80060b4 <UART_SetConfig+0x330>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	f023 010f 	bic.w	r1, r3, #15
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4aa6      	ldr	r2, [pc, #664]	; (80060b8 <UART_SetConfig+0x334>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d177      	bne.n	8005f14 <UART_SetConfig+0x190>
 8005e24:	4ba5      	ldr	r3, [pc, #660]	; (80060bc <UART_SetConfig+0x338>)
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2c:	2b28      	cmp	r3, #40	; 0x28
 8005e2e:	d86d      	bhi.n	8005f0c <UART_SetConfig+0x188>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0xb4>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005edd 	.word	0x08005edd
 8005e3c:	08005f0d 	.word	0x08005f0d
 8005e40:	08005f0d 	.word	0x08005f0d
 8005e44:	08005f0d 	.word	0x08005f0d
 8005e48:	08005f0d 	.word	0x08005f0d
 8005e4c:	08005f0d 	.word	0x08005f0d
 8005e50:	08005f0d 	.word	0x08005f0d
 8005e54:	08005f0d 	.word	0x08005f0d
 8005e58:	08005ee5 	.word	0x08005ee5
 8005e5c:	08005f0d 	.word	0x08005f0d
 8005e60:	08005f0d 	.word	0x08005f0d
 8005e64:	08005f0d 	.word	0x08005f0d
 8005e68:	08005f0d 	.word	0x08005f0d
 8005e6c:	08005f0d 	.word	0x08005f0d
 8005e70:	08005f0d 	.word	0x08005f0d
 8005e74:	08005f0d 	.word	0x08005f0d
 8005e78:	08005eed 	.word	0x08005eed
 8005e7c:	08005f0d 	.word	0x08005f0d
 8005e80:	08005f0d 	.word	0x08005f0d
 8005e84:	08005f0d 	.word	0x08005f0d
 8005e88:	08005f0d 	.word	0x08005f0d
 8005e8c:	08005f0d 	.word	0x08005f0d
 8005e90:	08005f0d 	.word	0x08005f0d
 8005e94:	08005f0d 	.word	0x08005f0d
 8005e98:	08005ef5 	.word	0x08005ef5
 8005e9c:	08005f0d 	.word	0x08005f0d
 8005ea0:	08005f0d 	.word	0x08005f0d
 8005ea4:	08005f0d 	.word	0x08005f0d
 8005ea8:	08005f0d 	.word	0x08005f0d
 8005eac:	08005f0d 	.word	0x08005f0d
 8005eb0:	08005f0d 	.word	0x08005f0d
 8005eb4:	08005f0d 	.word	0x08005f0d
 8005eb8:	08005efd 	.word	0x08005efd
 8005ebc:	08005f0d 	.word	0x08005f0d
 8005ec0:	08005f0d 	.word	0x08005f0d
 8005ec4:	08005f0d 	.word	0x08005f0d
 8005ec8:	08005f0d 	.word	0x08005f0d
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005f0d 	.word	0x08005f0d
 8005ed4:	08005f0d 	.word	0x08005f0d
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee2:	e222      	b.n	800632a <UART_SetConfig+0x5a6>
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eea:	e21e      	b.n	800632a <UART_SetConfig+0x5a6>
 8005eec:	2308      	movs	r3, #8
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef2:	e21a      	b.n	800632a <UART_SetConfig+0x5a6>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efa:	e216      	b.n	800632a <UART_SetConfig+0x5a6>
 8005efc:	2320      	movs	r3, #32
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e212      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f04:	2340      	movs	r3, #64	; 0x40
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0a:	e20e      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f12:	e20a      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a69      	ldr	r2, [pc, #420]	; (80060c0 <UART_SetConfig+0x33c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d130      	bne.n	8005f80 <UART_SetConfig+0x1fc>
 8005f1e:	4b67      	ldr	r3, [pc, #412]	; (80060bc <UART_SetConfig+0x338>)
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d826      	bhi.n	8005f78 <UART_SetConfig+0x1f4>
 8005f2a:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <UART_SetConfig+0x1ac>)
 8005f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f30:	08005f49 	.word	0x08005f49
 8005f34:	08005f51 	.word	0x08005f51
 8005f38:	08005f59 	.word	0x08005f59
 8005f3c:	08005f61 	.word	0x08005f61
 8005f40:	08005f69 	.word	0x08005f69
 8005f44:	08005f71 	.word	0x08005f71
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4e:	e1ec      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f56:	e1e8      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5e:	e1e4      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f66:	e1e0      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f68:	2320      	movs	r3, #32
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6e:	e1dc      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f70:	2340      	movs	r3, #64	; 0x40
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f76:	e1d8      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f78:	2380      	movs	r3, #128	; 0x80
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e1d4      	b.n	800632a <UART_SetConfig+0x5a6>
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a4f      	ldr	r2, [pc, #316]	; (80060c4 <UART_SetConfig+0x340>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d130      	bne.n	8005fec <UART_SetConfig+0x268>
 8005f8a:	4b4c      	ldr	r3, [pc, #304]	; (80060bc <UART_SetConfig+0x338>)
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d826      	bhi.n	8005fe4 <UART_SetConfig+0x260>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <UART_SetConfig+0x218>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fb5 	.word	0x08005fb5
 8005fa0:	08005fbd 	.word	0x08005fbd
 8005fa4:	08005fc5 	.word	0x08005fc5
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fba:	e1b6      	b.n	800632a <UART_SetConfig+0x5a6>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc2:	e1b2      	b.n	800632a <UART_SetConfig+0x5a6>
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fca:	e1ae      	b.n	800632a <UART_SetConfig+0x5a6>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd2:	e1aa      	b.n	800632a <UART_SetConfig+0x5a6>
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e1a6      	b.n	800632a <UART_SetConfig+0x5a6>
 8005fdc:	2340      	movs	r3, #64	; 0x40
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e1a2      	b.n	800632a <UART_SetConfig+0x5a6>
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e19e      	b.n	800632a <UART_SetConfig+0x5a6>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a35      	ldr	r2, [pc, #212]	; (80060c8 <UART_SetConfig+0x344>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d130      	bne.n	8006058 <UART_SetConfig+0x2d4>
 8005ff6:	4b31      	ldr	r3, [pc, #196]	; (80060bc <UART_SetConfig+0x338>)
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	d826      	bhi.n	8006050 <UART_SetConfig+0x2cc>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <UART_SetConfig+0x284>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006021 	.word	0x08006021
 800600c:	08006029 	.word	0x08006029
 8006010:	08006031 	.word	0x08006031
 8006014:	08006039 	.word	0x08006039
 8006018:	08006041 	.word	0x08006041
 800601c:	08006049 	.word	0x08006049
 8006020:	2300      	movs	r3, #0
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006026:	e180      	b.n	800632a <UART_SetConfig+0x5a6>
 8006028:	2304      	movs	r3, #4
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602e:	e17c      	b.n	800632a <UART_SetConfig+0x5a6>
 8006030:	2308      	movs	r3, #8
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e178      	b.n	800632a <UART_SetConfig+0x5a6>
 8006038:	2310      	movs	r3, #16
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e174      	b.n	800632a <UART_SetConfig+0x5a6>
 8006040:	2320      	movs	r3, #32
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e170      	b.n	800632a <UART_SetConfig+0x5a6>
 8006048:	2340      	movs	r3, #64	; 0x40
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e16c      	b.n	800632a <UART_SetConfig+0x5a6>
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e168      	b.n	800632a <UART_SetConfig+0x5a6>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <UART_SetConfig+0x348>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d142      	bne.n	80060e8 <UART_SetConfig+0x364>
 8006062:	4b16      	ldr	r3, [pc, #88]	; (80060bc <UART_SetConfig+0x338>)
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b05      	cmp	r3, #5
 800606c:	d838      	bhi.n	80060e0 <UART_SetConfig+0x35c>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0x2f0>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	0800608d 	.word	0x0800608d
 8006078:	08006095 	.word	0x08006095
 800607c:	0800609d 	.word	0x0800609d
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060d1 	.word	0x080060d1
 8006088:	080060d9 	.word	0x080060d9
 800608c:	2300      	movs	r3, #0
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e14a      	b.n	800632a <UART_SetConfig+0x5a6>
 8006094:	2304      	movs	r3, #4
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e146      	b.n	800632a <UART_SetConfig+0x5a6>
 800609c:	2308      	movs	r3, #8
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e142      	b.n	800632a <UART_SetConfig+0x5a6>
 80060a4:	2310      	movs	r3, #16
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e13e      	b.n	800632a <UART_SetConfig+0x5a6>
 80060ac:	cfff69f3 	.word	0xcfff69f3
 80060b0:	58000c00 	.word	0x58000c00
 80060b4:	11fff4ff 	.word	0x11fff4ff
 80060b8:	40011000 	.word	0x40011000
 80060bc:	58024400 	.word	0x58024400
 80060c0:	40004400 	.word	0x40004400
 80060c4:	40004800 	.word	0x40004800
 80060c8:	40004c00 	.word	0x40004c00
 80060cc:	40005000 	.word	0x40005000
 80060d0:	2320      	movs	r3, #32
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d6:	e128      	b.n	800632a <UART_SetConfig+0x5a6>
 80060d8:	2340      	movs	r3, #64	; 0x40
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060de:	e124      	b.n	800632a <UART_SetConfig+0x5a6>
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e6:	e120      	b.n	800632a <UART_SetConfig+0x5a6>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4acb      	ldr	r2, [pc, #812]	; (800641c <UART_SetConfig+0x698>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d176      	bne.n	80061e0 <UART_SetConfig+0x45c>
 80060f2:	4bcb      	ldr	r3, [pc, #812]	; (8006420 <UART_SetConfig+0x69c>)
 80060f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060fa:	2b28      	cmp	r3, #40	; 0x28
 80060fc:	d86c      	bhi.n	80061d8 <UART_SetConfig+0x454>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <UART_SetConfig+0x380>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	080061a9 	.word	0x080061a9
 8006108:	080061d9 	.word	0x080061d9
 800610c:	080061d9 	.word	0x080061d9
 8006110:	080061d9 	.word	0x080061d9
 8006114:	080061d9 	.word	0x080061d9
 8006118:	080061d9 	.word	0x080061d9
 800611c:	080061d9 	.word	0x080061d9
 8006120:	080061d9 	.word	0x080061d9
 8006124:	080061b1 	.word	0x080061b1
 8006128:	080061d9 	.word	0x080061d9
 800612c:	080061d9 	.word	0x080061d9
 8006130:	080061d9 	.word	0x080061d9
 8006134:	080061d9 	.word	0x080061d9
 8006138:	080061d9 	.word	0x080061d9
 800613c:	080061d9 	.word	0x080061d9
 8006140:	080061d9 	.word	0x080061d9
 8006144:	080061b9 	.word	0x080061b9
 8006148:	080061d9 	.word	0x080061d9
 800614c:	080061d9 	.word	0x080061d9
 8006150:	080061d9 	.word	0x080061d9
 8006154:	080061d9 	.word	0x080061d9
 8006158:	080061d9 	.word	0x080061d9
 800615c:	080061d9 	.word	0x080061d9
 8006160:	080061d9 	.word	0x080061d9
 8006164:	080061c1 	.word	0x080061c1
 8006168:	080061d9 	.word	0x080061d9
 800616c:	080061d9 	.word	0x080061d9
 8006170:	080061d9 	.word	0x080061d9
 8006174:	080061d9 	.word	0x080061d9
 8006178:	080061d9 	.word	0x080061d9
 800617c:	080061d9 	.word	0x080061d9
 8006180:	080061d9 	.word	0x080061d9
 8006184:	080061c9 	.word	0x080061c9
 8006188:	080061d9 	.word	0x080061d9
 800618c:	080061d9 	.word	0x080061d9
 8006190:	080061d9 	.word	0x080061d9
 8006194:	080061d9 	.word	0x080061d9
 8006198:	080061d9 	.word	0x080061d9
 800619c:	080061d9 	.word	0x080061d9
 80061a0:	080061d9 	.word	0x080061d9
 80061a4:	080061d1 	.word	0x080061d1
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ae:	e0bc      	b.n	800632a <UART_SetConfig+0x5a6>
 80061b0:	2304      	movs	r3, #4
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b6:	e0b8      	b.n	800632a <UART_SetConfig+0x5a6>
 80061b8:	2308      	movs	r3, #8
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061be:	e0b4      	b.n	800632a <UART_SetConfig+0x5a6>
 80061c0:	2310      	movs	r3, #16
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c6:	e0b0      	b.n	800632a <UART_SetConfig+0x5a6>
 80061c8:	2320      	movs	r3, #32
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ce:	e0ac      	b.n	800632a <UART_SetConfig+0x5a6>
 80061d0:	2340      	movs	r3, #64	; 0x40
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d6:	e0a8      	b.n	800632a <UART_SetConfig+0x5a6>
 80061d8:	2380      	movs	r3, #128	; 0x80
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061de:	e0a4      	b.n	800632a <UART_SetConfig+0x5a6>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a8f      	ldr	r2, [pc, #572]	; (8006424 <UART_SetConfig+0x6a0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d130      	bne.n	800624c <UART_SetConfig+0x4c8>
 80061ea:	4b8d      	ldr	r3, [pc, #564]	; (8006420 <UART_SetConfig+0x69c>)
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	d826      	bhi.n	8006244 <UART_SetConfig+0x4c0>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <UART_SetConfig+0x478>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006215 	.word	0x08006215
 8006200:	0800621d 	.word	0x0800621d
 8006204:	08006225 	.word	0x08006225
 8006208:	0800622d 	.word	0x0800622d
 800620c:	08006235 	.word	0x08006235
 8006210:	0800623d 	.word	0x0800623d
 8006214:	2300      	movs	r3, #0
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e086      	b.n	800632a <UART_SetConfig+0x5a6>
 800621c:	2304      	movs	r3, #4
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e082      	b.n	800632a <UART_SetConfig+0x5a6>
 8006224:	2308      	movs	r3, #8
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e07e      	b.n	800632a <UART_SetConfig+0x5a6>
 800622c:	2310      	movs	r3, #16
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006232:	e07a      	b.n	800632a <UART_SetConfig+0x5a6>
 8006234:	2320      	movs	r3, #32
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623a:	e076      	b.n	800632a <UART_SetConfig+0x5a6>
 800623c:	2340      	movs	r3, #64	; 0x40
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006242:	e072      	b.n	800632a <UART_SetConfig+0x5a6>
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624a:	e06e      	b.n	800632a <UART_SetConfig+0x5a6>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a75      	ldr	r2, [pc, #468]	; (8006428 <UART_SetConfig+0x6a4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d130      	bne.n	80062b8 <UART_SetConfig+0x534>
 8006256:	4b72      	ldr	r3, [pc, #456]	; (8006420 <UART_SetConfig+0x69c>)
 8006258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	2b05      	cmp	r3, #5
 8006260:	d826      	bhi.n	80062b0 <UART_SetConfig+0x52c>
 8006262:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <UART_SetConfig+0x4e4>)
 8006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006268:	08006281 	.word	0x08006281
 800626c:	08006289 	.word	0x08006289
 8006270:	08006291 	.word	0x08006291
 8006274:	08006299 	.word	0x08006299
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	2300      	movs	r3, #0
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e050      	b.n	800632a <UART_SetConfig+0x5a6>
 8006288:	2304      	movs	r3, #4
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e04c      	b.n	800632a <UART_SetConfig+0x5a6>
 8006290:	2308      	movs	r3, #8
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e048      	b.n	800632a <UART_SetConfig+0x5a6>
 8006298:	2310      	movs	r3, #16
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629e:	e044      	b.n	800632a <UART_SetConfig+0x5a6>
 80062a0:	2320      	movs	r3, #32
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a6:	e040      	b.n	800632a <UART_SetConfig+0x5a6>
 80062a8:	2340      	movs	r3, #64	; 0x40
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ae:	e03c      	b.n	800632a <UART_SetConfig+0x5a6>
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b6:	e038      	b.n	800632a <UART_SetConfig+0x5a6>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a5b      	ldr	r2, [pc, #364]	; (800642c <UART_SetConfig+0x6a8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d130      	bne.n	8006324 <UART_SetConfig+0x5a0>
 80062c2:	4b57      	ldr	r3, [pc, #348]	; (8006420 <UART_SetConfig+0x69c>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d826      	bhi.n	800631c <UART_SetConfig+0x598>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x550>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062ed 	.word	0x080062ed
 80062d8:	080062f5 	.word	0x080062f5
 80062dc:	080062fd 	.word	0x080062fd
 80062e0:	08006305 	.word	0x08006305
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	2302      	movs	r3, #2
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e01a      	b.n	800632a <UART_SetConfig+0x5a6>
 80062f4:	2304      	movs	r3, #4
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e016      	b.n	800632a <UART_SetConfig+0x5a6>
 80062fc:	2308      	movs	r3, #8
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e012      	b.n	800632a <UART_SetConfig+0x5a6>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630a:	e00e      	b.n	800632a <UART_SetConfig+0x5a6>
 800630c:	2320      	movs	r3, #32
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e00a      	b.n	800632a <UART_SetConfig+0x5a6>
 8006314:	2340      	movs	r3, #64	; 0x40
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e006      	b.n	800632a <UART_SetConfig+0x5a6>
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e002      	b.n	800632a <UART_SetConfig+0x5a6>
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a3f      	ldr	r2, [pc, #252]	; (800642c <UART_SetConfig+0x6a8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	f040 80f8 	bne.w	8006526 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006336:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800633a:	2b20      	cmp	r3, #32
 800633c:	dc46      	bgt.n	80063cc <UART_SetConfig+0x648>
 800633e:	2b02      	cmp	r3, #2
 8006340:	f2c0 8082 	blt.w	8006448 <UART_SetConfig+0x6c4>
 8006344:	3b02      	subs	r3, #2
 8006346:	2b1e      	cmp	r3, #30
 8006348:	d87e      	bhi.n	8006448 <UART_SetConfig+0x6c4>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0x5cc>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	080063d3 	.word	0x080063d3
 8006354:	08006449 	.word	0x08006449
 8006358:	080063db 	.word	0x080063db
 800635c:	08006449 	.word	0x08006449
 8006360:	08006449 	.word	0x08006449
 8006364:	08006449 	.word	0x08006449
 8006368:	080063eb 	.word	0x080063eb
 800636c:	08006449 	.word	0x08006449
 8006370:	08006449 	.word	0x08006449
 8006374:	08006449 	.word	0x08006449
 8006378:	08006449 	.word	0x08006449
 800637c:	08006449 	.word	0x08006449
 8006380:	08006449 	.word	0x08006449
 8006384:	08006449 	.word	0x08006449
 8006388:	080063fb 	.word	0x080063fb
 800638c:	08006449 	.word	0x08006449
 8006390:	08006449 	.word	0x08006449
 8006394:	08006449 	.word	0x08006449
 8006398:	08006449 	.word	0x08006449
 800639c:	08006449 	.word	0x08006449
 80063a0:	08006449 	.word	0x08006449
 80063a4:	08006449 	.word	0x08006449
 80063a8:	08006449 	.word	0x08006449
 80063ac:	08006449 	.word	0x08006449
 80063b0:	08006449 	.word	0x08006449
 80063b4:	08006449 	.word	0x08006449
 80063b8:	08006449 	.word	0x08006449
 80063bc:	08006449 	.word	0x08006449
 80063c0:	08006449 	.word	0x08006449
 80063c4:	08006449 	.word	0x08006449
 80063c8:	0800643b 	.word	0x0800643b
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d037      	beq.n	8006440 <UART_SetConfig+0x6bc>
 80063d0:	e03a      	b.n	8006448 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063d2:	f7fe f975 	bl	80046c0 <HAL_RCCEx_GetD3PCLK1Freq>
 80063d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063d8:	e03c      	b.n	8006454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe f984 	bl	80046ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063e8:	e034      	b.n	8006454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ea:	f107 0318 	add.w	r3, r7, #24
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fad0 	bl	8004994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f8:	e02c      	b.n	8006454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <UART_SetConfig+0x69c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b00      	cmp	r3, #0
 8006404:	d016      	beq.n	8006434 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <UART_SetConfig+0x69c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	08db      	lsrs	r3, r3, #3
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	4a07      	ldr	r2, [pc, #28]	; (8006430 <UART_SetConfig+0x6ac>)
 8006412:	fa22 f303 	lsr.w	r3, r2, r3
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006418:	e01c      	b.n	8006454 <UART_SetConfig+0x6d0>
 800641a:	bf00      	nop
 800641c:	40011400 	.word	0x40011400
 8006420:	58024400 	.word	0x58024400
 8006424:	40007800 	.word	0x40007800
 8006428:	40007c00 	.word	0x40007c00
 800642c:	58000c00 	.word	0x58000c00
 8006430:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006434:	4b9d      	ldr	r3, [pc, #628]	; (80066ac <UART_SetConfig+0x928>)
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006438:	e00c      	b.n	8006454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800643a:	4b9d      	ldr	r3, [pc, #628]	; (80066b0 <UART_SetConfig+0x92c>)
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800643e:	e009      	b.n	8006454 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006446:	e005      	b.n	8006454 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006452:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 81de 	beq.w	8006818 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	4a94      	ldr	r2, [pc, #592]	; (80066b4 <UART_SetConfig+0x930>)
 8006462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006466:	461a      	mov	r2, r3
 8006468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646a:	fbb3 f3f2 	udiv	r3, r3, r2
 800646e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4413      	add	r3, r2
 800647a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800647c:	429a      	cmp	r2, r3
 800647e:	d305      	bcc.n	800648c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006488:	429a      	cmp	r2, r3
 800648a:	d903      	bls.n	8006494 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006492:	e1c1      	b.n	8006818 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006496:	2200      	movs	r2, #0
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	60fa      	str	r2, [r7, #12]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	4a84      	ldr	r2, [pc, #528]	; (80066b4 <UART_SetConfig+0x930>)
 80064a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2200      	movs	r2, #0
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064b6:	f7f9 ff17 	bl	80002e8 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4610      	mov	r0, r2
 80064c0:	4619      	mov	r1, r3
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	020b      	lsls	r3, r1, #8
 80064cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064d0:	0202      	lsls	r2, r0, #8
 80064d2:	6979      	ldr	r1, [r7, #20]
 80064d4:	6849      	ldr	r1, [r1, #4]
 80064d6:	0849      	lsrs	r1, r1, #1
 80064d8:	2000      	movs	r0, #0
 80064da:	460c      	mov	r4, r1
 80064dc:	4605      	mov	r5, r0
 80064de:	eb12 0804 	adds.w	r8, r2, r4
 80064e2:	eb43 0905 	adc.w	r9, r3, r5
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	469a      	mov	sl, r3
 80064ee:	4693      	mov	fp, r2
 80064f0:	4652      	mov	r2, sl
 80064f2:	465b      	mov	r3, fp
 80064f4:	4640      	mov	r0, r8
 80064f6:	4649      	mov	r1, r9
 80064f8:	f7f9 fef6 	bl	80002e8 <__aeabi_uldivmod>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4613      	mov	r3, r2
 8006502:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800650a:	d308      	bcc.n	800651e <UART_SetConfig+0x79a>
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006512:	d204      	bcs.n	800651e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651a:	60da      	str	r2, [r3, #12]
 800651c:	e17c      	b.n	8006818 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006524:	e178      	b.n	8006818 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652e:	f040 80c5 	bne.w	80066bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006532:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006536:	2b20      	cmp	r3, #32
 8006538:	dc48      	bgt.n	80065cc <UART_SetConfig+0x848>
 800653a:	2b00      	cmp	r3, #0
 800653c:	db7b      	blt.n	8006636 <UART_SetConfig+0x8b2>
 800653e:	2b20      	cmp	r3, #32
 8006540:	d879      	bhi.n	8006636 <UART_SetConfig+0x8b2>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <UART_SetConfig+0x7c4>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	080065d3 	.word	0x080065d3
 800654c:	080065db 	.word	0x080065db
 8006550:	08006637 	.word	0x08006637
 8006554:	08006637 	.word	0x08006637
 8006558:	080065e3 	.word	0x080065e3
 800655c:	08006637 	.word	0x08006637
 8006560:	08006637 	.word	0x08006637
 8006564:	08006637 	.word	0x08006637
 8006568:	080065f3 	.word	0x080065f3
 800656c:	08006637 	.word	0x08006637
 8006570:	08006637 	.word	0x08006637
 8006574:	08006637 	.word	0x08006637
 8006578:	08006637 	.word	0x08006637
 800657c:	08006637 	.word	0x08006637
 8006580:	08006637 	.word	0x08006637
 8006584:	08006637 	.word	0x08006637
 8006588:	08006603 	.word	0x08006603
 800658c:	08006637 	.word	0x08006637
 8006590:	08006637 	.word	0x08006637
 8006594:	08006637 	.word	0x08006637
 8006598:	08006637 	.word	0x08006637
 800659c:	08006637 	.word	0x08006637
 80065a0:	08006637 	.word	0x08006637
 80065a4:	08006637 	.word	0x08006637
 80065a8:	08006637 	.word	0x08006637
 80065ac:	08006637 	.word	0x08006637
 80065b0:	08006637 	.word	0x08006637
 80065b4:	08006637 	.word	0x08006637
 80065b8:	08006637 	.word	0x08006637
 80065bc:	08006637 	.word	0x08006637
 80065c0:	08006637 	.word	0x08006637
 80065c4:	08006637 	.word	0x08006637
 80065c8:	08006629 	.word	0x08006629
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	d02e      	beq.n	800662e <UART_SetConfig+0x8aa>
 80065d0:	e031      	b.n	8006636 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d2:	f7fc fe3f 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80065d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065d8:	e033      	b.n	8006642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065da:	f7fc fe51 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 80065de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065e0:	e02f      	b.n	8006642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe f880 	bl	80046ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f0:	e027      	b.n	8006642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065f2:	f107 0318 	add.w	r3, r7, #24
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe f9cc 	bl	8004994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006600:	e01f      	b.n	8006642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006602:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <UART_SetConfig+0x934>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800660e:	4b2a      	ldr	r3, [pc, #168]	; (80066b8 <UART_SetConfig+0x934>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	08db      	lsrs	r3, r3, #3
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	4a24      	ldr	r2, [pc, #144]	; (80066ac <UART_SetConfig+0x928>)
 800661a:	fa22 f303 	lsr.w	r3, r2, r3
 800661e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006620:	e00f      	b.n	8006642 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006622:	4b22      	ldr	r3, [pc, #136]	; (80066ac <UART_SetConfig+0x928>)
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006626:	e00c      	b.n	8006642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006628:	4b21      	ldr	r3, [pc, #132]	; (80066b0 <UART_SetConfig+0x92c>)
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800662c:	e009      	b.n	8006642 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006634:	e005      	b.n	8006642 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80e7 	beq.w	8006818 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <UART_SetConfig+0x930>)
 8006650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006654:	461a      	mov	r2, r3
 8006656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006658:	fbb3 f3f2 	udiv	r3, r3, r2
 800665c:	005a      	lsls	r2, r3, #1
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	441a      	add	r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	fbb2 f3f3 	udiv	r3, r2, r3
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	2b0f      	cmp	r3, #15
 8006674:	d916      	bls.n	80066a4 <UART_SetConfig+0x920>
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667c:	d212      	bcs.n	80066a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	b29b      	uxth	r3, r3
 8006682:	f023 030f 	bic.w	r3, r3, #15
 8006686:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	b29b      	uxth	r3, r3
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	b29a      	uxth	r2, r3
 8006694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006696:	4313      	orrs	r3, r2
 8006698:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	e0b9      	b.n	8006818 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066aa:	e0b5      	b.n	8006818 <UART_SetConfig+0xa94>
 80066ac:	03d09000 	.word	0x03d09000
 80066b0:	003d0900 	.word	0x003d0900
 80066b4:	08007734 	.word	0x08007734
 80066b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	dc49      	bgt.n	8006758 <UART_SetConfig+0x9d4>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	db7c      	blt.n	80067c2 <UART_SetConfig+0xa3e>
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d87a      	bhi.n	80067c2 <UART_SetConfig+0xa3e>
 80066cc:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <UART_SetConfig+0x950>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	0800675f 	.word	0x0800675f
 80066d8:	08006767 	.word	0x08006767
 80066dc:	080067c3 	.word	0x080067c3
 80066e0:	080067c3 	.word	0x080067c3
 80066e4:	0800676f 	.word	0x0800676f
 80066e8:	080067c3 	.word	0x080067c3
 80066ec:	080067c3 	.word	0x080067c3
 80066f0:	080067c3 	.word	0x080067c3
 80066f4:	0800677f 	.word	0x0800677f
 80066f8:	080067c3 	.word	0x080067c3
 80066fc:	080067c3 	.word	0x080067c3
 8006700:	080067c3 	.word	0x080067c3
 8006704:	080067c3 	.word	0x080067c3
 8006708:	080067c3 	.word	0x080067c3
 800670c:	080067c3 	.word	0x080067c3
 8006710:	080067c3 	.word	0x080067c3
 8006714:	0800678f 	.word	0x0800678f
 8006718:	080067c3 	.word	0x080067c3
 800671c:	080067c3 	.word	0x080067c3
 8006720:	080067c3 	.word	0x080067c3
 8006724:	080067c3 	.word	0x080067c3
 8006728:	080067c3 	.word	0x080067c3
 800672c:	080067c3 	.word	0x080067c3
 8006730:	080067c3 	.word	0x080067c3
 8006734:	080067c3 	.word	0x080067c3
 8006738:	080067c3 	.word	0x080067c3
 800673c:	080067c3 	.word	0x080067c3
 8006740:	080067c3 	.word	0x080067c3
 8006744:	080067c3 	.word	0x080067c3
 8006748:	080067c3 	.word	0x080067c3
 800674c:	080067c3 	.word	0x080067c3
 8006750:	080067c3 	.word	0x080067c3
 8006754:	080067b5 	.word	0x080067b5
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	d02e      	beq.n	80067ba <UART_SetConfig+0xa36>
 800675c:	e031      	b.n	80067c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800675e:	f7fc fd79 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8006762:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006764:	e033      	b.n	80067ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006766:	f7fc fd8b 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 800676a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800676c:	e02f      	b.n	80067ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800676e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006772:	4618      	mov	r0, r3
 8006774:	f7fd ffba 	bl	80046ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677c:	e027      	b.n	80067ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800677e:	f107 0318 	add.w	r3, r7, #24
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe f906 	bl	8004994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800678c:	e01f      	b.n	80067ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800678e:	4b2d      	ldr	r3, [pc, #180]	; (8006844 <UART_SetConfig+0xac0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800679a:	4b2a      	ldr	r3, [pc, #168]	; (8006844 <UART_SetConfig+0xac0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	08db      	lsrs	r3, r3, #3
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	4a28      	ldr	r2, [pc, #160]	; (8006848 <UART_SetConfig+0xac4>)
 80067a6:	fa22 f303 	lsr.w	r3, r2, r3
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067ac:	e00f      	b.n	80067ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067ae:	4b26      	ldr	r3, [pc, #152]	; (8006848 <UART_SetConfig+0xac4>)
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b2:	e00c      	b.n	80067ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067b4:	4b25      	ldr	r3, [pc, #148]	; (800684c <UART_SetConfig+0xac8>)
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b8:	e009      	b.n	80067ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c0:	e005      	b.n	80067ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067cc:	bf00      	nop
    }

    if (pclk != 0U)
 80067ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d021      	beq.n	8006818 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	4a1d      	ldr	r2, [pc, #116]	; (8006850 <UART_SetConfig+0xacc>)
 80067da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067de:	461a      	mov	r2, r3
 80067e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	441a      	add	r2, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	2b0f      	cmp	r3, #15
 80067fc:	d909      	bls.n	8006812 <UART_SetConfig+0xa8e>
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	d205      	bcs.n	8006812 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	b29a      	uxth	r2, r3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60da      	str	r2, [r3, #12]
 8006810:	e002      	b.n	8006818 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2201      	movs	r2, #1
 800681c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2201      	movs	r2, #1
 8006824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2200      	movs	r2, #0
 800682c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2200      	movs	r2, #0
 8006832:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006834:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006838:	4618      	mov	r0, r3
 800683a:	3748      	adds	r7, #72	; 0x48
 800683c:	46bd      	mov	sp, r7
 800683e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006842:	bf00      	nop
 8006844:	58024400 	.word	0x58024400
 8006848:	03d09000 	.word	0x03d09000
 800684c:	003d0900 	.word	0x003d0900
 8006850:	08007734 	.word	0x08007734

08006854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00a      	beq.n	8006928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01a      	beq.n	800696a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006952:	d10a      	bne.n	800696a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	605a      	str	r2, [r3, #4]
  }
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b098      	sub	sp, #96	; 0x60
 800699c:	af02      	add	r7, sp, #8
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069a8:	f7fa ff58 	bl	800185c <HAL_GetTick>
 80069ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d12f      	bne.n	8006a1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c4:	2200      	movs	r2, #0
 80069c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f88e 	bl	8006aec <UART_WaitOnFlagUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d022      	beq.n	8006a1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ea:	653b      	str	r3, [r7, #80]	; 0x50
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f4:	647b      	str	r3, [r7, #68]	; 0x44
 80069f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e6      	bne.n	80069d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e063      	b.n	8006ae4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d149      	bne.n	8006abe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a32:	2200      	movs	r2, #0
 8006a34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f857 	bl	8006aec <UART_WaitOnFlagUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d03c      	beq.n	8006abe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	623b      	str	r3, [r7, #32]
   return(result);
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a62:	633b      	str	r3, [r7, #48]	; 0x30
 8006a64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e6      	bne.n	8006a44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f023 0301 	bic.w	r3, r3, #1
 8006a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a96:	61fa      	str	r2, [r7, #28]
 8006a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	69b9      	ldr	r1, [r7, #24]
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e5      	bne.n	8006a76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e012      	b.n	8006ae4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3758      	adds	r7, #88	; 0x58
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4613      	mov	r3, r2
 8006afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006afc:	e049      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b04:	d045      	beq.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b06:	f7fa fea9 	bl	800185c <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d302      	bcc.n	8006b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e048      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d031      	beq.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d110      	bne.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2208      	movs	r2, #8
 8006b42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f839 	bl	8006bbc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e029      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6c:	d111      	bne.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f81f 	bl	8006bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e00f      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	bf0c      	ite	eq
 8006ba2:	2301      	moveq	r3, #1
 8006ba4:	2300      	movne	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d0a6      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b095      	sub	sp, #84	; 0x54
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be2:	643b      	str	r3, [r7, #64]	; 0x40
 8006be4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e6      	bne.n	8006bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <UART_EndRxTransfer+0xc8>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e5      	bne.n	8006bf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d118      	bne.n	8006c64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f023 0310 	bic.w	r3, r3, #16
 8006c46:	647b      	str	r3, [r7, #68]	; 0x44
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6979      	ldr	r1, [r7, #20]
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c78:	bf00      	nop
 8006c7a:	3754      	adds	r7, #84	; 0x54
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	effffffe 	.word	0xeffffffe

08006c88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e027      	b.n	8006cee <HAL_UARTEx_DisableFifoMode+0x66>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2224      	movs	r2, #36	; 0x24
 8006caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0201 	bic.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ccc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e02d      	b.n	8006d6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2224      	movs	r2, #36	; 0x24
 8006d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0201 	bic.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f850 	bl	8006df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e02d      	b.n	8006dea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2224      	movs	r2, #36	; 0x24
 8006d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0201 	bic.w	r2, r2, #1
 8006db4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f812 	bl	8006df4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d108      	bne.n	8006e16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e14:	e031      	b.n	8006e7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e16:	2310      	movs	r3, #16
 8006e18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e1a:	2310      	movs	r3, #16
 8006e1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	0e5b      	lsrs	r3, r3, #25
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	0f5b      	lsrs	r3, r3, #29
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	7b3a      	ldrb	r2, [r7, #12]
 8006e42:	4911      	ldr	r1, [pc, #68]	; (8006e88 <UARTEx_SetNbDataToProcess+0x94>)
 8006e44:	5c8a      	ldrb	r2, [r1, r2]
 8006e46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e4a:	7b3a      	ldrb	r2, [r7, #12]
 8006e4c:	490f      	ldr	r1, [pc, #60]	; (8006e8c <UARTEx_SetNbDataToProcess+0x98>)
 8006e4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	7b7a      	ldrb	r2, [r7, #13]
 8006e60:	4909      	ldr	r1, [pc, #36]	; (8006e88 <UARTEx_SetNbDataToProcess+0x94>)
 8006e62:	5c8a      	ldrb	r2, [r1, r2]
 8006e64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e68:	7b7a      	ldrb	r2, [r7, #13]
 8006e6a:	4908      	ldr	r1, [pc, #32]	; (8006e8c <UARTEx_SetNbDataToProcess+0x98>)
 8006e6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e7a:	bf00      	nop
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	0800774c 	.word	0x0800774c
 8006e8c:	08007754 	.word	0x08007754

08006e90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e90:	b084      	sub	sp, #16
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	f107 001c 	add.w	r0, r7, #28
 8006e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d120      	bne.n	8006eea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	4b2a      	ldr	r3, [pc, #168]	; (8006f64 <USB_CoreInit+0xd4>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d105      	bne.n	8006ede <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 faac 	bl	800743c <USB_CoreReset>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]
 8006ee8:	e01a      	b.n	8006f20 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 faa0 	bl	800743c <USB_CoreReset>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
 8006f12:	e005      	b.n	8006f20 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d116      	bne.n	8006f54 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <USB_CoreInit+0xd8>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f043 0206 	orr.w	r2, r3, #6
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f043 0220 	orr.w	r2, r3, #32
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f60:	b004      	add	sp, #16
 8006f62:	4770      	bx	lr
 8006f64:	ffbdffbf 	.word	0xffbdffbf
 8006f68:	03ee0000 	.word	0x03ee0000

08006f6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f023 0201 	bic.w	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d115      	bne.n	8006fdc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f7fa fc59 	bl	8001874 <HAL_Delay>
      ms++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa29 	bl	8007420 <USB_GetMode>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d01e      	beq.n	8007012 <USB_SetCurrentMode+0x84>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b31      	cmp	r3, #49	; 0x31
 8006fd8:	d9f0      	bls.n	8006fbc <USB_SetCurrentMode+0x2e>
 8006fda:	e01a      	b.n	8007012 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d115      	bne.n	800700e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f7fa fc40 	bl	8001874 <HAL_Delay>
      ms++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa10 	bl	8007420 <USB_GetMode>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <USB_SetCurrentMode+0x84>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b31      	cmp	r3, #49	; 0x31
 800700a:	d9f0      	bls.n	8006fee <USB_SetCurrentMode+0x60>
 800700c:	e001      	b.n	8007012 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e005      	b.n	800701e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b32      	cmp	r3, #50	; 0x32
 8007016:	d101      	bne.n	800701c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007028:	b084      	sub	sp, #16
 800702a:	b580      	push	{r7, lr}
 800702c:	b086      	sub	sp, #24
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	e009      	b.n	800705c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	3340      	adds	r3, #64	; 0x40
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	2200      	movs	r2, #0
 8007054:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	3301      	adds	r3, #1
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b0e      	cmp	r3, #14
 8007060:	d9f2      	bls.n	8007048 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d11c      	bne.n	80070a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007076:	f043 0302 	orr.w	r3, r3, #2
 800707a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e005      	b.n	80070ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070b4:	461a      	mov	r2, r3
 80070b6:	2300      	movs	r3, #0
 80070b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c0:	4619      	mov	r1, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c8:	461a      	mov	r2, r3
 80070ca:	680b      	ldr	r3, [r1, #0]
 80070cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d10c      	bne.n	80070ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d104      	bne.n	80070e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070da:	2100      	movs	r1, #0
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f965 	bl	80073ac <USB_SetDevSpeed>
 80070e2:	e008      	b.n	80070f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070e4:	2101      	movs	r1, #1
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f960 	bl	80073ac <USB_SetDevSpeed>
 80070ec:	e003      	b.n	80070f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80070ee:	2103      	movs	r1, #3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f95b 	bl	80073ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070f6:	2110      	movs	r1, #16
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f8f3 	bl	80072e4 <USB_FlushTxFifo>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f91f 	bl	800734c <USB_FlushRxFifo>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711e:	461a      	mov	r2, r3
 8007120:	2300      	movs	r3, #0
 8007122:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712a:	461a      	mov	r2, r3
 800712c:	2300      	movs	r3, #0
 800712e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	461a      	mov	r2, r3
 8007138:	2300      	movs	r3, #0
 800713a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800713c:	2300      	movs	r3, #0
 800713e:	613b      	str	r3, [r7, #16]
 8007140:	e043      	b.n	80071ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007158:	d118      	bne.n	800718c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716c:	461a      	mov	r2, r3
 800716e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	e013      	b.n	800719e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007182:	461a      	mov	r2, r3
 8007184:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	e008      	b.n	800719e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	461a      	mov	r2, r3
 800719a:	2300      	movs	r3, #0
 800719c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071aa:	461a      	mov	r2, r3
 80071ac:	2300      	movs	r3, #0
 80071ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071bc:	461a      	mov	r2, r3
 80071be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	3301      	adds	r3, #1
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d3b7      	bcc.n	8007142 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071d2:	2300      	movs	r3, #0
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	e043      	b.n	8007260 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ee:	d118      	bne.n	8007222 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007202:	461a      	mov	r2, r3
 8007204:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	e013      	b.n	8007234 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007218:	461a      	mov	r2, r3
 800721a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	e008      	b.n	8007234 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	461a      	mov	r2, r3
 8007230:	2300      	movs	r3, #0
 8007232:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	461a      	mov	r2, r3
 8007242:	2300      	movs	r3, #0
 8007244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	461a      	mov	r2, r3
 8007254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007258:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	3301      	adds	r3, #1
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	429a      	cmp	r2, r3
 8007266:	d3b7      	bcc.n	80071d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800727a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007288:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f043 0210 	orr.w	r2, r3, #16
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699a      	ldr	r2, [r3, #24]
 80072a0:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <USB_DevInit+0x2b4>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	f043 0208 	orr.w	r2, r3, #8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d105      	bne.n	80072cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <USB_DevInit+0x2b8>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072d8:	b004      	add	sp, #16
 80072da:	4770      	bx	lr
 80072dc:	803c3800 	.word	0x803c3800
 80072e0:	40000004 	.word	0x40000004

080072e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4a13      	ldr	r2, [pc, #76]	; (8007348 <USB_FlushTxFifo+0x64>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d901      	bls.n	8007304 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e01b      	b.n	800733c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	daf2      	bge.n	80072f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	019b      	lsls	r3, r3, #6
 8007314:	f043 0220 	orr.w	r2, r3, #32
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3301      	adds	r3, #1
 8007320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4a08      	ldr	r2, [pc, #32]	; (8007348 <USB_FlushTxFifo+0x64>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d901      	bls.n	800732e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e006      	b.n	800733c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b20      	cmp	r3, #32
 8007338:	d0f0      	beq.n	800731c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	00030d40 	.word	0x00030d40

0800734c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3301      	adds	r3, #1
 800735c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4a11      	ldr	r2, [pc, #68]	; (80073a8 <USB_FlushRxFifo+0x5c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e018      	b.n	800739c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	daf2      	bge.n	8007358 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2210      	movs	r2, #16
 800737a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4a08      	ldr	r2, [pc, #32]	; (80073a8 <USB_FlushRxFifo+0x5c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d901      	bls.n	800738e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e006      	b.n	800739c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b10      	cmp	r3, #16
 8007398:	d0f0      	beq.n	800737c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	00030d40 	.word	0x00030d40

080073ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	68f9      	ldr	r1, [r7, #12]
 80073c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073cc:	4313      	orrs	r3, r2
 80073ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073f8:	f023 0303 	bic.w	r3, r3, #3
 80073fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800740c:	f043 0302 	orr.w	r3, r3, #2
 8007410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	f003 0301 	and.w	r3, r3, #1
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <USB_CoreReset+0x64>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d901      	bls.n	800745a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e01b      	b.n	8007492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	daf2      	bge.n	8007448 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f043 0201 	orr.w	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3301      	adds	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <USB_CoreReset+0x64>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d901      	bls.n	8007484 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e006      	b.n	8007492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b01      	cmp	r3, #1
 800748e:	d0f0      	beq.n	8007472 <USB_CoreReset+0x36>

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	00030d40 	.word	0x00030d40

080074a4 <__cxa_pure_virtual>:
 80074a4:	b508      	push	{r3, lr}
 80074a6:	f000 f80d 	bl	80074c4 <_ZSt9terminatev>

080074aa <_ZN10__cxxabiv111__terminateEPFvvE>:
 80074aa:	b508      	push	{r3, lr}
 80074ac:	4780      	blx	r0
 80074ae:	f000 f80e 	bl	80074ce <abort>
	...

080074b4 <_ZSt13get_terminatev>:
 80074b4:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <_ZSt13get_terminatev+0xc>)
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	f3bf 8f5b 	dmb	ish
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	24000010 	.word	0x24000010

080074c4 <_ZSt9terminatev>:
 80074c4:	b508      	push	{r3, lr}
 80074c6:	f7ff fff5 	bl	80074b4 <_ZSt13get_terminatev>
 80074ca:	f7ff ffee 	bl	80074aa <_ZN10__cxxabiv111__terminateEPFvvE>

080074ce <abort>:
 80074ce:	b508      	push	{r3, lr}
 80074d0:	2006      	movs	r0, #6
 80074d2:	f000 f86b 	bl	80075ac <raise>
 80074d6:	2001      	movs	r0, #1
 80074d8:	f7fa f8ef 	bl	80016ba <_exit>

080074dc <__errno>:
 80074dc:	4b01      	ldr	r3, [pc, #4]	; (80074e4 <__errno+0x8>)
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	24000014 	.word	0x24000014

080074e8 <__libc_init_array>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	4d0d      	ldr	r5, [pc, #52]	; (8007520 <__libc_init_array+0x38>)
 80074ec:	4c0d      	ldr	r4, [pc, #52]	; (8007524 <__libc_init_array+0x3c>)
 80074ee:	1b64      	subs	r4, r4, r5
 80074f0:	10a4      	asrs	r4, r4, #2
 80074f2:	2600      	movs	r6, #0
 80074f4:	42a6      	cmp	r6, r4
 80074f6:	d109      	bne.n	800750c <__libc_init_array+0x24>
 80074f8:	4d0b      	ldr	r5, [pc, #44]	; (8007528 <__libc_init_array+0x40>)
 80074fa:	4c0c      	ldr	r4, [pc, #48]	; (800752c <__libc_init_array+0x44>)
 80074fc:	f000 f872 	bl	80075e4 <_init>
 8007500:	1b64      	subs	r4, r4, r5
 8007502:	10a4      	asrs	r4, r4, #2
 8007504:	2600      	movs	r6, #0
 8007506:	42a6      	cmp	r6, r4
 8007508:	d105      	bne.n	8007516 <__libc_init_array+0x2e>
 800750a:	bd70      	pop	{r4, r5, r6, pc}
 800750c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007510:	4798      	blx	r3
 8007512:	3601      	adds	r6, #1
 8007514:	e7ee      	b.n	80074f4 <__libc_init_array+0xc>
 8007516:	f855 3b04 	ldr.w	r3, [r5], #4
 800751a:	4798      	blx	r3
 800751c:	3601      	adds	r6, #1
 800751e:	e7f2      	b.n	8007506 <__libc_init_array+0x1e>
 8007520:	08007764 	.word	0x08007764
 8007524:	08007764 	.word	0x08007764
 8007528:	08007764 	.word	0x08007764
 800752c:	0800776c 	.word	0x0800776c

08007530 <memcpy>:
 8007530:	440a      	add	r2, r1
 8007532:	4291      	cmp	r1, r2
 8007534:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007538:	d100      	bne.n	800753c <memcpy+0xc>
 800753a:	4770      	bx	lr
 800753c:	b510      	push	{r4, lr}
 800753e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007546:	4291      	cmp	r1, r2
 8007548:	d1f9      	bne.n	800753e <memcpy+0xe>
 800754a:	bd10      	pop	{r4, pc}

0800754c <memset>:
 800754c:	4402      	add	r2, r0
 800754e:	4603      	mov	r3, r0
 8007550:	4293      	cmp	r3, r2
 8007552:	d100      	bne.n	8007556 <memset+0xa>
 8007554:	4770      	bx	lr
 8007556:	f803 1b01 	strb.w	r1, [r3], #1
 800755a:	e7f9      	b.n	8007550 <memset+0x4>

0800755c <_raise_r>:
 800755c:	291f      	cmp	r1, #31
 800755e:	b538      	push	{r3, r4, r5, lr}
 8007560:	4604      	mov	r4, r0
 8007562:	460d      	mov	r5, r1
 8007564:	d904      	bls.n	8007570 <_raise_r+0x14>
 8007566:	2316      	movs	r3, #22
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007572:	b112      	cbz	r2, 800757a <_raise_r+0x1e>
 8007574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007578:	b94b      	cbnz	r3, 800758e <_raise_r+0x32>
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f830 	bl	80075e0 <_getpid_r>
 8007580:	462a      	mov	r2, r5
 8007582:	4601      	mov	r1, r0
 8007584:	4620      	mov	r0, r4
 8007586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800758a:	f000 b817 	b.w	80075bc <_kill_r>
 800758e:	2b01      	cmp	r3, #1
 8007590:	d00a      	beq.n	80075a8 <_raise_r+0x4c>
 8007592:	1c59      	adds	r1, r3, #1
 8007594:	d103      	bne.n	800759e <_raise_r+0x42>
 8007596:	2316      	movs	r3, #22
 8007598:	6003      	str	r3, [r0, #0]
 800759a:	2001      	movs	r0, #1
 800759c:	e7e7      	b.n	800756e <_raise_r+0x12>
 800759e:	2400      	movs	r4, #0
 80075a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075a4:	4628      	mov	r0, r5
 80075a6:	4798      	blx	r3
 80075a8:	2000      	movs	r0, #0
 80075aa:	e7e0      	b.n	800756e <_raise_r+0x12>

080075ac <raise>:
 80075ac:	4b02      	ldr	r3, [pc, #8]	; (80075b8 <raise+0xc>)
 80075ae:	4601      	mov	r1, r0
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	f7ff bfd3 	b.w	800755c <_raise_r>
 80075b6:	bf00      	nop
 80075b8:	24000014 	.word	0x24000014

080075bc <_kill_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4d07      	ldr	r5, [pc, #28]	; (80075dc <_kill_r+0x20>)
 80075c0:	2300      	movs	r3, #0
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	4611      	mov	r1, r2
 80075c8:	602b      	str	r3, [r5, #0]
 80075ca:	f7fa f866 	bl	800169a <_kill>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	d102      	bne.n	80075d8 <_kill_r+0x1c>
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	b103      	cbz	r3, 80075d8 <_kill_r+0x1c>
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	bd38      	pop	{r3, r4, r5, pc}
 80075da:	bf00      	nop
 80075dc:	240006e8 	.word	0x240006e8

080075e0 <_getpid_r>:
 80075e0:	f7fa b853 	b.w	800168a <_getpid>

080075e4 <_init>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr

080075f0 <_fini>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr
