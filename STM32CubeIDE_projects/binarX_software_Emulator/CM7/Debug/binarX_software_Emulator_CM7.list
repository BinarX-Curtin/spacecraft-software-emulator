
binarX_software_Emulator_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b4  080077b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077bc  080077bc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080077c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  24000078  08007840  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240006ec  08007840  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8d2  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ade  00000000  00000000  0003f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00043458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00044670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f471  00000000  00000000  00045750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f7a  00000000  00000000  00084bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187112  00000000  00000000  0009db3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00224c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e78  00000000  00000000  00224ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007630 	.word	0x08007630

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	08007630 	.word	0x08007630

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <SystemInit+0xfc>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <SystemInit+0xfc>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0xfc>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <SystemInit+0xfc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <SystemInit+0x100>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	2b06      	cmp	r3, #6
 8000616:	d807      	bhi.n	8000628 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <SystemInit+0x100>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x100>)
 8000622:	f043 0307 	orr.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemInit+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemInit+0x104>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x104>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemInit+0x104>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	492c      	ldr	r1, [pc, #176]	; (80006f0 <SystemInit+0x104>)
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemInit+0x108>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemInit+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemInit+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <SystemInit+0x100>)
 800065c:	f043 0307 	orr.w	r3, r3, #7
 8000660:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemInit+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemInit+0x104>)
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemInit+0x10c>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemInit+0x104>)
 800067c:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <SystemInit+0x110>)
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <SystemInit+0x104>)
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <SystemInit+0x114>)
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <SystemInit+0x104>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <SystemInit+0x114>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <SystemInit+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x104>)
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <SystemInit+0x114>)
 800069c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <SystemInit+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x104>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <SystemInit+0x104>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x118>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <SystemInit+0x118>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x11c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x120>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ce:	d202      	bcs.n	80006d6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0x124>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SystemInit+0x128>)
 80006d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006dc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	52002000 	.word	0x52002000
 80006f0:	58024400 	.word	0x58024400
 80006f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f8:	02020200 	.word	0x02020200
 80006fc:	01ff0000 	.word	0x01ff0000
 8000700:	01010280 	.word	0x01010280
 8000704:	580000c0 	.word	0x580000c0
 8000708:	5c001000 	.word	0x5c001000
 800070c:	ffff0000 	.word	0xffff0000
 8000710:	51008108 	.word	0x51008108
 8000714:	52004000 	.word	0x52004000

08000718 <_ZN15binarx_emulator14BinarXEmulator3RunEv>:

#include <string.h>

namespace binarx_emulator {

void BinarXEmulator::Run() {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  // Wait for button push
  if (!button_pressed_) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7c1b      	ldrb	r3, [r3, #16]
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d134      	bne.n	8000798 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x80>
    return;
  }
  BinarXEmulator::RunStartInfo();
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f91a 	bl	8000968 <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv>

  // Start the timeout timer by storing the now time
  uint32_t emulator_timeout =
      time_controller_.GetTicks() + kWaitForPayloadMaxTime;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68da      	ldr	r2, [r3, #12]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3304      	adds	r3, #4
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4610      	mov	r0, r2
 8000744:	4798      	blx	r3
 8000746:	4602      	mov	r2, r0
 8000748:	f64e 2360 	movw	r3, #60000	; 0xea60
 800074c:	4413      	add	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]

  // Wait for payload data transfer or until timeout
  while (emulator_timeout > time_controller_.GetTicks() &&
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68da      	ldr	r2, [r3, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3304      	adds	r3, #4
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4610      	mov	r0, r2
 8000760:	4798      	blx	r3
 8000762:	4602      	mov	r2, r0
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4293      	cmp	r3, r2
 8000768:	d905      	bls.n	8000776 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x5e>
         payload_status_ != PayloadDataStatus::kTrasferCompleted) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	695b      	ldr	r3, [r3, #20]
  while (emulator_timeout > time_controller_.GetTicks() &&
 800076e:	2b02      	cmp	r3, #2
 8000770:	d001      	beq.n	8000776 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x5e>
 8000772:	2301      	movs	r3, #1
 8000774:	e000      	b.n	8000778 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x60>
 8000776:	2300      	movs	r3, #0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x6c>
    PayloadCommunicationHandler();
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 f80f 	bl	80007a0 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv>
  while (emulator_timeout > time_controller_.GetTicks() &&
 8000782:	e7e5      	b.n	8000750 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x38>
  }

  // Reset the emulator states
  button_pressed_ = false;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	741a      	strb	r2, [r3, #16]
  payload_status_ = PayloadDataStatus::kWaitingForPayload;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]

  BinarXEmulator::RunEndInfo();
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f917 	bl	80009c4 <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv>
 8000796:	e000      	b.n	800079a <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x82>
    return;
 8000798:	bf00      	nop
}
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv>:

void BinarXEmulator::PayloadCommunicationHandler() {
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	f5ad 5d1d 	sub.w	sp, sp, #10048	; 0x2740
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80007ae:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80007b2:	6018      	str	r0, [r3, #0]
  // return if the payload is not ready
  if (payload_status_ != PayloadDataStatus::kPayloadReady) {
 80007b4:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80007b8:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	f040 8095 	bne.w	80008f0 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x150>
    return;
  }

  // Turn on the Green LED to inform that the payload ready interrupt was
  // received
  gpio_controller_.SetHigh(binarx_gpio_interface::GpioSelector::GreenLed);
 80007c6:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80007ca:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80007d6:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2102      	movs	r1, #2
 80007e4:	4610      	mov	r0, r2
 80007e6:	4798      	blx	r3

  // Trigger the Master Spi Receive message
  uint8_t receive_buffer[kMaxPayloadDataLength];
  binarx_serial_interface::SerialStatus serial_status =
      payload_communication_.Receive(receive_buffer, kMaxPayloadDataLength,
 80007e8:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80007ec:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80007f8:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681b      	ldr	r3, [r3, #0]
                                     kDefaultCommunicationDelay);
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3304      	adds	r3, #4
 8000804:	681c      	ldr	r4, [r3, #0]
      payload_communication_.Receive(receive_buffer, kMaxPayloadDataLength,
 8000806:	493d      	ldr	r1, [pc, #244]	; (80008fc <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x15c>)
 8000808:	f242 7370 	movw	r3, #10096	; 0x2770
 800080c:	440b      	add	r3, r1
 800080e:	19d9      	adds	r1, r3, r7
 8000810:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000814:	f242 7210 	movw	r2, #10000	; 0x2710
 8000818:	47a0      	blx	r4
 800081a:	4603      	mov	r3, r0
 800081c:	f242 726f 	movw	r2, #10095	; 0x276f
 8000820:	443a      	add	r2, r7
 8000822:	7013      	strb	r3, [r2, #0]

  // Check the status of the SPI transaction
  if (serial_status == binarx_serial_interface::SerialStatus::Success) {
 8000824:	f242 736f 	movw	r3, #10095	; 0x276f
 8000828:	443b      	add	r3, r7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d118      	bne.n	8000862 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0xc2>
    // Send the data over UART if SPI data was received succesfully
    computer_communication_.Transmit(receive_buffer, sizeof(receive_buffer),
 8000830:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8000834:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6858      	ldr	r0, [r3, #4]
 800083c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8000840:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
                                     kDefaultCommunicationDelay);
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681c      	ldr	r4, [r3, #0]
    computer_communication_.Transmit(receive_buffer, sizeof(receive_buffer),
 800084c:	492b      	ldr	r1, [pc, #172]	; (80008fc <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x15c>)
 800084e:	f242 7370 	movw	r3, #10096	; 0x2770
 8000852:	440b      	add	r3, r1
 8000854:	19d9      	adds	r1, r3, r7
 8000856:	f64e 2360 	movw	r3, #60000	; 0xea60
 800085a:	f242 7210 	movw	r2, #10000	; 0x2710
 800085e:	47a0      	blx	r4
 8000860:	e02c      	b.n	80008bc <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x11c>
  } else {
    // Otherwise send error message
    char error_msg[] =
 8000862:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8000866:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 800086a:	4a25      	ldr	r2, [pc, #148]	; (8000900 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x160>)
 800086c:	4618      	mov	r0, r3
 800086e:	4611      	mov	r1, r2
 8000870:	234f      	movs	r3, #79	; 0x4f
 8000872:	461a      	mov	r2, r3
 8000874:	f006 fe82 	bl	800757c <memcpy>
        "ERROR: Sorry the message was not received correctly by the Binar "
        "Emulator \r \n ";
    computer_communication_.Transmit((uint8_t *)error_msg, strlen(error_msg),
 8000878:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800087c:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	685d      	ldr	r5, [r3, #4]
 8000884:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8000888:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
                                     kDefaultCommunicationDelay);
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681c      	ldr	r4, [r3, #0]
    computer_communication_.Transmit((uint8_t *)error_msg, strlen(error_msg),
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x164>)
 8000896:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 800089a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800089e:	443b      	add	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fd19 	bl	80002d8 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4916      	ldr	r1, [pc, #88]	; (8000904 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x164>)
 80008ac:	f242 7370 	movw	r3, #10096	; 0x2770
 80008b0:	440b      	add	r3, r1
 80008b2:	19d9      	adds	r1, r3, r7
 80008b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80008b8:	4628      	mov	r0, r5
 80008ba:	47a0      	blx	r4
  }
  // Move to the next state as the communication has been completed
  payload_status_ = PayloadDataStatus::kTrasferCompleted;
 80008bc:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80008c0:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2202      	movs	r2, #2
 80008c8:	615a      	str	r2, [r3, #20]

  // Turn off Green LED
  gpio_controller_.SetLow(binarx_gpio_interface::GpioSelector::GreenLed);
 80008ca:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80008ce:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80008da:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3304      	adds	r3, #4
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2102      	movs	r1, #2
 80008ea:	4610      	mov	r0, r2
 80008ec:	4798      	blx	r3
 80008ee:	e000      	b.n	80008f2 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x152>
    return;
 80008f0:	bf00      	nop
}
 80008f2:	f507 571d 	add.w	r7, r7, #10048	; 0x2740
 80008f6:	3730      	adds	r7, #48	; 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bdb0      	pop	{r4, r5, r7, pc}
 80008fc:	ffffd8ec 	.word	0xffffd8ec
 8000900:	08007648 	.word	0x08007648
 8000904:	ffffd89c 	.word	0xffffd89c

08000908 <_ZN15binarx_emulator14BinarXEmulator4InitEv>:

void BinarXEmulator::Init() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  // turn on Yellow LED
  gpio_controller_.SetHigh(binarx_gpio_interface::GpioSelector::YellowLed);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2101      	movs	r1, #1
 800091e:	4610      	mov	r0, r2
 8000920:	4798      	blx	r3
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_ZN15binarx_emulator14BinarXEmulator29PayloadReadyInterruptCallbackEv>:

void BinarXEmulator::PayloadReadyInterruptCallback() {
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  if (payload_status_ == PayloadDataStatus::kWaitingForPayload) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <_ZN15binarx_emulator14BinarXEmulator29PayloadReadyInterruptCallbackEv+0x16>
    payload_status_ = PayloadDataStatus::kPayloadReady;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2201      	movs	r2, #1
 800093e:	615a      	str	r2, [r3, #20]
  }
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <_ZN15binarx_emulator14BinarXEmulator19ButtonPressCallbackEv>:
void BinarXEmulator::ButtonPressCallback() { button_pressed_ = true; }
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	741a      	strb	r2, [r3, #16]
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv>:

void BinarXEmulator::RunStartInfo() {
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b092      	sub	sp, #72	; 0x48
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  // turn on red LED
  gpio_controller_.SetHigh(binarx_gpio_interface::GpioSelector::RedLed);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2103      	movs	r1, #3
 800097e:	4610      	mov	r0, r2
 8000980:	4798      	blx	r3
  // Print a message to the Serial Monitor to inform the students
  uint8_t info_msg[] =
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv+0x58>)
 8000984:	f107 0408 	add.w	r4, r7, #8
 8000988:	461d      	mov	r5, r3
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000996:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800099a:	c407      	stmia	r4!, {r0, r1, r2}
 800099c:	8023      	strh	r3, [r4, #0]
      "\n \r INFO: Button pressed and waiting for SPI transmission \r \n";
  computer_communication_.Transmit(info_msg, sizeof(info_msg),
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6858      	ldr	r0, [r3, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
                                   kDefaultCommunicationDelay);
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681c      	ldr	r4, [r3, #0]
  computer_communication_.Transmit(info_msg, sizeof(info_msg),
 80009aa:	f107 0108 	add.w	r1, r7, #8
 80009ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80009b2:	223e      	movs	r2, #62	; 0x3e
 80009b4:	47a0      	blx	r4
}
 80009b6:	bf00      	nop
 80009b8:	3748      	adds	r7, #72	; 0x48
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bdb0      	pop	{r4, r5, r7, pc}
 80009be:	bf00      	nop
 80009c0:	08007698 	.word	0x08007698

080009c4 <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv>:

void BinarXEmulator::RunEndInfo() {
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b08c      	sub	sp, #48	; 0x30
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  // Print a message to the Serial Monitor to inform the students
  uint8_t info_msg[] = "\n \r INFO: Turning emulator off \r \n";
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv+0x58>)
 80009ce:	f107 040c 	add.w	r4, r7, #12
 80009d2:	461d      	mov	r5, r3
 80009d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	8022      	strh	r2, [r4, #0]
 80009e2:	3402      	adds	r4, #2
 80009e4:	0c1b      	lsrs	r3, r3, #16
 80009e6:	7023      	strb	r3, [r4, #0]
  computer_communication_.Transmit(info_msg, sizeof(info_msg),
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6858      	ldr	r0, [r3, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
                                   kDefaultCommunicationDelay);
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681c      	ldr	r4, [r3, #0]
  computer_communication_.Transmit(info_msg, sizeof(info_msg),
 80009f4:	f107 010c 	add.w	r1, r7, #12
 80009f8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80009fc:	2223      	movs	r2, #35	; 0x23
 80009fe:	47a0      	blx	r4

  // turn on red LED
  gpio_controller_.SetLow(binarx_gpio_interface::GpioSelector::RedLed);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2103      	movs	r1, #3
 8000a10:	4610      	mov	r0, r2
 8000a12:	4798      	blx	r3
}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a1c:	080076d8 	.word	0x080076d8

08000a20 <_ZN16binarx_gpio_impl8GpioImpl7SetHighEN21binarx_gpio_interface12GpioSelectorE>:
#include "gpio_interface.h"
#include "main.h"

namespace binarx_gpio_impl {

void GpioImpl::SetHigh(binarx_gpio_interface::GpioSelector gpio) {
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(GetPort(gpio), GetPin(gpio), GPIO_PIN_SET);
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f895 	bl	8000b60 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000a36:	4604      	mov	r4, r0
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f871 	bl	8000b24 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2201      	movs	r2, #1
 8000a46:	4619      	mov	r1, r3
 8000a48:	4620      	mov	r0, r4
 8000a4a:	f001 fa41 	bl	8001ed0 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd90      	pop	{r4, r7, pc}

08000a56 <_ZN16binarx_gpio_impl8GpioImpl6SetLowEN21binarx_gpio_interface12GpioSelectorE>:
void GpioImpl::SetLow(binarx_gpio_interface::GpioSelector gpio) {
 8000a56:	b590      	push	{r4, r7, lr}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(GetPort(gpio), GetPin(gpio), GPIO_PIN_RESET);
 8000a62:	78fb      	ldrb	r3, [r7, #3]
 8000a64:	4619      	mov	r1, r3
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f87a 	bl	8000b60 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	78fb      	ldrb	r3, [r7, #3]
 8000a70:	4619      	mov	r1, r3
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f856 	bl	8000b24 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4620      	mov	r0, r4
 8000a80:	f001 fa26 	bl	8001ed0 <HAL_GPIO_WritePin>
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd90      	pop	{r4, r7, pc}

08000a8c <_ZN16binarx_gpio_impl8GpioImpl9TogglePinEN21binarx_gpio_interface12GpioSelectorE>:
void GpioImpl::TogglePin(binarx_gpio_interface::GpioSelector gpio) {
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_TogglePin(GetPort(gpio), GetPin(gpio));
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f85f 	bl	8000b60 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 f83b 	bl	8000b24 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f001 fa25 	bl	8001f02 <HAL_GPIO_TogglePin>
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd90      	pop	{r4, r7, pc}

08000ac0 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm>:
binarx_gpio_interface::GpioStatus GpioImpl::WaitForInterrupt(
    binarx_gpio_interface::GpioSelector gpio, uint32_t timeout) {
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	72fb      	strb	r3, [r7, #11]
  for (uint32_t i = timeout; i > 0; i--) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d020      	beq.n	8000b1a <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x5a>
    if (HAL_GPIO_ReadPin(GetPort(gpio), GetPin(gpio)) == GPIO_PIN_SET) {
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	4619      	mov	r1, r3
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f000 f83f 	bl	8000b60 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	7afb      	ldrb	r3, [r7, #11]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f000 f81b 	bl	8000b24 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4619      	mov	r1, r3
 8000af2:	4620      	mov	r0, r4
 8000af4:	f001 f9d4 	bl	8001ea0 <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	bf0c      	ite	eq
 8000afe:	2301      	moveq	r3, #1
 8000b00:	2300      	movne	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x4c>
      return binarx_gpio_interface::GpioStatus::Success;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e007      	b.n	8000b1c <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x5c>
    }
    HAL_Delay(10);
 8000b0c:	200a      	movs	r0, #10
 8000b0e:	f000 fed7 	bl	80018c0 <HAL_Delay>
  for (uint32_t i = timeout; i > 0; i--) {
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e7db      	b.n	8000ad2 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x12>
  }
  return binarx_gpio_interface::GpioStatus::Timeout;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	371c      	adds	r7, #28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd90      	pop	{r4, r7, pc}

08000b24 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>:

uint16_t GpioImpl::GetPin(binarx_gpio_interface::GpioSelector gpio) {
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
  switch (gpio) {
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d00a      	beq.n	8000b4c <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x28>
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	dc0b      	bgt.n	8000b52 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d002      	beq.n	8000b44 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x20>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d002      	beq.n	8000b48 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x24>
 8000b42:	e006      	b.n	8000b52 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
    case binarx_gpio_interface::GpioSelector::YellowLed:
      return LD2_Pin;
 8000b44:	2302      	movs	r3, #2
 8000b46:	e004      	b.n	8000b52 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
    case binarx_gpio_interface::GpioSelector::GreenLed:
      return LD1_Pin;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e002      	b.n	8000b52 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
    case binarx_gpio_interface::GpioSelector::RedLed:
      return LD3_Pin;
 8000b4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b50:	e7ff      	b.n	8000b52 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
  }
};
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>:
GPIO_TypeDef* GpioImpl::GetPort(binarx_gpio_interface::GpioSelector gpio) {
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
  switch (gpio) {
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d00a      	beq.n	8000b88 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x28>
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	dc0a      	bgt.n	8000b8c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d002      	beq.n	8000b80 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x20>
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d002      	beq.n	8000b84 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x24>
 8000b7e:	e005      	b.n	8000b8c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
    case binarx_gpio_interface::GpioSelector::YellowLed:
      return LD2_GPIO_Port;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x38>)
 8000b82:	e003      	b.n	8000b8c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
    case binarx_gpio_interface::GpioSelector::GreenLed:
      return LD1_GPIO_Port;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x3c>)
 8000b86:	e001      	b.n	8000b8c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
    case binarx_gpio_interface::GpioSelector::RedLed:
      return LD3_GPIO_Port;
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x3c>)
 8000b8a:	e7ff      	b.n	8000b8c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
  }
};
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	58021000 	.word	0x58021000
 8000b9c:	58020400 	.word	0x58020400

08000ba0 <_ZN15binarx_emulator14BinarXEmulatorC1ERN23binarx_serial_interface28SerialCommunicationInterfaceES3_RN21binarx_gpio_interface13GpioInterfaceERN21binarx_time_interface13TimeInterfaceE>:
   *
   * @param spi_communication Pointer to the SPI implementation object
   * @param uart_communication Pointer to the UART implementation object
   * @param gpio_object Pointer to the GPIO implementation object
   */
  BinarXEmulator(binarx_serial_interface::SerialCommunicationInterface&
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	603b      	str	r3, [r7, #0]
      : payload_communication_(payload_communication),
        computer_communication_(computer_communication),
        gpio_controller_(gpio_object),
        time_controller_(time_object),
        button_pressed_(false),
        payload_status_(PayloadDataStatus::kWaitingForPayload){};
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	741a      	strb	r2, [r3, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_ZN21binarx_gpio_interface13GpioInterfaceC1Ev>:

/**
 * @brief The GPIO interface to allow for dependency injection and testing
 *
 */
class GpioInterface {
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <_ZN21binarx_gpio_interface13GpioInterfaceC1Ev+0x1c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	0800774c 	.word	0x0800774c

08000c00 <_ZN16binarx_gpio_impl8GpioImplC1Ev>:

namespace binarx_gpio_impl {

class GpioImpl : public binarx_gpio_interface::GpioInterface {
 public:
  GpioImpl(){};
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ffe8 	bl	8000be0 <_ZN21binarx_gpio_interface13GpioInterfaceC1Ev>
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <_ZN16binarx_gpio_impl8GpioImplC1Ev+0x20>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	08007714 	.word	0x08007714

08000c24 <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev>:
/**
 * @brief The Serial Comunication interface to allow for dependency injection
 * and testing
 *
 */
class SerialCommunicationInterface {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev+0x1c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	0800773c 	.word	0x0800773c

08000c44 <_ZN18binarx_serial_impl7SpiImplC1Ev>:

namespace binarx_serial_impl {

class SpiImpl : public binarx_serial_interface::SerialCommunicationInterface {
 public:
  SpiImpl(){};
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffe8 	bl	8000c24 <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev>
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <_ZN18binarx_serial_impl7SpiImplC1Ev+0x20>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	08007774 	.word	0x08007774

08000c68 <_ZN18binarx_serial_impl8UartImplC1Ev>:
                                                uint32_t timeout);
};

class UartImpl : public binarx_serial_interface::SerialCommunicationInterface {
 public:
  UartImpl(){};
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ffd6 	bl	8000c24 <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev>
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <_ZN18binarx_serial_impl8UartImplC1Ev+0x20>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	08007764 	.word	0x08007764

08000c8c <_ZN21binarx_time_interface13TimeInterfaceC1Ev>:
#pragma once
#include <stdint.h>

namespace binarx_time_interface {

class TimeInterface {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <_ZN21binarx_time_interface13TimeInterfaceC1Ev+0x1c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	0800772c 	.word	0x0800772c

08000cac <_ZN16binarx_time_impl8TimeImplC1Ev>:

namespace binarx_time_impl {

class TimeImpl : public binarx_time_interface::TimeInterface {
 public:
   TimeImpl(){};
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ffe8 	bl	8000c8c <_ZN21binarx_time_interface13TimeInterfaceC1Ev>
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <_ZN16binarx_time_impl8TimeImplC1Ev+0x20>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	08007784 	.word	0x08007784

08000cd0 <HAL_GPIO_EXTI_Callback>:
binarx_serial_impl::SpiImpl spi_controller = binarx_serial_impl::SpiImpl();
binarx_serial_impl::UartImpl uart_controller = binarx_serial_impl::UartImpl();
binarx_time_impl::TimeImpl time_controller = binarx_time_impl::TimeImpl();
binarx_emulator::BinarXEmulator emulator = binarx_emulator::BinarXEmulator(spi_controller, uart_controller, gpio_controller, time_controller);

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	2b10      	cmp	r3, #16
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_EXTI_Callback+0x1e>
 8000ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce4:	d107      	bne.n	8000cf6 <HAL_GPIO_EXTI_Callback+0x26>
    case B1_Pin:
      emulator.ButtonPressCallback();
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x30>)
 8000ce8:	f7ff fe30 	bl	800094c <_ZN15binarx_emulator14BinarXEmulator19ButtonPressCallbackEv>
      break;
 8000cec:	e004      	b.n	8000cf8 <HAL_GPIO_EXTI_Callback+0x28>
    case Payload_Pin:
      emulator.PayloadReadyInterruptCallback();
 8000cee:	4804      	ldr	r0, [pc, #16]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x30>)
 8000cf0:	f7ff fe1b 	bl	800092a <_ZN15binarx_emulator14BinarXEmulator29PayloadReadyInterruptCallbackEv>
      break;
 8000cf4:	e000      	b.n	8000cf8 <HAL_GPIO_EXTI_Callback+0x28>
    default:
      break;
 8000cf6:	bf00      	nop
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	240006cc 	.word	0x240006cc

08000d04 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  ///* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000d0a:	f000 fd47 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0e:	f000 f829 	bl	8000d64 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by
  means of HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <main+0x58>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d18:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <main+0x58>)
 8000d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <main+0x58>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f001 f91b 	bl	8001f6c <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0, 0);
 8000d36:	2100      	movs	r1, #0
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f001 f931 	bl	8001fa0 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f000 f991 	bl	8001064 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000d42:	f000 f8f9 	bl	8000f38 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000d46:	f000 f957 	bl	8000ff8 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_SPI1_Init();
 8000d4a:	f000 f899 	bl	8000e80 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  emulator.Init();
 8000d4e:	4804      	ldr	r0, [pc, #16]	; (8000d60 <main+0x5c>)
 8000d50:	f7ff fdda 	bl	8000908 <_ZN15binarx_emulator14BinarXEmulator4InitEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    emulator.Run();
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <main+0x5c>)
 8000d56:	f7ff fcdf 	bl	8000718 <_ZN15binarx_emulator14BinarXEmulator3RunEv>
 8000d5a:	e7fb      	b.n	8000d54 <main+0x50>
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	240006cc 	.word	0x240006cc

08000d64 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09c      	sub	sp, #112	; 0x70
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	224c      	movs	r2, #76	; 0x4c
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 fc10 	bl	8007598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f006 fc0a 	bl	8007598 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d84:	2004      	movs	r0, #4
 8000d86:	f001 fa67 	bl	8002258 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <_Z18SystemClock_Configv+0x114>)
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	4a39      	ldr	r2, [pc, #228]	; (8000e78 <_Z18SystemClock_Configv+0x114>)
 8000d94:	f023 0301 	bic.w	r3, r3, #1
 8000d98:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d9a:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <_Z18SystemClock_Configv+0x114>)
 8000d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <_Z18SystemClock_Configv+0x118>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dac:	4a33      	ldr	r2, [pc, #204]	; (8000e7c <_Z18SystemClock_Configv+0x118>)
 8000dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <_Z18SystemClock_Configv+0x118>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <_Z18SystemClock_Configv+0x118>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dcc:	bf14      	ite	ne
 8000dce:	2301      	movne	r3, #1
 8000dd0:	2300      	moveq	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d000      	beq.n	8000dda <_Z18SystemClock_Configv+0x76>
 8000dd8:	e7f2      	b.n	8000dc0 <_Z18SystemClock_Configv+0x5c>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 8000dda:	2303      	movs	r3, #3
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
      RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dde:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de8:	2340      	movs	r3, #64	; 0x40
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dec:	2302      	movs	r3, #2
 8000dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000df8:	2318      	movs	r3, #24
 8000dfa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e00:	2304      	movs	r3, #4
 8000e02:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fa87 	bl	800232c <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf14      	ite	ne
 8000e24:	2301      	movne	r3, #1
 8000e26:	2300      	moveq	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <_Z18SystemClock_Configv+0xce>
    Error_Handler();
 8000e2e:	f000 f9df 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000e32:	233f      	movs	r3, #63	; 0x3f
 8000e34:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2101      	movs	r1, #1
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fec2 	bl	8002be0 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <_Z18SystemClock_Configv+0x10c>
    Error_Handler();
 8000e6c:	f000 f9c0 	bl	80011f0 <Error_Handler>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3770      	adds	r7, #112	; 0x70
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58000400 	.word	0x58000400
 8000e7c:	58024800 	.word	0x58024800

08000e80 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e84:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e86:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <_ZL12MX_SPI1_Initv+0xb4>)
 8000e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e9a:	2207      	movs	r2, #7
 8000e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eb4:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000eb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ed4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern =
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
      SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.RxCRCInitializationPattern =
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	645a      	str	r2, [r3, #68]	; 0x44
      SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <_ZL12MX_SPI1_Initv+0xb0>)
 8000f12:	f004 f81d 	bl	8004f50 <HAL_SPI_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf14      	ite	ne
 8000f1c:	2301      	movne	r3, #1
 8000f1e:	2300      	moveq	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <_ZL12MX_SPI1_Initv+0xaa>
    Error_Handler();
 8000f26:	f000 f963 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	24000094 	.word	0x24000094
 8000f34:	40013000 	.word	0x40013000

08000f38 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f3e:	4a2d      	ldr	r2, [pc, #180]	; (8000ff4 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000f80:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f82:	f004 fd7e 	bl	8005a82 <HAL_UART_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bf14      	ite	ne
 8000f8c:	2301      	movne	r3, #1
 8000f8e:	2300      	moveq	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <_ZL19MX_USART3_UART_Initv+0x62>
    Error_Handler();
 8000f96:	f000 f92b 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) !=
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f9e:	f005 fed2 	bl	8006d46 <HAL_UARTEx_SetTxFifoThreshold>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	bf14      	ite	ne
 8000fa8:	2301      	movne	r3, #1
 8000faa:	2300      	moveq	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <_ZL19MX_USART3_UART_Initv+0x7e>
      HAL_OK) {
    Error_Handler();
 8000fb2:	f000 f91d 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) !=
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fba:	f005 ff02 	bl	8006dc2 <HAL_UARTEx_SetRxFifoThreshold>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf14      	ite	ne
 8000fc4:	2301      	movne	r3, #1
 8000fc6:	2300      	moveq	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <_ZL19MX_USART3_UART_Initv+0x9a>
      HAL_OK) {
    Error_Handler();
 8000fce:	f000 f90f 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fd4:	f005 fe7e 	bl	8006cd4 <HAL_UARTEx_DisableFifoMode>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	bf14      	ite	ne
 8000fde:	2301      	movne	r3, #1
 8000fe0:	2300      	moveq	r3, #0
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <_ZL19MX_USART3_UART_Initv+0xb4>
    Error_Handler();
 8000fe8:	f000 f902 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2400011c 	.word	0x2400011c
 8000ff4:	40004800 	.word	0x40004800

08000ff8 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001004:	2209      	movs	r2, #9
 8001006:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800100a:	2202      	movs	r2, #2
 800100c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001016:	2202      	movs	r2, #2
 8001018:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800102e:	2201      	movs	r2, #1
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001034:	2201      	movs	r2, #1
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001040:	f000 ffc2 	bl	8001fc8 <HAL_PCD_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	bf14      	ite	ne
 800104a:	2301      	movne	r3, #1
 800104c:	2300      	moveq	r3, #0
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
    Error_Handler();
 8001054:	f000 f8cc 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	240001b0 	.word	0x240001b0
 8001060:	40080000 	.word	0x40080000

08001064 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b58      	ldr	r3, [pc, #352]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001080:	4a56      	ldr	r2, [pc, #344]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108a:	4b54      	ldr	r3, [pc, #336]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001098:	4b50      	ldr	r3, [pc, #320]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a8:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b49      	ldr	r3, [pc, #292]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	4a47      	ldr	r2, [pc, #284]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b41      	ldr	r3, [pc, #260]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a40      	ldr	r2, [pc, #256]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f2:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a38      	ldr	r2, [pc, #224]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a31      	ldr	r2, [pc, #196]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <_ZL12MX_GPIO_Initv+0x178>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f244 0101 	movw	r1, #16385	; 0x4001
 8001134:	482a      	ldr	r0, [pc, #168]	; (80011e0 <_ZL12MX_GPIO_Initv+0x17c>)
 8001136:	f000 fecb 	bl	8001ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2102      	movs	r1, #2
 800113e:	4829      	ldr	r0, [pc, #164]	; (80011e4 <_ZL12MX_GPIO_Initv+0x180>)
 8001140:	f000 fec6 	bl	8001ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4823      	ldr	r0, [pc, #140]	; (80011e8 <_ZL12MX_GPIO_Initv+0x184>)
 800115c:	f000 fcf0 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Payload_Pin */
  GPIO_InitStruct.Pin = Payload_Pin;
 8001160:	2310      	movs	r3, #16
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001164:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Payload_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	481d      	ldr	r0, [pc, #116]	; (80011ec <_ZL12MX_GPIO_Initv+0x188>)
 8001176:	f000 fce3 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 800117a:	f244 0301 	movw	r3, #16385	; 0x4001
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4813      	ldr	r0, [pc, #76]	; (80011e0 <_ZL12MX_GPIO_Initv+0x17c>)
 8001194:	f000 fcd4 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001198:	2302      	movs	r3, #2
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <_ZL12MX_GPIO_Initv+0x180>)
 80011b0:	f000 fcc6 	bl	8001b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2105      	movs	r1, #5
 80011b8:	200a      	movs	r0, #10
 80011ba:	f000 fc8c 	bl	8001ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011be:	200a      	movs	r0, #10
 80011c0:	f000 fca3 	bl	8001b0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2105      	movs	r1, #5
 80011c8:	2028      	movs	r0, #40	; 0x28
 80011ca:	f000 fc84 	bl	8001ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ce:	2028      	movs	r0, #40	; 0x28
 80011d0:	f000 fc9b 	bl	8001b0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58020400 	.word	0x58020400
 80011e4:	58021000 	.word	0x58021000
 80011e8:	58020800 	.word	0x58020800
 80011ec:	58020000 	.word	0x58020000

080011f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d118      	bne.n	800123e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001212:	4293      	cmp	r3, r2
 8001214:	d113      	bne.n	800123e <_Z41__static_initialization_and_destruction_0ii+0x42>
binarx_gpio_impl::GpioImpl gpio_controller = binarx_gpio_impl::GpioImpl();
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001218:	f7ff fcf2 	bl	8000c00 <_ZN16binarx_gpio_impl8GpioImplC1Ev>
binarx_serial_impl::SpiImpl spi_controller = binarx_serial_impl::SpiImpl();
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800121e:	f7ff fd11 	bl	8000c44 <_ZN18binarx_serial_impl7SpiImplC1Ev>
binarx_serial_impl::UartImpl uart_controller = binarx_serial_impl::UartImpl();
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001224:	f7ff fd20 	bl	8000c68 <_ZN18binarx_serial_impl8UartImplC1Ev>
binarx_time_impl::TimeImpl time_controller = binarx_time_impl::TimeImpl();
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800122a:	f7ff fd3f 	bl	8000cac <_ZN16binarx_time_impl8TimeImplC1Ev>
binarx_emulator::BinarXEmulator emulator = binarx_emulator::BinarXEmulator(spi_controller, uart_controller, gpio_controller, time_controller);
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001236:	4905      	ldr	r1, [pc, #20]	; (800124c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800123a:	f7ff fcb1 	bl	8000ba0 <_ZN15binarx_emulator14BinarXEmulatorC1ERN23binarx_serial_interface28SerialCommunicationInterfaceES3_RN21binarx_gpio_interface13GpioInterfaceERN21binarx_time_interface13TimeInterfaceE>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	240006bc 	.word	0x240006bc
 800124c:	240006c0 	.word	0x240006c0
 8001250:	240006c4 	.word	0x240006c4
 8001254:	240006c8 	.word	0x240006c8
 8001258:	240006cc 	.word	0x240006cc

0800125c <_GLOBAL__sub_I_hspi1>:
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
 8001260:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff ffc9 	bl	80011fc <_Z41__static_initialization_and_destruction_0ii>
 800126a:	bd80      	pop	{r7, pc}

0800126c <_ZN18binarx_serial_impl7SpiImpl8TransmitEPhtm>:

namespace binarx_serial_impl {

binarx_serial_interface::SerialStatus SpiImpl::Transmit(uint8_t *buffer,
                                                        uint16_t size,
                                                        uint32_t timeout) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	4613      	mov	r3, r2
 800127a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_SPI_Transmit(&hspi1, buffer, size, timeout);
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <_ZN18binarx_serial_impl7SpiImpl8TransmitEPhtm+0x34>)
 8001284:	f003 ff88 	bl	8005198 <HAL_SPI_Transmit>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f85c 	bl	800134c <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 8001294:	4603      	mov	r3, r0
};
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	24000094 	.word	0x24000094

080012a4 <_ZN18binarx_serial_impl7SpiImpl7ReceiveEPhtm>:
binarx_serial_interface::SerialStatus SpiImpl::Receive(uint8_t *receive_buffer,
                                                       uint16_t size,
                                                       uint32_t timeout) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_SPI_Receive(&hspi1, receive_buffer, size, timeout);
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	4807      	ldr	r0, [pc, #28]	; (80012d8 <_ZN18binarx_serial_impl7SpiImpl7ReceiveEPhtm+0x34>)
 80012bc:	f004 f968 	bl	8005590 <HAL_SPI_Receive>
 80012c0:	4603      	mov	r3, r0
 80012c2:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f840 	bl	800134c <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 80012cc:	4603      	mov	r3, r0
};
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	24000094 	.word	0x24000094

080012dc <_ZN18binarx_serial_impl8UartImpl8TransmitEPhtm>:

binarx_serial_interface::SerialStatus UartImpl::Transmit(uint8_t *buffer,
                                                         uint16_t size,
                                                         uint32_t timeout) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	4613      	mov	r3, r2
 80012ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_UART_Transmit(&huart3, buffer, size, timeout);
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <_ZN18binarx_serial_impl8UartImpl8TransmitEPhtm+0x34>)
 80012f4:	f004 fc15 	bl	8005b22 <HAL_UART_Transmit>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f824 	bl	800134c <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 8001304:	4603      	mov	r3, r0
};
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2400011c 	.word	0x2400011c

08001314 <_ZN18binarx_serial_impl8UartImpl7ReceiveEPhtm>:
binarx_serial_interface::SerialStatus UartImpl::Receive(uint8_t *receive_buffer,
                                                        uint16_t size,
                                                        uint32_t timeout) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	4613      	mov	r3, r2
 8001322:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_UART_Receive(&huart3, receive_buffer, size, timeout);
 8001324:	88fa      	ldrh	r2, [r7, #6]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <_ZN18binarx_serial_impl8UartImpl7ReceiveEPhtm+0x34>)
 800132c:	f004 fc87 	bl	8005c3e <HAL_UART_Receive>
 8001330:	4603      	mov	r3, r0
 8001332:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f808 	bl	800134c <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 800133c:	4603      	mov	r3, r0
};
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2400011c 	.word	0x2400011c

0800134c <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>:

binarx_serial_interface::SerialStatus SerialErrorHandler(
    HAL_StatusTypeDef hal_status) {
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  switch (hal_status) {
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d813      	bhi.n	8001384 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x38>
 800135c:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x18>)
 800135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	08001375 	.word	0x08001375
 8001368:	08001379 	.word	0x08001379
 800136c:	0800137d 	.word	0x0800137d
 8001370:	08001381 	.word	0x08001381
    case HAL_OK:
      return binarx_serial_interface::SerialStatus::Success;
 8001374:	2300      	movs	r3, #0
 8001376:	e006      	b.n	8001386 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    case HAL_ERROR:
      return binarx_serial_interface::SerialStatus::Error;
 8001378:	2301      	movs	r3, #1
 800137a:	e004      	b.n	8001386 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    case HAL_BUSY:
      return binarx_serial_interface::SerialStatus::Busy;
 800137c:	2302      	movs	r3, #2
 800137e:	e002      	b.n	8001386 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    case HAL_TIMEOUT:
      return binarx_serial_interface::SerialStatus::Timeout;
 8001380:	2303      	movs	r3, #3
 8001382:	e000      	b.n	8001386 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    default:
      return binarx_serial_interface::SerialStatus::Error;
 8001384:	2301      	movs	r3, #1
  }
};
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_MspInit+0x30>)
 800139c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_MspInit+0x30>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_MspInit+0x30>)
 80013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	58024400 	.word	0x58024400

080013c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ba      	sub	sp, #232	; 0xe8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	22c0      	movs	r2, #192	; 0xc0
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f006 f8d5 	bl	8007598 <memset>
  if(hspi->Instance==SPI1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_SPI_MspInit+0xc4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d144      	bne.n	8001482 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80013f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001404:	2300      	movs	r3, #0
 8001406:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4618      	mov	r0, r3
 800140e:	f001 ff73 	bl	80032f8 <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001418:	f7ff feea 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_SPI_MspInit+0xc8>)
 800141e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_SPI_MspInit+0xc8>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001428:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_SPI_MspInit+0xc8>)
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_SPI_MspInit+0xc8>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a13      	ldr	r2, [pc, #76]	; (8001490 <HAL_SPI_MspInit+0xc8>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_SPI_MspInit+0xc8>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001458:	23e0      	movs	r3, #224	; 0xe0
 800145a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001470:	2305      	movs	r3, #5
 8001472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_SPI_MspInit+0xcc>)
 800147e:	f000 fb5f 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	37e8      	adds	r7, #232	; 0xe8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40013000 	.word	0x40013000
 8001490:	58024400 	.word	0x58024400
 8001494:	58020000 	.word	0x58020000

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ba      	sub	sp, #232	; 0xe8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	22c0      	movs	r2, #192	; 0xc0
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 f86d 	bl	8007598 <memset>
  if(huart->Instance==USART3)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a27      	ldr	r2, [pc, #156]	; (8001560 <HAL_UART_MspInit+0xc8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d146      	bne.n	8001556 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014c8:	f04f 0202 	mov.w	r2, #2
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 ff0a 	bl	80032f8 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014ea:	f7ff fe81 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_UART_MspInit+0xcc>)
 80014f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <HAL_UART_MspInit+0xcc>)
 80014f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_UART_MspInit+0xcc>)
 8001500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_UART_MspInit+0xcc>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_UART_MspInit+0xcc>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_UART_MspInit+0xcc>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800152a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001544:	2307      	movs	r3, #7
 8001546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_UART_MspInit+0xd0>)
 8001552:	f000 faf5 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	37e8      	adds	r7, #232	; 0xe8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40004800 	.word	0x40004800
 8001564:	58024400 	.word	0x58024400
 8001568:	58020c00 	.word	0x58020c00

0800156c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ba      	sub	sp, #232	; 0xe8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	22c0      	movs	r2, #192	; 0xc0
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f006 f803 	bl	8007598 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a30      	ldr	r2, [pc, #192]	; (8001658 <HAL_PCD_MspInit+0xec>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d159      	bne.n	8001650 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800159c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80015a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 fe9f 	bl	80032f8 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80015c0:	f7ff fe16 	bl	80011f0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80015c4:	f000 fea2 	bl	800230c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_PCD_MspInit+0xf0>)
 80015ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ce:	4a23      	ldr	r2, [pc, #140]	; (800165c <HAL_PCD_MspInit+0xf0>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_PCD_MspInit+0xf0>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015e6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80015ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001600:	230a      	movs	r3, #10
 8001602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800160a:	4619      	mov	r1, r3
 800160c:	4814      	ldr	r0, [pc, #80]	; (8001660 <HAL_PCD_MspInit+0xf4>)
 800160e:	f000 fa97 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <HAL_PCD_MspInit+0xf4>)
 800162e:	f000 fa87 	bl	8001b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_PCD_MspInit+0xf0>)
 8001634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001638:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_PCD_MspInit+0xf0>)
 800163a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800163e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_PCD_MspInit+0xf0>)
 8001644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	37e8      	adds	r7, #232	; 0xe8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40080000 	.word	0x40080000
 800165c:	58024400 	.word	0x58024400
 8001660:	58020000 	.word	0x58020000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b0:	f000 f8e6 	bl	8001880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Payload_Pin);
 80016bc:	2010      	movs	r0, #16
 80016be:	f000 fc3a 	bl	8001f36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ce:	f000 fc32 	bl	8001f36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  return 1;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_kill>:

int _kill(int pid, int sig)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f0:	f005 ff1a 	bl	8007528 <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2216      	movs	r2, #22
 80016f8:	601a      	str	r2, [r3, #0]
  return -1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_exit>:

void _exit (int status)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800170e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffe7 	bl	80016e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001718:	e7fe      	b.n	8001718 <_exit+0x12>

0800171a <_ZN16binarx_time_impl8TimeImpl5DelayEm>:
#include "time_interface.h"
#include "time_impl.h"

namespace binarx_time_impl {

void TimeImpl::Delay(uint32_t milliseconds) { HAL_Delay(milliseconds); };
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
 8001724:	6838      	ldr	r0, [r7, #0]
 8001726:	f000 f8cb 	bl	80018c0 <HAL_Delay>
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_ZN16binarx_time_impl8TimeImpl8GetTicksEv>:

uint32_t TimeImpl::GetTicks(){return HAL_GetTick();};
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	f000 f8b5 	bl	80018a8 <HAL_GetTick>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800174c:	f7fe ff4e 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	; (8001794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001776:	f005 fedd 	bl	8007534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fac3 	bl	8000d04 <main>
  bx  lr
 800177e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001784:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001788:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800178c:	080077c8 	.word	0x080077c8
  ldr r2, =_sbss
 8001790:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001794:	240006ec 	.word	0x240006ec

08001798 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC3_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a2:	2003      	movs	r0, #3
 80017a4:	f000 f98c 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017a8:	f001 fbd0 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_Init+0x68>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	4913      	ldr	r1, [pc, #76]	; (8001808 <HAL_Init+0x6c>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
 80017c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_Init+0x68>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_Init+0x6c>)
 80017d0:	5cd3      	ldrb	r3, [r2, r3]
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_Init+0x70>)
 80017de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_Init+0x74>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 f814 	bl	8001814 <HAL_InitTick>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e002      	b.n	80017fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017f6:	f7ff fdcd 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	58024400 	.word	0x58024400
 8001808:	080076fc 	.word	0x080076fc
 800180c:	24000004 	.word	0x24000004
 8001810:	24000000 	.word	0x24000000

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_InitTick+0x60>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e021      	b.n	800186c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_InitTick+0x64>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_InitTick+0x60>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f971 	bl	8001b26 <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e00e      	b.n	800186c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d80a      	bhi.n	800186a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185c:	f000 f93b 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001860:	4a06      	ldr	r2, [pc, #24]	; (800187c <HAL_InitTick+0x68>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e000      	b.n	800186c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2400000c 	.word	0x2400000c
 8001878:	24000000 	.word	0x24000000
 800187c:	24000008 	.word	0x24000008

08001880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x24>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_IncTick+0x24>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2400000c 	.word	0x2400000c
 80018a4:	240006e4 	.word	0x240006e4

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	240006e4 	.word	0x240006e4

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff ffee 	bl	80018a8 <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2400000c 	.word	0x2400000c

08001908 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetREVID+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0c1b      	lsrs	r3, r3, #16
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	5c001000 	.word	0x5c001000

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <__NVIC_SetPriorityGrouping+0x40>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	4313      	orrs	r3, r2
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x40>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00
 8001964:	05fa0000 	.word	0x05fa0000

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff40 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff90 	bl	8001a14 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5f 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff33 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa4 	bl	8001a7c <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <HAL_GPIO_Init+0x234>)
 8001b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b52:	e194      	b.n	8001e7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8186 	beq.w	8001e78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d005      	beq.n	8001b84 <HAL_GPIO_Init+0x44>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d130      	bne.n	8001be6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 0201 	and.w	r2, r3, #1
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d017      	beq.n	8001c22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	69b9      	ldr	r1, [r7, #24]
 8001c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80e0 	beq.w	8001e78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_GPIO_Init+0x238>)
 8001cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cbe:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <HAL_GPIO_Init+0x238>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_GPIO_Init+0x238>)
 8001cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <HAL_GPIO_Init+0x23c>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_GPIO_Init+0x240>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d052      	beq.n	8001da8 <HAL_GPIO_Init+0x268>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_GPIO_Init+0x244>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d031      	beq.n	8001d6e <HAL_GPIO_Init+0x22e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_GPIO_Init+0x248>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02b      	beq.n	8001d6a <HAL_GPIO_Init+0x22a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_GPIO_Init+0x24c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x226>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_GPIO_Init+0x250>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x222>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <HAL_GPIO_Init+0x254>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x21e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <HAL_GPIO_Init+0x258>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_GPIO_Init+0x25c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_GPIO_Init+0x260>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_GPIO_Init+0x264>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x20e>
 8001d4a:	2309      	movs	r3, #9
 8001d4c:	e02d      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d4e:	230a      	movs	r3, #10
 8001d50:	e02b      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d52:	2308      	movs	r3, #8
 8001d54:	e029      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e027      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e025      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e023      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e021      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e01f      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e01d      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e01b      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d72:	bf00      	nop
 8001d74:	58000080 	.word	0x58000080
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	58000400 	.word	0x58000400
 8001d80:	58020000 	.word	0x58020000
 8001d84:	58020400 	.word	0x58020400
 8001d88:	58020800 	.word	0x58020800
 8001d8c:	58020c00 	.word	0x58020c00
 8001d90:	58021000 	.word	0x58021000
 8001d94:	58021400 	.word	0x58021400
 8001d98:	58021800 	.word	0x58021800
 8001d9c:	58021c00 	.word	0x58021c00
 8001da0:	58022000 	.word	0x58022000
 8001da4:	58022400 	.word	0x58022400
 8001da8:	2300      	movs	r3, #0
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	f002 0203 	and.w	r2, r2, #3
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	4093      	lsls	r3, r2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dba:	4938      	ldr	r1, [pc, #224]	; (8001e9c <HAL_GPIO_Init+0x35c>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f47f ae63 	bne.w	8001b54 <HAL_GPIO_Init+0x14>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	3724      	adds	r7, #36	; 0x24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	58000400 	.word	0x58000400

08001ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e001      	b.n	8001ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001eec:	e003      	b.n	8001ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	619a      	str	r2, [r3, #24]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	041a      	lsls	r2, r3, #16
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	887b      	ldrh	r3, [r7, #2]
 8001f22:	400b      	ands	r3, r1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe feb7 	bl	8000cd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f74:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <HAL_HSEM_FastTake+0x2c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3320      	adds	r3, #32
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_HSEM_FastTake+0x30>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d101      	bne.n	8001f88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e000      	b.n	8001f8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	58026400 	.word	0x58026400
 8001f9c:	80000300 	.word	0x80000300

08001fa0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001faa:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <HAL_HSEM_Release+0x24>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	58026400 	.word	0x58026400

08001fc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fca:	b08f      	sub	sp, #60	; 0x3c
 8001fcc:	af0a      	add	r7, sp, #40	; 0x28
 8001fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e116      	b.n	8002208 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d106      	bne.n	8001ffa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff fab9 	bl	800156c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f004 ffcd 	bl	8006fb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	687e      	ldr	r6, [r7, #4]
 8002026:	466d      	mov	r5, sp
 8002028:	f106 0410 	add.w	r4, r6, #16
 800202c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002034:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002038:	e885 0003 	stmia.w	r5, {r0, r1}
 800203c:	1d33      	adds	r3, r6, #4
 800203e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002040:	6838      	ldr	r0, [r7, #0]
 8002042:	f004 ff4b 	bl	8006edc <USB_CoreInit>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d7      	b.n	8002208 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f004 ffbb 	bl	8006fda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	e04a      	b.n	8002100 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	333d      	adds	r3, #61	; 0x3d
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	333c      	adds	r3, #60	; 0x3c
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	b298      	uxth	r0, r3
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3356      	adds	r3, #86	; 0x56
 80020a6:	4602      	mov	r2, r0
 80020a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3340      	adds	r3, #64	; 0x40
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	3344      	adds	r3, #68	; 0x44
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3348      	adds	r3, #72	; 0x48
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	334c      	adds	r3, #76	; 0x4c
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	3301      	adds	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d3af      	bcc.n	800206a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e044      	b.n	800219a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	3301      	adds	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d3b5      	bcc.n	8002110 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	687e      	ldr	r6, [r7, #4]
 80021ac:	466d      	mov	r5, sp
 80021ae:	f106 0410 	add.w	r4, r6, #16
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021be:	e885 0003 	stmia.w	r5, {r0, r1}
 80021c2:	1d33      	adds	r3, r6, #4
 80021c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	f004 ff54 	bl	8007074 <USB_DevInit>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e014      	b.n	8002208 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d102      	bne.n	80021fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f80a 	bl	8002210 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f005 f912 	bl	800742a <USB_DevDisconnect>

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_PCDEx_ActivateLPM+0x44>)
 8002240:	4313      	orrs	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	10000003 	.word	0x10000003

08002258 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	2b06      	cmp	r3, #6
 800226a:	d00a      	beq.n	8002282 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800226c:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e040      	b.n	8002300 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e03e      	b.n	8002300 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800228a:	491f      	ldr	r1, [pc, #124]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4313      	orrs	r3, r2
 8002290:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002292:	f7ff fb09 	bl	80018a8 <HAL_GetTick>
 8002296:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002298:	e009      	b.n	80022ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800229a:	f7ff fb05 	bl	80018a8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a8:	d901      	bls.n	80022ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e028      	b.n	8002300 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ba:	d1ee      	bne.n	800229a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b1e      	cmp	r3, #30
 80022c0:	d008      	beq.n	80022d4 <HAL_PWREx_ConfigSupply+0x7c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b2e      	cmp	r3, #46	; 0x2e
 80022c6:	d005      	beq.n	80022d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b1d      	cmp	r3, #29
 80022cc:	d002      	beq.n	80022d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b2d      	cmp	r3, #45	; 0x2d
 80022d2:	d114      	bne.n	80022fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80022d4:	f7ff fae8 	bl	80018a8 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022da:	e009      	b.n	80022f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022dc:	f7ff fae4 	bl	80018a8 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ea:	d901      	bls.n	80022f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e007      	b.n	8002300 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_PWREx_ConfigSupply+0xb0>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d1ee      	bne.n	80022dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	58024800 	.word	0x58024800

0800230c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	58024800 	.word	0x58024800

0800232c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f000 bc48 	b.w	8002bd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8088 	beq.w	800245e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234e:	4b99      	ldr	r3, [pc, #612]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002358:	4b96      	ldr	r3, [pc, #600]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2b10      	cmp	r3, #16
 8002362:	d007      	beq.n	8002374 <HAL_RCC_OscConfig+0x48>
 8002364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002366:	2b18      	cmp	r3, #24
 8002368:	d111      	bne.n	800238e <HAL_RCC_OscConfig+0x62>
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d10c      	bne.n	800238e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4b8f      	ldr	r3, [pc, #572]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d06d      	beq.n	800245c <HAL_RCC_OscConfig+0x130>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d169      	bne.n	800245c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f000 bc21 	b.w	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x7a>
 8002398:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a85      	ldr	r2, [pc, #532]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e02e      	b.n	8002404 <HAL_RCC_OscConfig+0xd8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x9c>
 80023ae:	4b81      	ldr	r3, [pc, #516]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a80      	ldr	r2, [pc, #512]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b7e      	ldr	r3, [pc, #504]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7d      	ldr	r2, [pc, #500]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01d      	b.n	8002404 <HAL_RCC_OscConfig+0xd8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0xc0>
 80023d2:	4b78      	ldr	r3, [pc, #480]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a77      	ldr	r2, [pc, #476]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b75      	ldr	r3, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a74      	ldr	r2, [pc, #464]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0xd8>
 80023ec:	4b71      	ldr	r3, [pc, #452]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a70      	ldr	r2, [pc, #448]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b6e      	ldr	r3, [pc, #440]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6d      	ldr	r2, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7ff fa4c 	bl	80018a8 <HAL_GetTick>
 8002410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7ff fa48 	bl	80018a8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e3d4      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xe8>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff fa38 	bl	80018a8 <HAL_GetTick>
 8002438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243c:	f7ff fa34 	bl	80018a8 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e3c0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800244e:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x110>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80ca 	beq.w	8002600 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246c:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002476:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_RCC_OscConfig+0x166>
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	2b18      	cmp	r3, #24
 8002486:	d156      	bne.n	8002536 <HAL_RCC_OscConfig+0x20a>
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d151      	bne.n	8002536 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002492:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x17e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e392      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024aa:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0219 	bic.w	r2, r3, #25
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	493f      	ldr	r1, [pc, #252]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7ff f9f4 	bl	80018a8 <HAL_GetTick>
 80024c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c4:	f7ff f9f0 	bl	80018a8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e37c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	f7ff fa11 	bl	8001908 <HAL_GetREVID>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d817      	bhi.n	8002520 <HAL_RCC_OscConfig+0x1f4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d108      	bne.n	800250a <HAL_RCC_OscConfig+0x1de>
 80024f8:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002500:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002506:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	e07a      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	031b      	lsls	r3, r3, #12
 8002518:	4926      	ldr	r1, [pc, #152]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251e:	e06f      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4921      	ldr	r1, [pc, #132]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002534:	e064      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d047      	beq.n	80025ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0219 	bic.w	r2, r3, #25
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7ff f9aa 	bl	80018a8 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002558:	f7ff f9a6 	bl	80018a8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e332      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	f7ff f9c7 	bl	8001908 <HAL_GetREVID>
 800257a:	4603      	mov	r3, r0
 800257c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002580:	4293      	cmp	r3, r2
 8002582:	d819      	bhi.n	80025b8 <HAL_RCC_OscConfig+0x28c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d108      	bne.n	800259e <HAL_RCC_OscConfig+0x272>
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 8002596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259a:	6053      	str	r3, [r2, #4]
 800259c:	e030      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	031b      	lsls	r3, r3, #12
 80025ac:	4901      	ldr	r1, [pc, #4]	; (80025b4 <HAL_RCC_OscConfig+0x288>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
 80025b2:	e025      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
 80025b4:	58024400 	.word	0x58024400
 80025b8:	4b9a      	ldr	r3, [pc, #616]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	4997      	ldr	r1, [pc, #604]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	e018      	b.n	8002600 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b95      	ldr	r3, [pc, #596]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a94      	ldr	r2, [pc, #592]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7ff f965 	bl	80018a8 <HAL_GetTick>
 80025de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7ff f961 	bl	80018a8 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e2ed      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025f4:	4b8b      	ldr	r3, [pc, #556]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a9 	beq.w	8002760 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b85      	ldr	r3, [pc, #532]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002616:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002618:	4b82      	ldr	r3, [pc, #520]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0x308>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b18      	cmp	r3, #24
 8002628:	d13a      	bne.n	80026a0 <HAL_RCC_OscConfig+0x374>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d135      	bne.n	80026a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002634:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_OscConfig+0x320>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e2c1      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800264c:	f7ff f95c 	bl	8001908 <HAL_GetREVID>
 8002650:	4603      	mov	r3, r0
 8002652:	f241 0203 	movw	r2, #4099	; 0x1003
 8002656:	4293      	cmp	r3, r2
 8002658:	d817      	bhi.n	800268a <HAL_RCC_OscConfig+0x35e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	2b20      	cmp	r3, #32
 8002660:	d108      	bne.n	8002674 <HAL_RCC_OscConfig+0x348>
 8002662:	4b70      	ldr	r3, [pc, #448]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800266a:	4a6e      	ldr	r2, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002670:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002672:	e075      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002674:	4b6b      	ldr	r3, [pc, #428]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	069b      	lsls	r3, r3, #26
 8002682:	4968      	ldr	r1, [pc, #416]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002688:	e06a      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268a:	4b66      	ldr	r3, [pc, #408]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	061b      	lsls	r3, r3, #24
 8002698:	4962      	ldr	r1, [pc, #392]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800269e:	e05f      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d042      	beq.n	800272e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026a8:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5d      	ldr	r2, [pc, #372]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7ff f8f8 	bl	80018a8 <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026bc:	f7ff f8f4 	bl	80018a8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e280      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ce:	4b55      	ldr	r3, [pc, #340]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026da:	f7ff f915 	bl	8001908 <HAL_GetREVID>
 80026de:	4603      	mov	r3, r0
 80026e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d817      	bhi.n	8002718 <HAL_RCC_OscConfig+0x3ec>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d108      	bne.n	8002702 <HAL_RCC_OscConfig+0x3d6>
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026fe:	6053      	str	r3, [r2, #4]
 8002700:	e02e      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
 8002702:	4b48      	ldr	r3, [pc, #288]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	069b      	lsls	r3, r3, #26
 8002710:	4944      	ldr	r1, [pc, #272]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
 8002716:	e023      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
 8002718:	4b42      	ldr	r3, [pc, #264]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	493f      	ldr	r1, [pc, #252]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	4313      	orrs	r3, r2
 800272a:	60cb      	str	r3, [r1, #12]
 800272c:	e018      	b.n	8002760 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3c      	ldr	r2, [pc, #240]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff f8b5 	bl	80018a8 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002742:	f7ff f8b1 	bl	80018a8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e23d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002754:	4b33      	ldr	r3, [pc, #204]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d036      	beq.n	80027da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d019      	beq.n	80027a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002778:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7ff f892 	bl	80018a8 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7ff f88e 	bl	80018a8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e21a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x45c>
 80027a6:	e018      	b.n	80027da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a8:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ac:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7ff f878 	bl	80018a8 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027bc:	f7ff f874 	bl	80018a8 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e200      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d039      	beq.n	800285a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01c      	beq.n	8002828 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027fa:	f7ff f855 	bl	80018a8 <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002802:	f7ff f851 	bl	80018a8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1dd      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x4d6>
 8002820:	e01b      	b.n	800285a <HAL_RCC_OscConfig+0x52e>
 8002822:	bf00      	nop
 8002824:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002828:	4b9b      	ldr	r3, [pc, #620]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a9a      	ldr	r2, [pc, #616]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 800282e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002832:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002834:	f7ff f838 	bl	80018a8 <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800283c:	f7ff f834 	bl	80018a8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1c0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800284e:	4b92      	ldr	r3, [pc, #584]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8081 	beq.w	800296a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002868:	4b8c      	ldr	r3, [pc, #560]	; (8002a9c <HAL_RCC_OscConfig+0x770>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a8b      	ldr	r2, [pc, #556]	; (8002a9c <HAL_RCC_OscConfig+0x770>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002874:	f7ff f818 	bl	80018a8 <HAL_GetTick>
 8002878:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287c:	f7ff f814 	bl	80018a8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1a0      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800288e:	4b83      	ldr	r3, [pc, #524]	; (8002a9c <HAL_RCC_OscConfig+0x770>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x584>
 80028a2:	4b7d      	ldr	r3, [pc, #500]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	4a7c      	ldr	r2, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6713      	str	r3, [r2, #112]	; 0x70
 80028ae:	e02d      	b.n	800290c <HAL_RCC_OscConfig+0x5e0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x5a6>
 80028b8:	4b77      	ldr	r3, [pc, #476]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a76      	ldr	r2, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
 80028c4:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a73      	ldr	r2, [pc, #460]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	e01c      	b.n	800290c <HAL_RCC_OscConfig+0x5e0>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c8>
 80028da:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a6e      	ldr	r2, [pc, #440]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6713      	str	r3, [r2, #112]	; 0x70
 80028e6:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	4a6b      	ldr	r2, [pc, #428]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6713      	str	r3, [r2, #112]	; 0x70
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0x5e0>
 80028f4:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a67      	ldr	r2, [pc, #412]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a64      	ldr	r2, [pc, #400]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe ffc8 	bl	80018a8 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe ffc4 	bl	80018a8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e14e      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002932:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ee      	beq.n	800291c <HAL_RCC_OscConfig+0x5f0>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7fe ffb2 	bl	80018a8 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7fe ffae 	bl	80018a8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e138      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800295e:	4b4e      	ldr	r3, [pc, #312]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ee      	bne.n	8002948 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 812d 	beq.w	8002bce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002974:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800297c:	2b18      	cmp	r3, #24
 800297e:	f000 80bd 	beq.w	8002afc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	2b02      	cmp	r3, #2
 8002988:	f040 809e 	bne.w	8002ac8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe ff86 	bl	80018a8 <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe ff82 	bl	80018a8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e10e      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80029c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_OscConfig+0x774>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	430a      	orrs	r2, r1
 80029d2:	4931      	ldr	r1, [pc, #196]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	628b      	str	r3, [r1, #40]	; 0x28
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	3b01      	subs	r3, #1
 80029de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	3b01      	subs	r3, #1
 80029e8:	025b      	lsls	r3, r3, #9
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	3b01      	subs	r3, #1
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	3b01      	subs	r3, #1
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a08:	4923      	ldr	r1, [pc, #140]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCC_OscConfig+0x778>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a26:	00d2      	lsls	r2, r2, #3
 8002a28:	491b      	ldr	r1, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	f023 020c 	bic.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4917      	ldr	r1, [pc, #92]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	f023 0202 	bic.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	4912      	ldr	r1, [pc, #72]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe ff0b 	bl	80018a8 <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a94:	e011      	b.n	8002aba <HAL_RCC_OscConfig+0x78e>
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	58024800 	.word	0x58024800
 8002aa0:	fffffc0c 	.word	0xfffffc0c
 8002aa4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe fefe 	bl	80018a8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e08a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x77c>
 8002ac6:	e082      	b.n	8002bce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a42      	ldr	r2, [pc, #264]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fee8 	bl	80018a8 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fee4 	bl	80018a8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e070      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x7b0>
 8002afa:	e068      	b.n	8002bce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b02:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d031      	beq.n	8002b74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d12a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d122      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d11a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	0a5b      	lsrs	r3, r3, #9
 8002b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d111      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d108      	bne.n	8002b74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e02b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d01f      	beq.n	8002bce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b9a:	f7fe fe85 	bl	80018a8 <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ba0:	bf00      	nop
 8002ba2:	f7fe fe81 	bl	80018a8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d0f9      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_OscConfig+0x8b0>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bba:	00d2      	lsls	r2, r2, #3
 8002bbc:	4906      	ldr	r1, [pc, #24]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_RCC_OscConfig+0x8ac>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3730      	adds	r7, #48	; 0x30
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	ffff0007 	.word	0xffff0007

08002be0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e19c      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b8a      	ldr	r3, [pc, #552]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d910      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b87      	ldr	r3, [pc, #540]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 020f 	bic.w	r2, r3, #15
 8002c0a:	4985      	ldr	r1, [pc, #532]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b83      	ldr	r3, [pc, #524]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e184      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	4b7b      	ldr	r3, [pc, #492]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d908      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c40:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4975      	ldr	r1, [pc, #468]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	496a      	ldr	r1, [pc, #424]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	4b64      	ldr	r3, [pc, #400]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d908      	bls.n	8002cae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c9c:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	495e      	ldr	r1, [pc, #376]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d908      	bls.n	8002cdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cca:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4953      	ldr	r1, [pc, #332]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d908      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf8:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f023 020f 	bic.w	r2, r3, #15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4947      	ldr	r1, [pc, #284]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d055      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d16:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4940      	ldr	r1, [pc, #256]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d30:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d121      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0f6      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d115      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0ea      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d60:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0de      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0d6      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d80:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f023 0207 	bic.w	r2, r3, #7
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4925      	ldr	r1, [pc, #148]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d92:	f7fe fd89 	bl	80018a8 <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9a:	f7fe fd85 	bl	80018a8 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0be      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db0:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d1eb      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d208      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	490e      	ldr	r1, [pc, #56]	; (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d214      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 020f 	bic.w	r2, r3, #15
 8002e06:	4906      	ldr	r1, [pc, #24]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e086      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
 8002e20:	52002000 	.word	0x52002000
 8002e24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d208      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e44:	4b3c      	ldr	r3, [pc, #240]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	4939      	ldr	r1, [pc, #228]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d208      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	492e      	ldr	r1, [pc, #184]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d208      	bcs.n	8002eb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4922      	ldr	r1, [pc, #136]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d208      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4917      	ldr	r1, [pc, #92]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ee0:	f000 f834 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	4912      	ldr	r1, [pc, #72]	; (8002f3c <HAL_RCC_ClockConfig+0x35c>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <HAL_RCC_ClockConfig+0x35c>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x360>)
 8002f16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x364>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x368>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fc76 	bl	8001814 <HAL_InitTick>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	080076fc 	.word	0x080076fc
 8002f40:	24000004 	.word	0x24000004
 8002f44:	24000000 	.word	0x24000000
 8002f48:	24000008 	.word	0x24000008

08002f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f52:	4bb3      	ldr	r3, [pc, #716]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f5a:	2b18      	cmp	r3, #24
 8002f5c:	f200 8155 	bhi.w	800320a <HAL_RCC_GetSysClockFreq+0x2be>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002fcd 	.word	0x08002fcd
 8002f6c:	0800320b 	.word	0x0800320b
 8002f70:	0800320b 	.word	0x0800320b
 8002f74:	0800320b 	.word	0x0800320b
 8002f78:	0800320b 	.word	0x0800320b
 8002f7c:	0800320b 	.word	0x0800320b
 8002f80:	0800320b 	.word	0x0800320b
 8002f84:	0800320b 	.word	0x0800320b
 8002f88:	08002ff3 	.word	0x08002ff3
 8002f8c:	0800320b 	.word	0x0800320b
 8002f90:	0800320b 	.word	0x0800320b
 8002f94:	0800320b 	.word	0x0800320b
 8002f98:	0800320b 	.word	0x0800320b
 8002f9c:	0800320b 	.word	0x0800320b
 8002fa0:	0800320b 	.word	0x0800320b
 8002fa4:	0800320b 	.word	0x0800320b
 8002fa8:	08002ff9 	.word	0x08002ff9
 8002fac:	0800320b 	.word	0x0800320b
 8002fb0:	0800320b 	.word	0x0800320b
 8002fb4:	0800320b 	.word	0x0800320b
 8002fb8:	0800320b 	.word	0x0800320b
 8002fbc:	0800320b 	.word	0x0800320b
 8002fc0:	0800320b 	.word	0x0800320b
 8002fc4:	0800320b 	.word	0x0800320b
 8002fc8:	08002fff 	.word	0x08002fff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fcc:	4b94      	ldr	r3, [pc, #592]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fd8:	4b91      	ldr	r3, [pc, #580]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	4a90      	ldr	r2, [pc, #576]	; (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fea:	e111      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fec:	4b8d      	ldr	r3, [pc, #564]	; (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fee:	61bb      	str	r3, [r7, #24]
      break;
 8002ff0:	e10e      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ff2:	4b8d      	ldr	r3, [pc, #564]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ff4:	61bb      	str	r3, [r7, #24]
      break;
 8002ff6:	e10b      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ff8:	4b8c      	ldr	r3, [pc, #560]	; (800322c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ffa:	61bb      	str	r3, [r7, #24]
      break;
 8002ffc:	e108      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ffe:	4b88      	ldr	r3, [pc, #544]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003008:	4b85      	ldr	r3, [pc, #532]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003012:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003014:	4b82      	ldr	r3, [pc, #520]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800301e:	4b80      	ldr	r3, [pc, #512]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	08db      	lsrs	r3, r3, #3
 8003024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003036:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80e1 	beq.w	8003204 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b02      	cmp	r3, #2
 8003046:	f000 8083 	beq.w	8003150 <HAL_RCC_GetSysClockFreq+0x204>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b02      	cmp	r3, #2
 800304e:	f200 80a1 	bhi.w	8003194 <HAL_RCC_GetSysClockFreq+0x248>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x114>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d056      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x1c0>
 800305e:	e099      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003060:	4b6f      	ldr	r3, [pc, #444]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d02d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800306c:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	4a6b      	ldr	r2, [pc, #428]	; (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	ee07 3a90 	vmov	s15, r3
 8003084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003096:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030c6:	e087      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003234 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030da:	4b51      	ldr	r3, [pc, #324]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800310a:	e065      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2ec>
 800311a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311e:	4b40      	ldr	r3, [pc, #256]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003132:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800314e:	e043      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800323c <HAL_RCC_GetSysClockFreq+0x2f0>
 800315e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003162:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003172:	ed97 6a02 	vldr	s12, [r7, #8]
 8003176:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800317a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003192:	e021      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003238 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	0a5b      	lsrs	r3, r3, #9
 80031de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e2:	3301      	adds	r3, #1
 80031e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fc:	ee17 3a90 	vmov	r3, s15
 8003200:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003202:	e005      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
      break;
 8003208:	e002      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800320c:	61bb      	str	r3, [r7, #24]
      break;
 800320e:	bf00      	nop
  }

  return sysclockfreq;
 8003210:	69bb      	ldr	r3, [r7, #24]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	58024400 	.word	0x58024400
 8003224:	03d09000 	.word	0x03d09000
 8003228:	003d0900 	.word	0x003d0900
 800322c:	007a1200 	.word	0x007a1200
 8003230:	46000000 	.word	0x46000000
 8003234:	4c742400 	.word	0x4c742400
 8003238:	4a742400 	.word	0x4a742400
 800323c:	4af42400 	.word	0x4af42400

08003240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003246:	f7ff fe81 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_RCC_GetHCLKFreq+0x50>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490f      	ldr	r1, [pc, #60]	; (8003294 <HAL_RCC_GetHCLKFreq+0x54>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RCC_GetHCLKFreq+0x50>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_RCC_GetHCLKFreq+0x54>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_RCC_GetHCLKFreq+0x58>)
 800327c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <HAL_RCC_GetHCLKFreq+0x58>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400
 8003294:	080076fc 	.word	0x080076fc
 8003298:	24000004 	.word	0x24000004
 800329c:	24000000 	.word	0x24000000

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032a4:	f7ff ffcc 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4904      	ldr	r1, [pc, #16]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	58024400 	.word	0x58024400
 80032c8:	080076fc 	.word	0x080076fc

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032d0:	f7ff ffb6 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4904      	ldr	r1, [pc, #16]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	58024400 	.word	0x58024400
 80032f4:	080076fc 	.word	0x080076fc

080032f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b0ca      	sub	sp, #296	; 0x128
 80032fe:	af00      	add	r7, sp, #0
 8003300:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800330a:	2300      	movs	r3, #0
 800330c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800331c:	2500      	movs	r5, #0
 800331e:	ea54 0305 	orrs.w	r3, r4, r5
 8003322:	d049      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800332a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800332e:	d02f      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003334:	d828      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800333a:	d01a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800333c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003340:	d822      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334a:	d007      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800334c:	e01c      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800334e:	4bb8      	ldr	r3, [pc, #736]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	4ab7      	ldr	r2, [pc, #732]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003358:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800335a:	e01a      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003360:	3308      	adds	r3, #8
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fc8f 	bl	8004c88 <RCCEx_PLL2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003370:	e00f      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003376:	3328      	adds	r3, #40	; 0x28
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fd36 	bl	8004dec <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003386:	e004      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800339a:	4ba5      	ldr	r3, [pc, #660]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80033a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a8:	4aa1      	ldr	r2, [pc, #644]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033aa:	430b      	orrs	r3, r1
 80033ac:	6513      	str	r3, [r2, #80]	; 0x50
 80033ae:	e003      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80033c4:	f04f 0900 	mov.w	r9, #0
 80033c8:	ea58 0309 	orrs.w	r3, r8, r9
 80033cc:	d047      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d82a      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	080033f5 	.word	0x080033f5
 80033e4:	08003403 	.word	0x08003403
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003437 	.word	0x08003437
 80033f0:	08003437 	.word	0x08003437
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f4:	4b8e      	ldr	r3, [pc, #568]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4a8d      	ldr	r2, [pc, #564]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003400:	e01a      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003406:	3308      	adds	r3, #8
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fc3c 	bl	8004c88 <RCCEx_PLL2_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003416:	e00f      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341c:	3328      	adds	r3, #40	; 0x28
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f001 fce3 	bl	8004dec <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800342c:	e004      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003440:	4b7b      	ldr	r3, [pc, #492]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003444:	f023 0107 	bic.w	r1, r3, #7
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	4a78      	ldr	r2, [pc, #480]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003450:	430b      	orrs	r3, r1
 8003452:	6513      	str	r3, [r2, #80]	; 0x50
 8003454:	e003      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800345a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800346a:	f04f 0b00 	mov.w	fp, #0
 800346e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003472:	d04c      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347e:	d030      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003484:	d829      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003486:	2bc0      	cmp	r3, #192	; 0xc0
 8003488:	d02d      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800348a:	2bc0      	cmp	r3, #192	; 0xc0
 800348c:	d825      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d018      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d821      	bhi.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d007      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800349e:	e01c      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a0:	4b63      	ldr	r3, [pc, #396]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	4a62      	ldr	r2, [pc, #392]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034ac:	e01c      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b2:	3308      	adds	r3, #8
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 fbe6 	bl	8004c88 <RCCEx_PLL2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034c2:	e011      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c8:	3328      	adds	r3, #40	; 0x28
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 fc8d 	bl	8004dec <RCCEx_PLL3_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034d8:	e006      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034e0:	e002      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034f0:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	4a4c      	ldr	r2, [pc, #304]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003500:	430b      	orrs	r3, r1
 8003502:	6513      	str	r3, [r2, #80]	; 0x50
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800350a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800351a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800351e:	2300      	movs	r3, #0
 8003520:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003524:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003528:	460b      	mov	r3, r1
 800352a:	4313      	orrs	r3, r2
 800352c:	d053      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800353a:	d035      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800353c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003540:	d82e      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003542:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003546:	d031      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003548:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800354c:	d828      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d01a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003558:	d822      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800355e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003562:	d007      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003564:	e01c      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003566:	4b32      	ldr	r3, [pc, #200]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	4a31      	ldr	r2, [pc, #196]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800356c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003572:	e01c      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003578:	3308      	adds	r3, #8
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f001 fb83 	bl	8004c88 <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003588:	e011      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358e:	3328      	adds	r3, #40	; 0x28
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fc2a 	bl	8004dec <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800359e:	e006      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035a6:	e002      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035b6:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035c6:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6593      	str	r3, [r2, #88]	; 0x58
 80035cc:	e003      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035e6:	2300      	movs	r3, #0
 80035e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80035f0:	460b      	mov	r3, r1
 80035f2:	4313      	orrs	r3, r2
 80035f4:	d056      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003602:	d038      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003608:	d831      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800360a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800360e:	d034      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003610:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003614:	d82b      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361a:	d01d      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800361c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003620:	d825      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800362c:	e01f      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800362e:	bf00      	nop
 8003630:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4ba2      	ldr	r3, [pc, #648]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	4aa1      	ldr	r2, [pc, #644]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003640:	e01c      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003646:	3308      	adds	r3, #8
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f001 fb1c 	bl	8004c88 <RCCEx_PLL2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003656:	e011      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365c:	3328      	adds	r3, #40	; 0x28
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f001 fbc3 	bl	8004dec <RCCEx_PLL3_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003674:	e002      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800367a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10b      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003684:	4b8e      	ldr	r3, [pc, #568]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003690:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003694:	4a8a      	ldr	r2, [pc, #552]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003696:	430b      	orrs	r3, r1
 8003698:	6593      	str	r3, [r2, #88]	; 0x58
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80036b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80036ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d03a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	2b30      	cmp	r3, #48	; 0x30
 80036cc:	d01f      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036ce:	2b30      	cmp	r3, #48	; 0x30
 80036d0:	d819      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d00c      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d815      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d019      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d111      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e2:	4b77      	ldr	r3, [pc, #476]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	4a76      	ldr	r2, [pc, #472]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036ee:	e011      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f4:	3308      	adds	r3, #8
 80036f6:	2102      	movs	r1, #2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 fac5 	bl	8004c88 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003704:	e006      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800370c:	e002      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800371c:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800371e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003720:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	4a65      	ldr	r2, [pc, #404]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372c:	430b      	orrs	r3, r1
 800372e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003746:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800374a:	2300      	movs	r3, #0
 800374c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003750:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003754:	460b      	mov	r3, r1
 8003756:	4313      	orrs	r3, r2
 8003758:	d051      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003764:	d035      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376a:	d82e      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800376c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003770:	d031      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003776:	d828      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377c:	d01a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003782:	d822      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d007      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800378e:	e01c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4b4b      	ldr	r3, [pc, #300]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a4a      	ldr	r2, [pc, #296]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800379c:	e01c      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a2:	3308      	adds	r3, #8
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fa6e 	bl	8004c88 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037b2:	e011      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b8:	3328      	adds	r3, #40	; 0x28
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fb15 	bl	8004dec <RCCEx_PLL3_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037c8:	e006      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037d0:	e002      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037e0:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ee:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6513      	str	r3, [r2, #80]	; 0x50
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800380a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003814:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003818:	460b      	mov	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	d056      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003828:	d033      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800382a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800382e:	d82c      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003834:	d02f      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800383a:	d826      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800383c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003840:	d02b      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003842:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003846:	d820      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800384c:	d012      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800384e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003852:	d81a      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d022      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d115      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003862:	3308      	adds	r3, #8
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fa0e 	bl	8004c88 <RCCEx_PLL2_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003872:	e015      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003878:	3328      	adds	r3, #40	; 0x28
 800387a:	2101      	movs	r1, #1
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fab5 	bl	8004dec <RCCEx_PLL3_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003888:	e00a      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003890:	e006      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003892:	bf00      	nop
 8003894:	e004      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800389e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10d      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b6:	4a02      	ldr	r2, [pc, #8]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b8:	430b      	orrs	r3, r1
 80038ba:	6513      	str	r3, [r2, #80]	; 0x50
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038be:	bf00      	nop
 80038c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80038d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	d055      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f8:	d033      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038fe:	d82c      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d02f      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390a:	d826      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800390c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003910:	d02b      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003912:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003916:	d820      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800391c:	d012      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800391e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003922:	d81a      	bhi.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d022      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800392c:	d115      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003932:	3308      	adds	r3, #8
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f001 f9a6 	bl	8004c88 <RCCEx_PLL2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003942:	e015      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003948:	3328      	adds	r3, #40	; 0x28
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f001 fa4d 	bl	8004dec <RCCEx_PLL3_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003958:	e00a      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003960:	e006      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003962:	bf00      	nop
 8003964:	e004      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003966:	bf00      	nop
 8003968:	e002      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800396a:	bf00      	nop
 800396c:	e000      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800396e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003978:	4ba3      	ldr	r3, [pc, #652]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003988:	4a9f      	ldr	r2, [pc, #636]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398a:	430b      	orrs	r3, r1
 800398c:	6593      	str	r3, [r2, #88]	; 0x58
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003994:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80039a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80039ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039b2:	460b      	mov	r3, r1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	d037      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c2:	d00e      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c8:	d816      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d2:	d111      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4b8c      	ldr	r3, [pc, #560]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a8b      	ldr	r2, [pc, #556]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039e0:	e00f      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e6:	3308      	adds	r3, #8
 80039e8:	2101      	movs	r1, #1
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 f94c 	bl	8004c88 <RCCEx_PLL2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039f6:	e004      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a7b      	ldr	r2, [pc, #492]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d039      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d81c      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a95 	.word	0x08003a95
 8003a5c:	08003a69 	.word	0x08003a69
 8003a60:	08003a77 	.word	0x08003a77
 8003a64:	08003a95 	.word	0x08003a95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a68:	4b67      	ldr	r3, [pc, #412]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4a66      	ldr	r2, [pc, #408]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a74:	e00f      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f902 	bl	8004c88 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a9e:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	f023 0103 	bic.w	r1, r3, #3
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aac:	4a56      	ldr	r2, [pc, #344]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab2:	e003      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ab8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ad2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f000 809f 	beq.w	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ade:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aea:	f7fd fedd 	bl	80018a8 <HAL_GetTick>
 8003aee:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af2:	e00b      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fd fed8 	bl	80018a8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b64      	cmp	r3, #100	; 0x64
 8003b02:	d903      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0c:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ed      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d179      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b20:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b2c:	4053      	eors	r3, r2
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d015      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	4a30      	ldr	r2, [pc, #192]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b5a:	4a2b      	ldr	r2, [pc, #172]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6e:	d118      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fe9a 	bl	80018a8 <HAL_GetTick>
 8003b74:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b78:	e00d      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd fe95 	bl	80018a8 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b84:	1ad2      	subs	r2, r2, r3
 8003b86:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d903      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003b94:	e005      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0eb      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d129      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bba:	d10e      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bcc:	091a      	lsrs	r2, r3, #4
 8003bce:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	4a0d      	ldr	r2, [pc, #52]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6113      	str	r3, [r2, #16]
 8003bd8:	e005      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003be4:	6113      	str	r3, [r2, #16]
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf6:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	e00e      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003c06:	e009      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	58024800 	.word	0x58024800
 8003c10:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f002 0301 	and.w	r3, r2, #1
 8003c28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f000 8089 	beq.w	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c44:	2b28      	cmp	r3, #40	; 0x28
 8003c46:	d86b      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003d29 	.word	0x08003d29
 8003c54:	08003d21 	.word	0x08003d21
 8003c58:	08003d21 	.word	0x08003d21
 8003c5c:	08003d21 	.word	0x08003d21
 8003c60:	08003d21 	.word	0x08003d21
 8003c64:	08003d21 	.word	0x08003d21
 8003c68:	08003d21 	.word	0x08003d21
 8003c6c:	08003d21 	.word	0x08003d21
 8003c70:	08003cf5 	.word	0x08003cf5
 8003c74:	08003d21 	.word	0x08003d21
 8003c78:	08003d21 	.word	0x08003d21
 8003c7c:	08003d21 	.word	0x08003d21
 8003c80:	08003d21 	.word	0x08003d21
 8003c84:	08003d21 	.word	0x08003d21
 8003c88:	08003d21 	.word	0x08003d21
 8003c8c:	08003d21 	.word	0x08003d21
 8003c90:	08003d0b 	.word	0x08003d0b
 8003c94:	08003d21 	.word	0x08003d21
 8003c98:	08003d21 	.word	0x08003d21
 8003c9c:	08003d21 	.word	0x08003d21
 8003ca0:	08003d21 	.word	0x08003d21
 8003ca4:	08003d21 	.word	0x08003d21
 8003ca8:	08003d21 	.word	0x08003d21
 8003cac:	08003d21 	.word	0x08003d21
 8003cb0:	08003d29 	.word	0x08003d29
 8003cb4:	08003d21 	.word	0x08003d21
 8003cb8:	08003d21 	.word	0x08003d21
 8003cbc:	08003d21 	.word	0x08003d21
 8003cc0:	08003d21 	.word	0x08003d21
 8003cc4:	08003d21 	.word	0x08003d21
 8003cc8:	08003d21 	.word	0x08003d21
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d29 	.word	0x08003d29
 8003cd4:	08003d21 	.word	0x08003d21
 8003cd8:	08003d21 	.word	0x08003d21
 8003cdc:	08003d21 	.word	0x08003d21
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d21 	.word	0x08003d21
 8003ce8:	08003d21 	.word	0x08003d21
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d29 	.word	0x08003d29
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 ffc3 	bl	8004c88 <RCCEx_PLL2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d08:	e00f      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0e:	3328      	adds	r3, #40	; 0x28
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 f86a 	bl	8004dec <RCCEx_PLL3_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d1e:	e004      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d32:	4bbf      	ldr	r3, [pc, #764]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d40:	4abb      	ldr	r2, [pc, #748]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6553      	str	r3, [r2, #84]	; 0x54
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f002 0302 	and.w	r3, r2, #2
 8003d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	d041      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d824      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003dcd 	.word	0x08003dcd
 8003d84:	08003d99 	.word	0x08003d99
 8003d88:	08003daf 	.word	0x08003daf
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dcd 	.word	0x08003dcd
 8003d94:	08003dcd 	.word	0x08003dcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 ff71 	bl	8004c88 <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dac:	e00f      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db2:	3328      	adds	r3, #40	; 0x28
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f818 	bl	8004dec <RCCEx_PLL3_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dc2:	e004      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dd6:	4b96      	ldr	r3, [pc, #600]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f023 0107 	bic.w	r1, r3, #7
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de4:	4a92      	ldr	r2, [pc, #584]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6553      	str	r3, [r2, #84]	; 0x54
 8003dea:	e003      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 0304 	and.w	r3, r2, #4
 8003e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e0a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d044      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d825      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e75 	.word	0x08003e75
 8003e2c:	08003e41 	.word	0x08003e41
 8003e30:	08003e57 	.word	0x08003e57
 8003e34:	08003e75 	.word	0x08003e75
 8003e38:	08003e75 	.word	0x08003e75
 8003e3c:	08003e75 	.word	0x08003e75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e44:	3308      	adds	r3, #8
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ff1d 	bl	8004c88 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e54:	e00f      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5a:	3328      	adds	r3, #40	; 0x28
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 ffc4 	bl	8004dec <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e7e:	4b6c      	ldr	r3, [pc, #432]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f023 0107 	bic.w	r1, r3, #7
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	4a68      	ldr	r2, [pc, #416]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58
 8003e94:	e003      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	f002 0320 	and.w	r3, r2, #32
 8003eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	d055      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eca:	d033      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed0:	d82c      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d02f      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d826      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ee2:	d02b      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ee8:	d820      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eee:	d012      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef4:	d81a      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d022      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efe:	d115      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f04:	3308      	adds	r3, #8
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 febd 	bl	8004c88 <RCCEx_PLL2_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f14:	e015      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1a:	3328      	adds	r3, #40	; 0x28
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 ff64 	bl	8004dec <RCCEx_PLL3_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f32:	e006      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f34:	bf00      	nop
 8003f36:	e004      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f38:	bf00      	nop
 8003f3a:	e002      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f3c:	bf00      	nop
 8003f3e:	e000      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10b      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f4a:	4b39      	ldr	r3, [pc, #228]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a35      	ldr	r2, [pc, #212]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6553      	str	r3, [r2, #84]	; 0x54
 8003f60:	e003      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	d058      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f96:	d033      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f9c:	d82c      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d02f      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa8:	d826      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fae:	d02b      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fb4:	d820      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d012      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc0:	d81a      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d022      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d115      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fe57 	bl	8004c88 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e015      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	3328      	adds	r3, #40	; 0x28
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fefe 	bl	8004dec <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e00a      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ffe:	e006      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004000:	bf00      	nop
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004004:	bf00      	nop
 8004006:	e002      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004008:	bf00      	nop
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800400c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10e      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004026:	4a02      	ldr	r2, [pc, #8]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004028:	430b      	orrs	r3, r1
 800402a:	6593      	str	r3, [r2, #88]	; 0x58
 800402c:	e006      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004052:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004056:	460b      	mov	r3, r1
 8004058:	4313      	orrs	r3, r2
 800405a:	d055      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004060:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004064:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004068:	d033      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800406a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800406e:	d82c      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004074:	d02f      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d826      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800407c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004080:	d02b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004082:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004086:	d820      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408c:	d012      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800408e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004092:	d81a      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d022      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409c:	d115      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a2:	3308      	adds	r3, #8
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fdee 	bl	8004c88 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040b2:	e015      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b8:	3328      	adds	r3, #40	; 0x28
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fe95 	bl	8004dec <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040c8:	e00a      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040d0:	e006      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040d2:	bf00      	nop
 80040d4:	e004      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040d6:	bf00      	nop
 80040d8:	e002      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040e8:	4ba1      	ldr	r3, [pc, #644]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040f8:	4a9d      	ldr	r2, [pc, #628]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6593      	str	r3, [r2, #88]	; 0x58
 80040fe:	e003      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f002 0308 	and.w	r3, r2, #8
 8004114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800411e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d01e      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004134:	d10c      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413a:	3328      	adds	r3, #40	; 0x28
 800413c:	2102      	movs	r1, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fe54 	bl	8004dec <RCCEx_PLL3_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004150:	4b87      	ldr	r3, [pc, #540]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	4a83      	ldr	r2, [pc, #524]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004162:	430b      	orrs	r3, r1
 8004164:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f002 0310 	and.w	r3, r2, #16
 8004172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800417c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d01e      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d10c      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004198:	3328      	adds	r3, #40	; 0x28
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fe25 	bl	8004dec <RCCEx_PLL3_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ae:	4b70      	ldr	r3, [pc, #448]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041be:	4a6c      	ldr	r2, [pc, #432]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041de:	460b      	mov	r3, r1
 80041e0:	4313      	orrs	r3, r2
 80041e2:	d03e      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f0:	d022      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f6:	d81b      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004200:	d00b      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004202:	e015      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	3308      	adds	r3, #8
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fd3b 	bl	8004c88 <RCCEx_PLL2_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004218:	e00f      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421e:	3328      	adds	r3, #40	; 0x28
 8004220:	2102      	movs	r1, #2
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fde2 	bl	8004dec <RCCEx_PLL3_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800422e:	e004      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004242:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004252:	4a47      	ldr	r2, [pc, #284]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004254:	430b      	orrs	r3, r1
 8004256:	6593      	str	r3, [r2, #88]	; 0x58
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800425e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800426e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004270:	2300      	movs	r3, #0
 8004272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004274:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004278:	460b      	mov	r3, r1
 800427a:	4313      	orrs	r3, r2
 800427c:	d03b      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800428a:	d01f      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800428c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004290:	d818      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004296:	d003      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800429c:	d007      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800429e:	e011      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a0:	4b33      	ldr	r3, [pc, #204]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4a32      	ldr	r2, [pc, #200]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042ac:	e00f      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b2:	3328      	adds	r3, #40	; 0x28
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fd98 	bl	8004dec <RCCEx_PLL3_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042c2:	e004      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10b      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d6:	4b26      	ldr	r3, [pc, #152]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	4a22      	ldr	r2, [pc, #136]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6553      	str	r3, [r2, #84]	; 0x54
 80042ec:	e003      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004302:	673b      	str	r3, [r7, #112]	; 0x70
 8004304:	2300      	movs	r3, #0
 8004306:	677b      	str	r3, [r7, #116]	; 0x74
 8004308:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800430c:	460b      	mov	r3, r1
 800430e:	4313      	orrs	r3, r2
 8004310:	d034      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d007      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	4a11      	ldr	r2, [pc, #68]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004330:	e00e      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004336:	3308      	adds	r3, #8
 8004338:	2102      	movs	r1, #2
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fca4 	bl	8004c88 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800434e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	4a02      	ldr	r2, [pc, #8]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004368:	430b      	orrs	r3, r1
 800436a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800436c:	e006      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800436e:	bf00      	nop
 8004370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004388:	66bb      	str	r3, [r7, #104]	; 0x68
 800438a:	2300      	movs	r3, #0
 800438c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800438e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d00c      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439c:	3328      	adds	r3, #40	; 0x28
 800439e:	2102      	movs	r1, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fd23 	bl	8004dec <RCCEx_PLL3_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80043be:	663b      	str	r3, [r7, #96]	; 0x60
 80043c0:	2300      	movs	r3, #0
 80043c2:	667b      	str	r3, [r7, #100]	; 0x64
 80043c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043c8:	460b      	mov	r3, r1
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d038      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043da:	d018      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e0:	d811      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e6:	d014      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d80b      	bhi.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f6:	d106      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f8:	4bc3      	ldr	r3, [pc, #780]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	4ac2      	ldr	r2, [pc, #776]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004404:	e008      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800440c:	e004      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800440e:	bf00      	nop
 8004410:	e002      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004420:	4bb9      	ldr	r3, [pc, #740]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004430:	4ab5      	ldr	r2, [pc, #724]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004432:	430b      	orrs	r3, r1
 8004434:	6553      	str	r3, [r2, #84]	; 0x54
 8004436:	e003      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800443c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800444c:	65bb      	str	r3, [r7, #88]	; 0x58
 800444e:	2300      	movs	r3, #0
 8004450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004452:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800445c:	4baa      	ldr	r3, [pc, #680]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446a:	4aa7      	ldr	r2, [pc, #668]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800447c:	653b      	str	r3, [r7, #80]	; 0x50
 800447e:	2300      	movs	r3, #0
 8004480:	657b      	str	r3, [r7, #84]	; 0x54
 8004482:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004486:	460b      	mov	r3, r1
 8004488:	4313      	orrs	r3, r2
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800448c:	4b9e      	ldr	r3, [pc, #632]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004498:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800449c:	4a9a      	ldr	r2, [pc, #616]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449e:	430b      	orrs	r3, r1
 80044a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80044ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80044b0:	2300      	movs	r3, #0
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044b8:	460b      	mov	r3, r1
 80044ba:	4313      	orrs	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044be:	4b92      	ldr	r3, [pc, #584]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044cc:	4a8e      	ldr	r2, [pc, #568]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044de:	643b      	str	r3, [r7, #64]	; 0x40
 80044e0:	2300      	movs	r3, #0
 80044e2:	647b      	str	r3, [r7, #68]	; 0x44
 80044e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044e8:	460b      	mov	r3, r1
 80044ea:	4313      	orrs	r3, r2
 80044ec:	d00e      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ee:	4b86      	ldr	r3, [pc, #536]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4a85      	ldr	r2, [pc, #532]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044f8:	6113      	str	r3, [r2, #16]
 80044fa:	4b83      	ldr	r3, [pc, #524]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fc:	6919      	ldr	r1, [r3, #16]
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004506:	4a80      	ldr	r2, [pc, #512]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004508:	430b      	orrs	r3, r1
 800450a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004518:	63bb      	str	r3, [r7, #56]	; 0x38
 800451a:	2300      	movs	r3, #0
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004528:	4b77      	ldr	r3, [pc, #476]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	4a74      	ldr	r2, [pc, #464]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004538:	430b      	orrs	r3, r1
 800453a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
 800454a:	2300      	movs	r3, #0
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
 800454e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004552:	460b      	mov	r3, r1
 8004554:	4313      	orrs	r3, r2
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004558:	4b6b      	ldr	r3, [pc, #428]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004568:	4a67      	ldr	r2, [pc, #412]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800456a:	430b      	orrs	r3, r1
 800456c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	2100      	movs	r1, #0
 8004578:	62b9      	str	r1, [r7, #40]	; 0x28
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004580:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d011      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458e:	3308      	adds	r3, #8
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fb78 	bl	8004c88 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	2100      	movs	r1, #0
 80045b8:	6239      	str	r1, [r7, #32]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
 80045c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d011      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ce:	3308      	adds	r3, #8
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb58 	bl	8004c88 <RCCEx_PLL2_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	2100      	movs	r1, #0
 80045f8:	61b9      	str	r1, [r7, #24]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004604:	460b      	mov	r3, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	d011      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460e:	3308      	adds	r3, #8
 8004610:	2102      	movs	r1, #2
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fb38 	bl	8004c88 <RCCEx_PLL2_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800461e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	2100      	movs	r1, #0
 8004638:	6139      	str	r1, [r7, #16]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d011      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464e:	3328      	adds	r3, #40	; 0x28
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fbca 	bl	8004dec <RCCEx_PLL3_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800465e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	2100      	movs	r1, #0
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d011      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468e:	3328      	adds	r3, #40	; 0x28
 8004690:	2101      	movs	r1, #1
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fbaa 	bl	8004dec <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800469e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	2100      	movs	r1, #0
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046c4:	460b      	mov	r3, r1
 80046c6:	4313      	orrs	r3, r2
 80046c8:	d011      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ce:	3328      	adds	r3, #40	; 0x28
 80046d0:	2102      	movs	r1, #2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fb8a 	bl	8004dec <RCCEx_PLL3_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80046ee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004702:	46bd      	mov	sp, r7
 8004704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004708:	58024400 	.word	0x58024400

0800470c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004710:	f7fe fd96 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	; (8004734 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	58024400 	.word	0x58024400
 8004734:	080076fc 	.word	0x080076fc

08004738 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004740:	4ba1      	ldr	r3, [pc, #644]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800474a:	4b9f      	ldr	r3, [pc, #636]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	0b1b      	lsrs	r3, r3, #12
 8004750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004754:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004756:	4b9c      	ldr	r3, [pc, #624]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004762:	4b99      	ldr	r3, [pc, #612]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	08db      	lsrs	r3, r3, #3
 8004768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8111 	beq.w	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b02      	cmp	r3, #2
 800478a:	f000 8083 	beq.w	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b02      	cmp	r3, #2
 8004792:	f200 80a1 	bhi.w	80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d056      	beq.n	8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047a2:	e099      	b.n	80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a4:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02d      	beq.n	800480c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047b0:	4b85      	ldr	r3, [pc, #532]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	08db      	lsrs	r3, r3, #3
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	4a84      	ldr	r2, [pc, #528]	; (80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
 80047c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b7b      	ldr	r3, [pc, #492]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800480a:	e087      	b.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004832:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484e:	e065      	b.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800485e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004862:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	ed97 6a03 	vldr	s12, [r7, #12]
 8004876:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800487a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004892:	e043      	b.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a6:	4b48      	ldr	r3, [pc, #288]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d6:	e021      	b.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ea:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800491a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	0a5b      	lsrs	r3, r3, #9
 8004922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004936:	edd7 6a07 	vldr	s13, [r7, #28]
 800493a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004942:	ee17 2a90 	vmov	r2, s15
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800494a:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004964:	edd7 6a07 	vldr	s13, [r7, #28]
 8004968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800496c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004970:	ee17 2a90 	vmov	r2, s15
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004978:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800498e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004992:	edd7 6a07 	vldr	s13, [r7, #28]
 8004996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800499a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499e:	ee17 2a90 	vmov	r2, s15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
}
 80049ba:	bf00      	nop
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	58024400 	.word	0x58024400
 80049cc:	03d09000 	.word	0x03d09000
 80049d0:	46000000 	.word	0x46000000
 80049d4:	4c742400 	.word	0x4c742400
 80049d8:	4a742400 	.word	0x4a742400
 80049dc:	4af42400 	.word	0x4af42400

080049e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049e8:	4ba1      	ldr	r3, [pc, #644]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049f2:	4b9f      	ldr	r3, [pc, #636]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	0d1b      	lsrs	r3, r3, #20
 80049f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049fe:	4b9c      	ldr	r3, [pc, #624]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	0a1b      	lsrs	r3, r3, #8
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a0a:	4b99      	ldr	r3, [pc, #612]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8111 	beq.w	8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	f000 8083 	beq.w	8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	f200 80a1 	bhi.w	8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d056      	beq.n	8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a4a:	e099      	b.n	8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a4c:	4b88      	ldr	r3, [pc, #544]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02d      	beq.n	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a58:	4b85      	ldr	r3, [pc, #532]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	08db      	lsrs	r3, r3, #3
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	4a84      	ldr	r2, [pc, #528]	; (8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a82:	4b7b      	ldr	r3, [pc, #492]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ab2:	e087      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac6:	4b6a      	ldr	r3, [pc, #424]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ada:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004af6:	e065      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0a:	4b59      	ldr	r3, [pc, #356]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b3a:	e043      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4e:	4b48      	ldr	r3, [pc, #288]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7e:	e021      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b92:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bc4:	4b2a      	ldr	r3, [pc, #168]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	0a5b      	lsrs	r3, r3, #9
 8004bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bea:	ee17 2a90 	vmov	r2, s15
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bf2:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c18:	ee17 2a90 	vmov	r2, s15
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c20:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	0e1b      	lsrs	r3, r3, #24
 8004c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c46:	ee17 2a90 	vmov	r2, s15
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c4e:	e008      	b.n	8004c62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]
}
 8004c62:	bf00      	nop
 8004c64:	3724      	adds	r7, #36	; 0x24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
 8004c74:	03d09000 	.word	0x03d09000
 8004c78:	46000000 	.word	0x46000000
 8004c7c:	4c742400 	.word	0x4c742400
 8004c80:	4a742400 	.word	0x4a742400
 8004c84:	4af42400 	.word	0x4af42400

08004c88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c96:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d101      	bne.n	8004ca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e099      	b.n	8004dda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ca6:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a4e      	ldr	r2, [pc, #312]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb2:	f7fc fdf9 	bl	80018a8 <HAL_GetTick>
 8004cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cb8:	e008      	b.n	8004ccc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cba:	f7fc fdf5 	bl	80018a8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e086      	b.n	8004dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ccc:	4b45      	ldr	r3, [pc, #276]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f0      	bne.n	8004cba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cd8:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	031b      	lsls	r3, r3, #12
 8004ce6:	493f      	ldr	r1, [pc, #252]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	628b      	str	r3, [r1, #40]	; 0x28
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	025b      	lsls	r3, r3, #9
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	061b      	lsls	r3, r3, #24
 8004d18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d1c:	4931      	ldr	r1, [pc, #196]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d22:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	492d      	ldr	r1, [pc, #180]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d34:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	f023 0220 	bic.w	r2, r3, #32
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	4928      	ldr	r1, [pc, #160]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d46:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	f023 0310 	bic.w	r3, r3, #16
 8004d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d56:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <RCCEx_PLL2_Config+0x160>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	69d2      	ldr	r2, [r2, #28]
 8004d5e:	00d2      	lsls	r2, r2, #3
 8004d60:	4920      	ldr	r1, [pc, #128]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d66:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	f043 0310 	orr.w	r3, r3, #16
 8004d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d78:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d84:	e00f      	b.n	8004da6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d98:	e005      	b.n	8004da6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a0e      	ldr	r2, [pc, #56]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db2:	f7fc fd79 	bl	80018a8 <HAL_GetTick>
 8004db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004db8:	e008      	b.n	8004dcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dba:	f7fc fd75 	bl	80018a8 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e006      	b.n	8004dda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <RCCEx_PLL2_Config+0x15c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	58024400 	.word	0x58024400
 8004de8:	ffff0007 	.word	0xffff0007

08004dec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dfa:	4b53      	ldr	r3, [pc, #332]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d101      	bne.n	8004e0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e099      	b.n	8004f3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e0a:	4b4f      	ldr	r3, [pc, #316]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a4e      	ldr	r2, [pc, #312]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e16:	f7fc fd47 	bl	80018a8 <HAL_GetTick>
 8004e1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e1c:	e008      	b.n	8004e30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e1e:	f7fc fd43 	bl	80018a8 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e086      	b.n	8004f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e30:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f0      	bne.n	8004e1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e3c:	4b42      	ldr	r3, [pc, #264]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	051b      	lsls	r3, r3, #20
 8004e4a:	493f      	ldr	r1, [pc, #252]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	025b      	lsls	r3, r3, #9
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e80:	4931      	ldr	r1, [pc, #196]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e86:	4b30      	ldr	r3, [pc, #192]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	492d      	ldr	r1, [pc, #180]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	4928      	ldr	r1, [pc, #160]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004eaa:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	4a26      	ldr	r2, [pc, #152]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eba:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <RCCEx_PLL3_Config+0x160>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	69d2      	ldr	r2, [r2, #28]
 8004ec2:	00d2      	lsls	r2, r2, #3
 8004ec4:	4920      	ldr	r1, [pc, #128]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eca:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ee8:	e00f      	b.n	8004f0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ef0:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004ef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004efc:	e005      	b.n	8004f0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f16:	f7fc fcc7 	bl	80018a8 <HAL_GetTick>
 8004f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f1c:	e008      	b.n	8004f30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f1e:	f7fc fcc3 	bl	80018a8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <RCCEx_PLL3_Config+0x15c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	ffff0007 	.word	0xffff0007

08004f50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e10f      	b.n	8005182 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a87      	ldr	r2, [pc, #540]	; (800518c <HAL_SPI_Init+0x23c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <HAL_SPI_Init+0x42>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a86      	ldr	r2, [pc, #536]	; (8005190 <HAL_SPI_Init+0x240>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00a      	beq.n	8004f92 <HAL_SPI_Init+0x42>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a84      	ldr	r2, [pc, #528]	; (8005194 <HAL_SPI_Init+0x244>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d005      	beq.n	8004f92 <HAL_SPI_Init+0x42>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	d901      	bls.n	8004f92 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e0f7      	b.n	8005182 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fd5a 	bl	8005a4c <SPI_GetPacketSize>
 8004f98:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a7b      	ldr	r2, [pc, #492]	; (800518c <HAL_SPI_Init+0x23c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00c      	beq.n	8004fbe <HAL_SPI_Init+0x6e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a79      	ldr	r2, [pc, #484]	; (8005190 <HAL_SPI_Init+0x240>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <HAL_SPI_Init+0x6e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a78      	ldr	r2, [pc, #480]	; (8005194 <HAL_SPI_Init+0x244>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d002      	beq.n	8004fbe <HAL_SPI_Init+0x6e>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d811      	bhi.n	8004fe2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004fc2:	4a72      	ldr	r2, [pc, #456]	; (800518c <HAL_SPI_Init+0x23c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a70      	ldr	r2, [pc, #448]	; (8005190 <HAL_SPI_Init+0x240>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_SPI_Init+0x8c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a6f      	ldr	r2, [pc, #444]	; (8005194 <HAL_SPI_Init+0x244>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d104      	bne.n	8004fe6 <HAL_SPI_Init+0x96>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d901      	bls.n	8004fe6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0cd      	b.n	8005182 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc f9e4 	bl	80013c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005022:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800502c:	d119      	bne.n	8005062 <HAL_SPI_Init+0x112>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005036:	d103      	bne.n	8005040 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10c      	bne.n	8005062 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800504c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005050:	d107      	bne.n	8005062 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00f      	beq.n	800508e <HAL_SPI_Init+0x13e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b06      	cmp	r3, #6
 8005074:	d90b      	bls.n	800508e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	e007      	b.n	800509e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800509c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	431a      	orrs	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	ea42 0103 	orr.w	r1, r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fe:	ea42 0103 	orr.w	r1, r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d113      	bne.n	800513e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005128:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800513c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40013000 	.word	0x40013000
 8005190:	40003800 	.word	0x40003800
 8005194:	40003c00 	.word	0x40003c00

08005198 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3320      	adds	r3, #32
 80051ae:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_SPI_Transmit+0x2a>
 80051be:	2302      	movs	r3, #2
 80051c0:	e1e1      	b.n	8005586 <HAL_SPI_Transmit+0x3ee>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051ca:	f7fc fb6d 	bl	80018a8 <HAL_GetTick>
 80051ce:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d007      	beq.n	80051ec <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
 80051de:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80051e8:	7efb      	ldrb	r3, [r7, #27]
 80051ea:	e1cc      	b.n	8005586 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_SPI_Transmit+0x60>
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d107      	bne.n	8005208 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005204:	7efb      	ldrb	r3, [r7, #27]
 8005206:	e1be      	b.n	8005586 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2203      	movs	r2, #3
 800520c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	88fa      	ldrh	r2, [r7, #6]
 800522a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005258:	d108      	bne.n	800526c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e009      	b.n	8005280 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800527e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4b96      	ldr	r3, [pc, #600]	; (80054e0 <HAL_SPI_Transmit+0x348>)
 8005288:	4013      	ands	r3, r2
 800528a:	88f9      	ldrh	r1, [r7, #6]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	430b      	orrs	r3, r1
 8005292:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ac:	d107      	bne.n	80052be <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2b0f      	cmp	r3, #15
 80052c4:	d947      	bls.n	8005356 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80052c6:	e03f      	b.n	8005348 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d114      	bne.n	8005300 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e6:	1d1a      	adds	r2, r3, #4
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052fe:	e023      	b.n	8005348 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005300:	f7fc fad2 	bl	80018a8 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d803      	bhi.n	8005318 <HAL_SPI_Transmit+0x180>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005316:	d102      	bne.n	800531e <HAL_SPI_Transmit+0x186>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d114      	bne.n	8005348 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fac6 	bl	80058b0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005332:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e11e      	b.n	8005586 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1b9      	bne.n	80052c8 <HAL_SPI_Transmit+0x130>
 8005354:	e0f1      	b.n	800553a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2b07      	cmp	r3, #7
 800535c:	f240 80e6 	bls.w	800552c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005360:	e05d      	b.n	800541e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d132      	bne.n	80053d6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	d918      	bls.n	80053ae <HAL_SPI_Transmit+0x216>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d014      	beq.n	80053ae <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005394:	1d1a      	adds	r2, r3, #4
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b02      	subs	r3, #2
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80053ac:	e037      	b.n	800541e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b2:	881a      	ldrh	r2, [r3, #0]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80053d4:	e023      	b.n	800541e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d6:	f7fc fa67 	bl	80018a8 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d803      	bhi.n	80053ee <HAL_SPI_Transmit+0x256>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ec:	d102      	bne.n	80053f4 <HAL_SPI_Transmit+0x25c>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d114      	bne.n	800541e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fa5b 	bl	80058b0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005408:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0b3      	b.n	8005586 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d19b      	bne.n	8005362 <HAL_SPI_Transmit+0x1ca>
 800542a:	e086      	b.n	800553a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d154      	bne.n	80054e4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d918      	bls.n	8005478 <HAL_SPI_Transmit+0x2e0>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d914      	bls.n	8005478 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545e:	1d1a      	adds	r2, r3, #4
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b04      	subs	r3, #4
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005476:	e059      	b.n	800552c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	d917      	bls.n	80054b4 <HAL_SPI_Transmit+0x31c>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d013      	beq.n	80054b4 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005490:	881a      	ldrh	r2, [r3, #0]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549a:	1c9a      	adds	r2, r3, #2
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b02      	subs	r3, #2
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80054b2:	e03b      	b.n	800552c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3320      	adds	r3, #32
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80054de:	e025      	b.n	800552c <HAL_SPI_Transmit+0x394>
 80054e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e4:	f7fc f9e0 	bl	80018a8 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d803      	bhi.n	80054fc <HAL_SPI_Transmit+0x364>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fa:	d102      	bne.n	8005502 <HAL_SPI_Transmit+0x36a>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d114      	bne.n	800552c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f9d4 	bl	80058b0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005516:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e02c      	b.n	8005586 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	f47f af79 	bne.w	800542c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2200      	movs	r2, #0
 8005542:	2108      	movs	r1, #8
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 fa53 	bl	80059f0 <SPI_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d007      	beq.n	8005560 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f9a5 	bl	80058b0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005584:	7efb      	ldrb	r3, [r7, #27]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop

08005590 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3330      	adds	r3, #48	; 0x30
 80055aa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_SPI_Receive+0x2a>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e173      	b.n	80058a2 <HAL_SPI_Receive+0x312>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055c2:	f7fc f971 	bl	80018a8 <HAL_GetTick>
 80055c6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d007      	beq.n	80055e4 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
 80055d6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055e0:	7ffb      	ldrb	r3, [r7, #31]
 80055e2:	e15e      	b.n	80058a2 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Receive+0x60>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055fc:	7ffb      	ldrb	r3, [r7, #31]
 80055fe:	e150      	b.n	80058a2 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2204      	movs	r2, #4
 8005604:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	88fa      	ldrh	r2, [r7, #6]
 800561a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005650:	d108      	bne.n	8005664 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e009      	b.n	8005678 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005676:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	4b8b      	ldr	r3, [pc, #556]	; (80058ac <HAL_SPI_Receive+0x31c>)
 8005680:	4013      	ands	r3, r2
 8005682:	88f9      	ldrh	r1, [r7, #6]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	430b      	orrs	r3, r1
 800568a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a4:	d107      	bne.n	80056b6 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	d948      	bls.n	8005750 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80056be:	e040      	b.n	8005742 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	f248 0308 	movw	r3, #32776	; 0x8008
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d014      	beq.n	80056fa <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056da:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e0:	1d1a      	adds	r2, r3, #4
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80056f8:	e023      	b.n	8005742 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fa:	f7fc f8d5 	bl	80018a8 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d803      	bhi.n	8005712 <HAL_SPI_Receive+0x182>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005710:	d102      	bne.n	8005718 <HAL_SPI_Receive+0x188>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d114      	bne.n	8005742 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f8c9 	bl	80058b0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e0af      	b.n	80058a2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1b8      	bne.n	80056c0 <HAL_SPI_Receive+0x130>
 800574e:	e095      	b.n	800587c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b07      	cmp	r3, #7
 8005756:	f240 808b 	bls.w	8005870 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800575a:	e03f      	b.n	80057dc <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d114      	bne.n	8005794 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	8812      	ldrh	r2, [r2, #0]
 8005772:	b292      	uxth	r2, r2
 8005774:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577a:	1c9a      	adds	r2, r3, #2
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005792:	e023      	b.n	80057dc <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005794:	f7fc f888 	bl	80018a8 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d803      	bhi.n	80057ac <HAL_SPI_Receive+0x21c>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057aa:	d102      	bne.n	80057b2 <HAL_SPI_Receive+0x222>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d114      	bne.n	80057dc <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f87c 	bl	80058b0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e062      	b.n	80058a2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1b9      	bne.n	800575c <HAL_SPI_Receive+0x1cc>
 80057e8:	e048      	b.n	800587c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d117      	bne.n	8005828 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005826:	e023      	b.n	8005870 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005828:	f7fc f83e 	bl	80018a8 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d803      	bhi.n	8005840 <HAL_SPI_Receive+0x2b0>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583e:	d102      	bne.n	8005846 <HAL_SPI_Receive+0x2b6>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d114      	bne.n	8005870 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f832 	bl	80058b0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800585a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e018      	b.n	80058a2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1b6      	bne.n	80057ea <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f817 	bl	80058b0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80058a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	ffff0000 	.word	0xffff0000

080058b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0208 	orr.w	r2, r2, #8
 80058ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0210 	orr.w	r2, r2, #16
 80058de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6919      	ldr	r1, [r3, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b3c      	ldr	r3, [pc, #240]	; (80059ec <SPI_CloseTransfer+0x13c>)
 80058fc:	400b      	ands	r3, r1
 80058fe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800590e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b04      	cmp	r3, #4
 800591a:	d014      	beq.n	8005946 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00f      	beq.n	8005946 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800592c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0220 	orr.w	r2, r2, #32
 8005944:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b03      	cmp	r3, #3
 8005950:	d014      	beq.n	800597c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00f      	beq.n	800597c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800597a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00f      	beq.n	80059a6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598c:	f043 0201 	orr.w	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00f      	beq.n	80059d0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b6:	f043 0208 	orr.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	fffffc90 	.word	0xfffffc90

080059f0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a00:	e010      	b.n	8005a24 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a02:	f7fb ff51 	bl	80018a8 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d803      	bhi.n	8005a1a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a18:	d102      	bne.n	8005a20 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e00f      	b.n	8005a44 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d0df      	beq.n	8005a02 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3307      	adds	r3, #7
 8005a6a:	08db      	lsrs	r3, r3, #3
 8005a6c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e042      	b.n	8005b1a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fb fcf6 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2224      	movs	r2, #36	; 0x24
 8005ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f983 	bl	8005dd0 <UART_SetConfig>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e022      	b.n	8005b1a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fedf 	bl	80068a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005af0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0201 	orr.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 ff66 	bl	80069e4 <UART_CheckIdleState>
 8005b18:	4603      	mov	r3, r0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b08a      	sub	sp, #40	; 0x28
 8005b26:	af02      	add	r7, sp, #8
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d17b      	bne.n	8005c34 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_UART_Transmit+0x26>
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e074      	b.n	8005c36 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2221      	movs	r2, #33	; 0x21
 8005b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b5c:	f7fb fea4 	bl	80018a8 <HAL_GetTick>
 8005b60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7a:	d108      	bne.n	8005b8e <HAL_UART_Transmit+0x6c>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e003      	b.n	8005b96 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b96:	e030      	b.n	8005bfa <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2180      	movs	r1, #128	; 0x80
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 ffc8 	bl	8006b38 <UART_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e03d      	b.n	8005c36 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	e007      	b.n	8005be8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	781a      	ldrb	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	3301      	adds	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1c8      	bne.n	8005b98 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2140      	movs	r1, #64	; 0x40
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 ff91 	bl	8006b38 <UART_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e006      	b.n	8005c36 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e000      	b.n	8005c36 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c34:	2302      	movs	r3, #2
  }
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b08a      	sub	sp, #40	; 0x28
 8005c42:	af02      	add	r7, sp, #8
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	f040 80b5 	bne.w	8005dc4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_UART_Receive+0x28>
 8005c60:	88fb      	ldrh	r3, [r7, #6]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e0ad      	b.n	8005dc6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2222      	movs	r2, #34	; 0x22
 8005c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c80:	f7fb fe12 	bl	80018a8 <HAL_GetTick>
 8005c84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	88fa      	ldrh	r2, [r7, #6]
 8005c8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	88fa      	ldrh	r2, [r7, #6]
 8005c92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9e:	d10e      	bne.n	8005cbe <HAL_UART_Receive+0x80>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <HAL_UART_Receive+0x76>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cb2:	e02d      	b.n	8005d10 <HAL_UART_Receive+0xd2>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	22ff      	movs	r2, #255	; 0xff
 8005cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cbc:	e028      	b.n	8005d10 <HAL_UART_Receive+0xd2>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10d      	bne.n	8005ce2 <HAL_UART_Receive+0xa4>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <HAL_UART_Receive+0x9a>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	22ff      	movs	r2, #255	; 0xff
 8005cd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cd6:	e01b      	b.n	8005d10 <HAL_UART_Receive+0xd2>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	227f      	movs	r2, #127	; 0x7f
 8005cdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ce0:	e016      	b.n	8005d10 <HAL_UART_Receive+0xd2>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cea:	d10d      	bne.n	8005d08 <HAL_UART_Receive+0xca>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d104      	bne.n	8005cfe <HAL_UART_Receive+0xc0>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	227f      	movs	r2, #127	; 0x7f
 8005cf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cfc:	e008      	b.n	8005d10 <HAL_UART_Receive+0xd2>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	223f      	movs	r2, #63	; 0x3f
 8005d02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d06:	e003      	b.n	8005d10 <HAL_UART_Receive+0xd2>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d16:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d20:	d108      	bne.n	8005d34 <HAL_UART_Receive+0xf6>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e003      	b.n	8005d3c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d3c:	e036      	b.n	8005dac <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2200      	movs	r2, #0
 8005d46:	2120      	movs	r1, #32
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 fef5 	bl	8006b38 <UART_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e032      	b.n	8005dc6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	8a7b      	ldrh	r3, [r7, #18]
 8005d70:	4013      	ands	r3, r2
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	e00c      	b.n	8005d9a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	8a7b      	ldrh	r3, [r7, #18]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	3301      	adds	r3, #1
 8005d98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1c2      	bne.n	8005d3e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e000      	b.n	8005dc6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd4:	b092      	sub	sp, #72	; 0x48
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	431a      	orrs	r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	4bbe      	ldr	r3, [pc, #760]	; (80060f8 <UART_SetConfig+0x328>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4ab3      	ldr	r2, [pc, #716]	; (80060fc <UART_SetConfig+0x32c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	4baf      	ldr	r3, [pc, #700]	; (8006100 <UART_SetConfig+0x330>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	f023 010f 	bic.w	r1, r3, #15
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4aa6      	ldr	r2, [pc, #664]	; (8006104 <UART_SetConfig+0x334>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d177      	bne.n	8005f60 <UART_SetConfig+0x190>
 8005e70:	4ba5      	ldr	r3, [pc, #660]	; (8006108 <UART_SetConfig+0x338>)
 8005e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e78:	2b28      	cmp	r3, #40	; 0x28
 8005e7a:	d86d      	bhi.n	8005f58 <UART_SetConfig+0x188>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <UART_SetConfig+0xb4>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005f29 	.word	0x08005f29
 8005e88:	08005f59 	.word	0x08005f59
 8005e8c:	08005f59 	.word	0x08005f59
 8005e90:	08005f59 	.word	0x08005f59
 8005e94:	08005f59 	.word	0x08005f59
 8005e98:	08005f59 	.word	0x08005f59
 8005e9c:	08005f59 	.word	0x08005f59
 8005ea0:	08005f59 	.word	0x08005f59
 8005ea4:	08005f31 	.word	0x08005f31
 8005ea8:	08005f59 	.word	0x08005f59
 8005eac:	08005f59 	.word	0x08005f59
 8005eb0:	08005f59 	.word	0x08005f59
 8005eb4:	08005f59 	.word	0x08005f59
 8005eb8:	08005f59 	.word	0x08005f59
 8005ebc:	08005f59 	.word	0x08005f59
 8005ec0:	08005f59 	.word	0x08005f59
 8005ec4:	08005f39 	.word	0x08005f39
 8005ec8:	08005f59 	.word	0x08005f59
 8005ecc:	08005f59 	.word	0x08005f59
 8005ed0:	08005f59 	.word	0x08005f59
 8005ed4:	08005f59 	.word	0x08005f59
 8005ed8:	08005f59 	.word	0x08005f59
 8005edc:	08005f59 	.word	0x08005f59
 8005ee0:	08005f59 	.word	0x08005f59
 8005ee4:	08005f41 	.word	0x08005f41
 8005ee8:	08005f59 	.word	0x08005f59
 8005eec:	08005f59 	.word	0x08005f59
 8005ef0:	08005f59 	.word	0x08005f59
 8005ef4:	08005f59 	.word	0x08005f59
 8005ef8:	08005f59 	.word	0x08005f59
 8005efc:	08005f59 	.word	0x08005f59
 8005f00:	08005f59 	.word	0x08005f59
 8005f04:	08005f49 	.word	0x08005f49
 8005f08:	08005f59 	.word	0x08005f59
 8005f0c:	08005f59 	.word	0x08005f59
 8005f10:	08005f59 	.word	0x08005f59
 8005f14:	08005f59 	.word	0x08005f59
 8005f18:	08005f59 	.word	0x08005f59
 8005f1c:	08005f59 	.word	0x08005f59
 8005f20:	08005f59 	.word	0x08005f59
 8005f24:	08005f51 	.word	0x08005f51
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e222      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f30:	2304      	movs	r3, #4
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e21e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e21a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e216      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f48:	2320      	movs	r3, #32
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4e:	e212      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f50:	2340      	movs	r3, #64	; 0x40
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f56:	e20e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5e:	e20a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a69      	ldr	r2, [pc, #420]	; (800610c <UART_SetConfig+0x33c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d130      	bne.n	8005fcc <UART_SetConfig+0x1fc>
 8005f6a:	4b67      	ldr	r3, [pc, #412]	; (8006108 <UART_SetConfig+0x338>)
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b05      	cmp	r3, #5
 8005f74:	d826      	bhi.n	8005fc4 <UART_SetConfig+0x1f4>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x1ac>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005f95 	.word	0x08005f95
 8005f80:	08005f9d 	.word	0x08005f9d
 8005f84:	08005fa5 	.word	0x08005fa5
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9a:	e1ec      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa2:	e1e8      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005faa:	e1e4      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fac:	2310      	movs	r3, #16
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb2:	e1e0      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fba:	e1dc      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fbc:	2340      	movs	r3, #64	; 0x40
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc2:	e1d8      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fca:	e1d4      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a4f      	ldr	r2, [pc, #316]	; (8006110 <UART_SetConfig+0x340>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d130      	bne.n	8006038 <UART_SetConfig+0x268>
 8005fd6:	4b4c      	ldr	r3, [pc, #304]	; (8006108 <UART_SetConfig+0x338>)
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d826      	bhi.n	8006030 <UART_SetConfig+0x260>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0x218>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08006001 	.word	0x08006001
 8005fec:	08006009 	.word	0x08006009
 8005ff0:	08006011 	.word	0x08006011
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006021 	.word	0x08006021
 8005ffc:	08006029 	.word	0x08006029
 8006000:	2300      	movs	r3, #0
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006006:	e1b6      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600e:	e1b2      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006016:	e1ae      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601e:	e1aa      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006020:	2320      	movs	r3, #32
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006026:	e1a6      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006028:	2340      	movs	r3, #64	; 0x40
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602e:	e1a2      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e19e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a35      	ldr	r2, [pc, #212]	; (8006114 <UART_SetConfig+0x344>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d130      	bne.n	80060a4 <UART_SetConfig+0x2d4>
 8006042:	4b31      	ldr	r3, [pc, #196]	; (8006108 <UART_SetConfig+0x338>)
 8006044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	2b05      	cmp	r3, #5
 800604c:	d826      	bhi.n	800609c <UART_SetConfig+0x2cc>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0x284>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	0800606d 	.word	0x0800606d
 8006058:	08006075 	.word	0x08006075
 800605c:	0800607d 	.word	0x0800607d
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	2300      	movs	r3, #0
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006072:	e180      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006074:	2304      	movs	r3, #4
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607a:	e17c      	b.n	8006376 <UART_SetConfig+0x5a6>
 800607c:	2308      	movs	r3, #8
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006082:	e178      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006084:	2310      	movs	r3, #16
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e174      	b.n	8006376 <UART_SetConfig+0x5a6>
 800608c:	2320      	movs	r3, #32
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e170      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006094:	2340      	movs	r3, #64	; 0x40
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e16c      	b.n	8006376 <UART_SetConfig+0x5a6>
 800609c:	2380      	movs	r3, #128	; 0x80
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e168      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <UART_SetConfig+0x348>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d142      	bne.n	8006134 <UART_SetConfig+0x364>
 80060ae:	4b16      	ldr	r3, [pc, #88]	; (8006108 <UART_SetConfig+0x338>)
 80060b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	d838      	bhi.n	800612c <UART_SetConfig+0x35c>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x2f0>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060d9 	.word	0x080060d9
 80060c4:	080060e1 	.word	0x080060e1
 80060c8:	080060e9 	.word	0x080060e9
 80060cc:	080060f1 	.word	0x080060f1
 80060d0:	0800611d 	.word	0x0800611d
 80060d4:	08006125 	.word	0x08006125
 80060d8:	2300      	movs	r3, #0
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060de:	e14a      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060e0:	2304      	movs	r3, #4
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e6:	e146      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060e8:	2308      	movs	r3, #8
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ee:	e142      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060f0:	2310      	movs	r3, #16
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f6:	e13e      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060f8:	cfff69f3 	.word	0xcfff69f3
 80060fc:	58000c00 	.word	0x58000c00
 8006100:	11fff4ff 	.word	0x11fff4ff
 8006104:	40011000 	.word	0x40011000
 8006108:	58024400 	.word	0x58024400
 800610c:	40004400 	.word	0x40004400
 8006110:	40004800 	.word	0x40004800
 8006114:	40004c00 	.word	0x40004c00
 8006118:	40005000 	.word	0x40005000
 800611c:	2320      	movs	r3, #32
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e128      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e124      	b.n	8006376 <UART_SetConfig+0x5a6>
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e120      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4acb      	ldr	r2, [pc, #812]	; (8006468 <UART_SetConfig+0x698>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d176      	bne.n	800622c <UART_SetConfig+0x45c>
 800613e:	4bcb      	ldr	r3, [pc, #812]	; (800646c <UART_SetConfig+0x69c>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006146:	2b28      	cmp	r3, #40	; 0x28
 8006148:	d86c      	bhi.n	8006224 <UART_SetConfig+0x454>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x380>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	080061f5 	.word	0x080061f5
 8006154:	08006225 	.word	0x08006225
 8006158:	08006225 	.word	0x08006225
 800615c:	08006225 	.word	0x08006225
 8006160:	08006225 	.word	0x08006225
 8006164:	08006225 	.word	0x08006225
 8006168:	08006225 	.word	0x08006225
 800616c:	08006225 	.word	0x08006225
 8006170:	080061fd 	.word	0x080061fd
 8006174:	08006225 	.word	0x08006225
 8006178:	08006225 	.word	0x08006225
 800617c:	08006225 	.word	0x08006225
 8006180:	08006225 	.word	0x08006225
 8006184:	08006225 	.word	0x08006225
 8006188:	08006225 	.word	0x08006225
 800618c:	08006225 	.word	0x08006225
 8006190:	08006205 	.word	0x08006205
 8006194:	08006225 	.word	0x08006225
 8006198:	08006225 	.word	0x08006225
 800619c:	08006225 	.word	0x08006225
 80061a0:	08006225 	.word	0x08006225
 80061a4:	08006225 	.word	0x08006225
 80061a8:	08006225 	.word	0x08006225
 80061ac:	08006225 	.word	0x08006225
 80061b0:	0800620d 	.word	0x0800620d
 80061b4:	08006225 	.word	0x08006225
 80061b8:	08006225 	.word	0x08006225
 80061bc:	08006225 	.word	0x08006225
 80061c0:	08006225 	.word	0x08006225
 80061c4:	08006225 	.word	0x08006225
 80061c8:	08006225 	.word	0x08006225
 80061cc:	08006225 	.word	0x08006225
 80061d0:	08006215 	.word	0x08006215
 80061d4:	08006225 	.word	0x08006225
 80061d8:	08006225 	.word	0x08006225
 80061dc:	08006225 	.word	0x08006225
 80061e0:	08006225 	.word	0x08006225
 80061e4:	08006225 	.word	0x08006225
 80061e8:	08006225 	.word	0x08006225
 80061ec:	08006225 	.word	0x08006225
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e0bc      	b.n	8006376 <UART_SetConfig+0x5a6>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e0b8      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e0b4      	b.n	8006376 <UART_SetConfig+0x5a6>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e0b0      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006214:	2320      	movs	r3, #32
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e0ac      	b.n	8006376 <UART_SetConfig+0x5a6>
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e0a8      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006224:	2380      	movs	r3, #128	; 0x80
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e0a4      	b.n	8006376 <UART_SetConfig+0x5a6>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a8f      	ldr	r2, [pc, #572]	; (8006470 <UART_SetConfig+0x6a0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d130      	bne.n	8006298 <UART_SetConfig+0x4c8>
 8006236:	4b8d      	ldr	r3, [pc, #564]	; (800646c <UART_SetConfig+0x69c>)
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	2b05      	cmp	r3, #5
 8006240:	d826      	bhi.n	8006290 <UART_SetConfig+0x4c0>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0x478>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	08006261 	.word	0x08006261
 800624c:	08006269 	.word	0x08006269
 8006250:	08006271 	.word	0x08006271
 8006254:	08006279 	.word	0x08006279
 8006258:	08006281 	.word	0x08006281
 800625c:	08006289 	.word	0x08006289
 8006260:	2300      	movs	r3, #0
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006266:	e086      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626e:	e082      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006276:	e07e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e07a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006280:	2320      	movs	r3, #32
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e076      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e072      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e06e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a75      	ldr	r2, [pc, #468]	; (8006474 <UART_SetConfig+0x6a4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d130      	bne.n	8006304 <UART_SetConfig+0x534>
 80062a2:	4b72      	ldr	r3, [pc, #456]	; (800646c <UART_SetConfig+0x69c>)
 80062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d826      	bhi.n	80062fc <UART_SetConfig+0x52c>
 80062ae:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <UART_SetConfig+0x4e4>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062cd 	.word	0x080062cd
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062dd 	.word	0x080062dd
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	080062ed 	.word	0x080062ed
 80062c8:	080062f5 	.word	0x080062f5
 80062cc:	2300      	movs	r3, #0
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e050      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e04c      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e048      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e044      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062ec:	2320      	movs	r3, #32
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e040      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e03c      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e038      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a5b      	ldr	r2, [pc, #364]	; (8006478 <UART_SetConfig+0x6a8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d130      	bne.n	8006370 <UART_SetConfig+0x5a0>
 800630e:	4b57      	ldr	r3, [pc, #348]	; (800646c <UART_SetConfig+0x69c>)
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	2b05      	cmp	r3, #5
 8006318:	d826      	bhi.n	8006368 <UART_SetConfig+0x598>
 800631a:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0x550>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	08006339 	.word	0x08006339
 8006324:	08006341 	.word	0x08006341
 8006328:	08006349 	.word	0x08006349
 800632c:	08006351 	.word	0x08006351
 8006330:	08006359 	.word	0x08006359
 8006334:	08006361 	.word	0x08006361
 8006338:	2302      	movs	r3, #2
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633e:	e01a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006340:	2304      	movs	r3, #4
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006346:	e016      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006348:	2308      	movs	r3, #8
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634e:	e012      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006350:	2310      	movs	r3, #16
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006356:	e00e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006358:	2320      	movs	r3, #32
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635e:	e00a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006360:	2340      	movs	r3, #64	; 0x40
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006366:	e006      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636e:	e002      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006370:	2380      	movs	r3, #128	; 0x80
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3f      	ldr	r2, [pc, #252]	; (8006478 <UART_SetConfig+0x6a8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	f040 80f8 	bne.w	8006572 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006382:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006386:	2b20      	cmp	r3, #32
 8006388:	dc46      	bgt.n	8006418 <UART_SetConfig+0x648>
 800638a:	2b02      	cmp	r3, #2
 800638c:	f2c0 8082 	blt.w	8006494 <UART_SetConfig+0x6c4>
 8006390:	3b02      	subs	r3, #2
 8006392:	2b1e      	cmp	r3, #30
 8006394:	d87e      	bhi.n	8006494 <UART_SetConfig+0x6c4>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <UART_SetConfig+0x5cc>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	0800641f 	.word	0x0800641f
 80063a0:	08006495 	.word	0x08006495
 80063a4:	08006427 	.word	0x08006427
 80063a8:	08006495 	.word	0x08006495
 80063ac:	08006495 	.word	0x08006495
 80063b0:	08006495 	.word	0x08006495
 80063b4:	08006437 	.word	0x08006437
 80063b8:	08006495 	.word	0x08006495
 80063bc:	08006495 	.word	0x08006495
 80063c0:	08006495 	.word	0x08006495
 80063c4:	08006495 	.word	0x08006495
 80063c8:	08006495 	.word	0x08006495
 80063cc:	08006495 	.word	0x08006495
 80063d0:	08006495 	.word	0x08006495
 80063d4:	08006447 	.word	0x08006447
 80063d8:	08006495 	.word	0x08006495
 80063dc:	08006495 	.word	0x08006495
 80063e0:	08006495 	.word	0x08006495
 80063e4:	08006495 	.word	0x08006495
 80063e8:	08006495 	.word	0x08006495
 80063ec:	08006495 	.word	0x08006495
 80063f0:	08006495 	.word	0x08006495
 80063f4:	08006495 	.word	0x08006495
 80063f8:	08006495 	.word	0x08006495
 80063fc:	08006495 	.word	0x08006495
 8006400:	08006495 	.word	0x08006495
 8006404:	08006495 	.word	0x08006495
 8006408:	08006495 	.word	0x08006495
 800640c:	08006495 	.word	0x08006495
 8006410:	08006495 	.word	0x08006495
 8006414:	08006487 	.word	0x08006487
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	d037      	beq.n	800648c <UART_SetConfig+0x6bc>
 800641c:	e03a      	b.n	8006494 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800641e:	f7fe f975 	bl	800470c <HAL_RCCEx_GetD3PCLK1Freq>
 8006422:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006424:	e03c      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe f984 	bl	8004738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006434:	e034      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006436:	f107 0318 	add.w	r3, r7, #24
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe fad0 	bl	80049e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006444:	e02c      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <UART_SetConfig+0x69c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d016      	beq.n	8006480 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006452:	4b06      	ldr	r3, [pc, #24]	; (800646c <UART_SetConfig+0x69c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	08db      	lsrs	r3, r3, #3
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	4a07      	ldr	r2, [pc, #28]	; (800647c <UART_SetConfig+0x6ac>)
 800645e:	fa22 f303 	lsr.w	r3, r2, r3
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006464:	e01c      	b.n	80064a0 <UART_SetConfig+0x6d0>
 8006466:	bf00      	nop
 8006468:	40011400 	.word	0x40011400
 800646c:	58024400 	.word	0x58024400
 8006470:	40007800 	.word	0x40007800
 8006474:	40007c00 	.word	0x40007c00
 8006478:	58000c00 	.word	0x58000c00
 800647c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006480:	4b9d      	ldr	r3, [pc, #628]	; (80066f8 <UART_SetConfig+0x928>)
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006484:	e00c      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006486:	4b9d      	ldr	r3, [pc, #628]	; (80066fc <UART_SetConfig+0x92c>)
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800648a:	e009      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006492:	e005      	b.n	80064a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800649e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 81de 	beq.w	8006864 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	4a94      	ldr	r2, [pc, #592]	; (8006700 <UART_SetConfig+0x930>)
 80064ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b2:	461a      	mov	r2, r3
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	4413      	add	r3, r2
 80064c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d305      	bcc.n	80064d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d903      	bls.n	80064e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064de:	e1c1      	b.n	8006864 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e2:	2200      	movs	r2, #0
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	60fa      	str	r2, [r7, #12]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	4a84      	ldr	r2, [pc, #528]	; (8006700 <UART_SetConfig+0x930>)
 80064ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2200      	movs	r2, #0
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006502:	f7f9 fef1 	bl	80002e8 <__aeabi_uldivmod>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	020b      	lsls	r3, r1, #8
 8006518:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800651c:	0202      	lsls	r2, r0, #8
 800651e:	6979      	ldr	r1, [r7, #20]
 8006520:	6849      	ldr	r1, [r1, #4]
 8006522:	0849      	lsrs	r1, r1, #1
 8006524:	2000      	movs	r0, #0
 8006526:	460c      	mov	r4, r1
 8006528:	4605      	mov	r5, r0
 800652a:	eb12 0804 	adds.w	r8, r2, r4
 800652e:	eb43 0905 	adc.w	r9, r3, r5
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	469a      	mov	sl, r3
 800653a:	4693      	mov	fp, r2
 800653c:	4652      	mov	r2, sl
 800653e:	465b      	mov	r3, fp
 8006540:	4640      	mov	r0, r8
 8006542:	4649      	mov	r1, r9
 8006544:	f7f9 fed0 	bl	80002e8 <__aeabi_uldivmod>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4613      	mov	r3, r2
 800654e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006556:	d308      	bcc.n	800656a <UART_SetConfig+0x79a>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800655e:	d204      	bcs.n	800656a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006566:	60da      	str	r2, [r3, #12]
 8006568:	e17c      	b.n	8006864 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006570:	e178      	b.n	8006864 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657a:	f040 80c5 	bne.w	8006708 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800657e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006582:	2b20      	cmp	r3, #32
 8006584:	dc48      	bgt.n	8006618 <UART_SetConfig+0x848>
 8006586:	2b00      	cmp	r3, #0
 8006588:	db7b      	blt.n	8006682 <UART_SetConfig+0x8b2>
 800658a:	2b20      	cmp	r3, #32
 800658c:	d879      	bhi.n	8006682 <UART_SetConfig+0x8b2>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x7c4>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	0800661f 	.word	0x0800661f
 8006598:	08006627 	.word	0x08006627
 800659c:	08006683 	.word	0x08006683
 80065a0:	08006683 	.word	0x08006683
 80065a4:	0800662f 	.word	0x0800662f
 80065a8:	08006683 	.word	0x08006683
 80065ac:	08006683 	.word	0x08006683
 80065b0:	08006683 	.word	0x08006683
 80065b4:	0800663f 	.word	0x0800663f
 80065b8:	08006683 	.word	0x08006683
 80065bc:	08006683 	.word	0x08006683
 80065c0:	08006683 	.word	0x08006683
 80065c4:	08006683 	.word	0x08006683
 80065c8:	08006683 	.word	0x08006683
 80065cc:	08006683 	.word	0x08006683
 80065d0:	08006683 	.word	0x08006683
 80065d4:	0800664f 	.word	0x0800664f
 80065d8:	08006683 	.word	0x08006683
 80065dc:	08006683 	.word	0x08006683
 80065e0:	08006683 	.word	0x08006683
 80065e4:	08006683 	.word	0x08006683
 80065e8:	08006683 	.word	0x08006683
 80065ec:	08006683 	.word	0x08006683
 80065f0:	08006683 	.word	0x08006683
 80065f4:	08006683 	.word	0x08006683
 80065f8:	08006683 	.word	0x08006683
 80065fc:	08006683 	.word	0x08006683
 8006600:	08006683 	.word	0x08006683
 8006604:	08006683 	.word	0x08006683
 8006608:	08006683 	.word	0x08006683
 800660c:	08006683 	.word	0x08006683
 8006610:	08006683 	.word	0x08006683
 8006614:	08006675 	.word	0x08006675
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d02e      	beq.n	800667a <UART_SetConfig+0x8aa>
 800661c:	e031      	b.n	8006682 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661e:	f7fc fe3f 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 8006622:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006624:	e033      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006626:	f7fc fe51 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 800662a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800662c:	e02f      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800662e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe f880 	bl	8004738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800663c:	e027      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800663e:	f107 0318 	add.w	r3, r7, #24
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe f9cc 	bl	80049e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800664c:	e01f      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800664e:	4b2d      	ldr	r3, [pc, #180]	; (8006704 <UART_SetConfig+0x934>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800665a:	4b2a      	ldr	r3, [pc, #168]	; (8006704 <UART_SetConfig+0x934>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	08db      	lsrs	r3, r3, #3
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <UART_SetConfig+0x928>)
 8006666:	fa22 f303 	lsr.w	r3, r2, r3
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800666c:	e00f      	b.n	800668e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800666e:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <UART_SetConfig+0x928>)
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006672:	e00c      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006674:	4b21      	ldr	r3, [pc, #132]	; (80066fc <UART_SetConfig+0x92c>)
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006678:	e009      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006680:	e005      	b.n	800668e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800668c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800668e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80e7 	beq.w	8006864 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	4a19      	ldr	r2, [pc, #100]	; (8006700 <UART_SetConfig+0x930>)
 800669c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a0:	461a      	mov	r2, r3
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a8:	005a      	lsls	r2, r3, #1
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	441a      	add	r2, r3
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	2b0f      	cmp	r3, #15
 80066c0:	d916      	bls.n	80066f0 <UART_SetConfig+0x920>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c8:	d212      	bcs.n	80066f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f023 030f 	bic.w	r3, r3, #15
 80066d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	b29a      	uxth	r2, r3
 80066e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066e2:	4313      	orrs	r3, r2
 80066e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80066ec:	60da      	str	r2, [r3, #12]
 80066ee:	e0b9      	b.n	8006864 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066f6:	e0b5      	b.n	8006864 <UART_SetConfig+0xa94>
 80066f8:	03d09000 	.word	0x03d09000
 80066fc:	003d0900 	.word	0x003d0900
 8006700:	0800778c 	.word	0x0800778c
 8006704:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006708:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800670c:	2b20      	cmp	r3, #32
 800670e:	dc49      	bgt.n	80067a4 <UART_SetConfig+0x9d4>
 8006710:	2b00      	cmp	r3, #0
 8006712:	db7c      	blt.n	800680e <UART_SetConfig+0xa3e>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d87a      	bhi.n	800680e <UART_SetConfig+0xa3e>
 8006718:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x950>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	080067ab 	.word	0x080067ab
 8006724:	080067b3 	.word	0x080067b3
 8006728:	0800680f 	.word	0x0800680f
 800672c:	0800680f 	.word	0x0800680f
 8006730:	080067bb 	.word	0x080067bb
 8006734:	0800680f 	.word	0x0800680f
 8006738:	0800680f 	.word	0x0800680f
 800673c:	0800680f 	.word	0x0800680f
 8006740:	080067cb 	.word	0x080067cb
 8006744:	0800680f 	.word	0x0800680f
 8006748:	0800680f 	.word	0x0800680f
 800674c:	0800680f 	.word	0x0800680f
 8006750:	0800680f 	.word	0x0800680f
 8006754:	0800680f 	.word	0x0800680f
 8006758:	0800680f 	.word	0x0800680f
 800675c:	0800680f 	.word	0x0800680f
 8006760:	080067db 	.word	0x080067db
 8006764:	0800680f 	.word	0x0800680f
 8006768:	0800680f 	.word	0x0800680f
 800676c:	0800680f 	.word	0x0800680f
 8006770:	0800680f 	.word	0x0800680f
 8006774:	0800680f 	.word	0x0800680f
 8006778:	0800680f 	.word	0x0800680f
 800677c:	0800680f 	.word	0x0800680f
 8006780:	0800680f 	.word	0x0800680f
 8006784:	0800680f 	.word	0x0800680f
 8006788:	0800680f 	.word	0x0800680f
 800678c:	0800680f 	.word	0x0800680f
 8006790:	0800680f 	.word	0x0800680f
 8006794:	0800680f 	.word	0x0800680f
 8006798:	0800680f 	.word	0x0800680f
 800679c:	0800680f 	.word	0x0800680f
 80067a0:	08006801 	.word	0x08006801
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d02e      	beq.n	8006806 <UART_SetConfig+0xa36>
 80067a8:	e031      	b.n	800680e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067aa:	f7fc fd79 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 80067ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067b0:	e033      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b2:	f7fc fd8b 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 80067b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067b8:	e02f      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fd ffba 	bl	8004738 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c8:	e027      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ca:	f107 0318 	add.w	r3, r7, #24
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe f906 	bl	80049e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d8:	e01f      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067da:	4b2d      	ldr	r3, [pc, #180]	; (8006890 <UART_SetConfig+0xac0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067e6:	4b2a      	ldr	r3, [pc, #168]	; (8006890 <UART_SetConfig+0xac0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	08db      	lsrs	r3, r3, #3
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	4a28      	ldr	r2, [pc, #160]	; (8006894 <UART_SetConfig+0xac4>)
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067f8:	e00f      	b.n	800681a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067fa:	4b26      	ldr	r3, [pc, #152]	; (8006894 <UART_SetConfig+0xac4>)
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067fe:	e00c      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <UART_SetConfig+0xac8>)
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006804:	e009      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800680c:	e005      	b.n	800681a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006818:	bf00      	nop
    }

    if (pclk != 0U)
 800681a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d021      	beq.n	8006864 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	4a1d      	ldr	r2, [pc, #116]	; (800689c <UART_SetConfig+0xacc>)
 8006826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800682a:	461a      	mov	r2, r3
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	441a      	add	r2, r3
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006842:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	2b0f      	cmp	r3, #15
 8006848:	d909      	bls.n	800685e <UART_SetConfig+0xa8e>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006850:	d205      	bcs.n	800685e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	b29a      	uxth	r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60da      	str	r2, [r3, #12]
 800685c:	e002      	b.n	8006864 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2201      	movs	r2, #1
 8006868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2201      	movs	r2, #1
 8006870:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2200      	movs	r2, #0
 8006878:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2200      	movs	r2, #0
 800687e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006880:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006884:	4618      	mov	r0, r3
 8006886:	3748      	adds	r7, #72	; 0x48
 8006888:	46bd      	mov	sp, r7
 800688a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800688e:	bf00      	nop
 8006890:	58024400 	.word	0x58024400
 8006894:	03d09000 	.word	0x03d09000
 8006898:	003d0900 	.word	0x003d0900
 800689c:	0800778c 	.word	0x0800778c

080068a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01a      	beq.n	80069b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d10a      	bne.n	80069b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b098      	sub	sp, #96	; 0x60
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069f4:	f7fa ff58 	bl	80018a8 <HAL_GetTick>
 80069f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d12f      	bne.n	8006a68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a10:	2200      	movs	r2, #0
 8006a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f88e 	bl	8006b38 <UART_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d022      	beq.n	8006a68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a36:	653b      	str	r3, [r7, #80]	; 0x50
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a40:	647b      	str	r3, [r7, #68]	; 0x44
 8006a42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e6      	bne.n	8006a22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e063      	b.n	8006b30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d149      	bne.n	8006b0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f857 	bl	8006b38 <UART_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d03c      	beq.n	8006b0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae2:	61fa      	str	r2, [r7, #28]
 8006ae4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	69b9      	ldr	r1, [r7, #24]
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	617b      	str	r3, [r7, #20]
   return(result);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e5      	bne.n	8006ac2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e012      	b.n	8006b30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3758      	adds	r7, #88	; 0x58
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	4613      	mov	r3, r2
 8006b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b48:	e049      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b50:	d045      	beq.n	8006bde <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b52:	f7fa fea9 	bl	80018a8 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d302      	bcc.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e048      	b.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d031      	beq.n	8006bde <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d110      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f839 	bl	8006c08 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2208      	movs	r2, #8
 8006b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e029      	b.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb8:	d111      	bne.n	8006bde <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f81f 	bl	8006c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e00f      	b.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4013      	ands	r3, r2
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	bf0c      	ite	eq
 8006bee:	2301      	moveq	r3, #1
 8006bf0:	2300      	movne	r3, #0
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d0a6      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b095      	sub	sp, #84	; 0x54
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e6      	bne.n	8006c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <UART_EndRxTransfer+0xc8>)
 8006c56:	4013      	ands	r3, r2
 8006c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e5      	bne.n	8006c42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d118      	bne.n	8006cb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
 8006c92:	647b      	str	r3, [r7, #68]	; 0x44
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6979      	ldr	r1, [r7, #20]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006cc4:	bf00      	nop
 8006cc6:	3754      	adds	r7, #84	; 0x54
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	effffffe 	.word	0xeffffffe

08006cd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_UARTEx_DisableFifoMode+0x16>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e027      	b.n	8006d3a <HAL_UARTEx_DisableFifoMode+0x66>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2224      	movs	r2, #36	; 0x24
 8006cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e02d      	b.n	8006dba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2224      	movs	r2, #36	; 0x24
 8006d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f850 	bl	8006e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e02d      	b.n	8006e36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2224      	movs	r2, #36	; 0x24
 8006de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0201 	bic.w	r2, r2, #1
 8006e00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f812 	bl	8006e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d108      	bne.n	8006e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e60:	e031      	b.n	8006ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e62:	2310      	movs	r3, #16
 8006e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e66:	2310      	movs	r3, #16
 8006e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	0e5b      	lsrs	r3, r3, #25
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	0f5b      	lsrs	r3, r3, #29
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	7b3a      	ldrb	r2, [r7, #12]
 8006e8e:	4911      	ldr	r1, [pc, #68]	; (8006ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8006e90:	5c8a      	ldrb	r2, [r1, r2]
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e96:	7b3a      	ldrb	r2, [r7, #12]
 8006e98:	490f      	ldr	r1, [pc, #60]	; (8006ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8006e9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	7b7a      	ldrb	r2, [r7, #13]
 8006eac:	4909      	ldr	r1, [pc, #36]	; (8006ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8006eae:	5c8a      	ldrb	r2, [r1, r2]
 8006eb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006eb4:	7b7a      	ldrb	r2, [r7, #13]
 8006eb6:	4908      	ldr	r1, [pc, #32]	; (8006ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8006eb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	080077a4 	.word	0x080077a4
 8006ed8:	080077ac 	.word	0x080077ac

08006edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006edc:	b084      	sub	sp, #16
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	f107 001c 	add.w	r0, r7, #28
 8006eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d120      	bne.n	8006f36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	4b2a      	ldr	r3, [pc, #168]	; (8006fb0 <USB_CoreInit+0xd4>)
 8006f06:	4013      	ands	r3, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d105      	bne.n	8006f2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 faac 	bl	8007488 <USB_CoreReset>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]
 8006f34:	e01a      	b.n	8006f6c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 faa0 	bl	8007488 <USB_CoreReset>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f5e:	e005      	b.n	8006f6c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d116      	bne.n	8006fa0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <USB_CoreInit+0xd8>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f043 0206 	orr.w	r2, r3, #6
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f043 0220 	orr.w	r2, r3, #32
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fac:	b004      	add	sp, #16
 8006fae:	4770      	bx	lr
 8006fb0:	ffbdffbf 	.word	0xffbdffbf
 8006fb4:	03ee0000 	.word	0x03ee0000

08006fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f023 0201 	bic.w	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ff6:	78fb      	ldrb	r3, [r7, #3]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d115      	bne.n	8007028 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007008:	2001      	movs	r0, #1
 800700a:	f7fa fc59 	bl	80018c0 <HAL_Delay>
      ms++;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fa29 	bl	800746c <USB_GetMode>
 800701a:	4603      	mov	r3, r0
 800701c:	2b01      	cmp	r3, #1
 800701e:	d01e      	beq.n	800705e <USB_SetCurrentMode+0x84>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b31      	cmp	r3, #49	; 0x31
 8007024:	d9f0      	bls.n	8007008 <USB_SetCurrentMode+0x2e>
 8007026:	e01a      	b.n	800705e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d115      	bne.n	800705a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800703a:	2001      	movs	r0, #1
 800703c:	f7fa fc40 	bl	80018c0 <HAL_Delay>
      ms++;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3301      	adds	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa10 	bl	800746c <USB_GetMode>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <USB_SetCurrentMode+0x84>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b31      	cmp	r3, #49	; 0x31
 8007056:	d9f0      	bls.n	800703a <USB_SetCurrentMode+0x60>
 8007058:	e001      	b.n	800705e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e005      	b.n	800706a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b32      	cmp	r3, #50	; 0x32
 8007062:	d101      	bne.n	8007068 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007074:	b084      	sub	sp, #16
 8007076:	b580      	push	{r7, lr}
 8007078:	b086      	sub	sp, #24
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	e009      	b.n	80070a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	3340      	adds	r3, #64	; 0x40
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	2200      	movs	r2, #0
 80070a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3301      	adds	r3, #1
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b0e      	cmp	r3, #14
 80070ac:	d9f2      	bls.n	8007094 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d11c      	bne.n	80070ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070c2:	f043 0302 	orr.w	r3, r3, #2
 80070c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	e005      	b.n	80070fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007100:	461a      	mov	r2, r3
 8007102:	2300      	movs	r3, #0
 8007104:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710c:	4619      	mov	r1, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007114:	461a      	mov	r2, r3
 8007116:	680b      	ldr	r3, [r1, #0]
 8007118:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	2b01      	cmp	r3, #1
 800711e:	d10c      	bne.n	800713a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007126:	2100      	movs	r1, #0
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f965 	bl	80073f8 <USB_SetDevSpeed>
 800712e:	e008      	b.n	8007142 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007130:	2101      	movs	r1, #1
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f960 	bl	80073f8 <USB_SetDevSpeed>
 8007138:	e003      	b.n	8007142 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800713a:	2103      	movs	r1, #3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f95b 	bl	80073f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007142:	2110      	movs	r1, #16
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f8f3 	bl	8007330 <USB_FlushTxFifo>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f91f 	bl	8007398 <USB_FlushRxFifo>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716a:	461a      	mov	r2, r3
 800716c:	2300      	movs	r3, #0
 800716e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	461a      	mov	r2, r3
 8007178:	2300      	movs	r3, #0
 800717a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007182:	461a      	mov	r2, r3
 8007184:	2300      	movs	r3, #0
 8007186:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007188:	2300      	movs	r3, #0
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	e043      	b.n	8007216 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071a4:	d118      	bne.n	80071d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b8:	461a      	mov	r2, r3
 80071ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	e013      	b.n	80071ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ce:	461a      	mov	r2, r3
 80071d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	e008      	b.n	80071ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	461a      	mov	r2, r3
 80071e6:	2300      	movs	r3, #0
 80071e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f6:	461a      	mov	r2, r3
 80071f8:	2300      	movs	r3, #0
 80071fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	461a      	mov	r2, r3
 800720a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800720e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	3301      	adds	r3, #1
 8007214:	613b      	str	r3, [r7, #16]
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	429a      	cmp	r2, r3
 800721c:	d3b7      	bcc.n	800718e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800721e:	2300      	movs	r3, #0
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	e043      	b.n	80072ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800723a:	d118      	bne.n	800726e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724e:	461a      	mov	r2, r3
 8007250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	e013      	b.n	8007280 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	461a      	mov	r2, r3
 8007266:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	e008      	b.n	8007280 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	461a      	mov	r2, r3
 800727c:	2300      	movs	r3, #0
 800727e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728c:	461a      	mov	r2, r3
 800728e:	2300      	movs	r3, #0
 8007290:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729e:	461a      	mov	r2, r3
 80072a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3301      	adds	r3, #1
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d3b7      	bcc.n	8007224 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80072d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d105      	bne.n	80072e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f043 0210 	orr.w	r2, r3, #16
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <USB_DevInit+0x2b4>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	f043 0208 	orr.w	r2, r3, #8
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007308:	2b01      	cmp	r3, #1
 800730a:	d105      	bne.n	8007318 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699a      	ldr	r2, [r3, #24]
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <USB_DevInit+0x2b8>)
 8007312:	4313      	orrs	r3, r2
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007324:	b004      	add	sp, #16
 8007326:	4770      	bx	lr
 8007328:	803c3800 	.word	0x803c3800
 800732c:	40000004 	.word	0x40000004

08007330 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a13      	ldr	r2, [pc, #76]	; (8007394 <USB_FlushTxFifo+0x64>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d901      	bls.n	8007350 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e01b      	b.n	8007388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	daf2      	bge.n	800733e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	019b      	lsls	r3, r3, #6
 8007360:	f043 0220 	orr.w	r2, r3, #32
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a08      	ldr	r2, [pc, #32]	; (8007394 <USB_FlushTxFifo+0x64>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d901      	bls.n	800737a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e006      	b.n	8007388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b20      	cmp	r3, #32
 8007384:	d0f0      	beq.n	8007368 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	00030d40 	.word	0x00030d40

08007398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3301      	adds	r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4a11      	ldr	r2, [pc, #68]	; (80073f4 <USB_FlushRxFifo+0x5c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d901      	bls.n	80073b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e018      	b.n	80073e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	daf2      	bge.n	80073a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2210      	movs	r2, #16
 80073c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4a08      	ldr	r2, [pc, #32]	; (80073f4 <USB_FlushRxFifo+0x5c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d901      	bls.n	80073da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e006      	b.n	80073e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f003 0310 	and.w	r3, r3, #16
 80073e2:	2b10      	cmp	r3, #16
 80073e4:	d0f0      	beq.n	80073c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	00030d40 	.word	0x00030d40

080073f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	68f9      	ldr	r1, [r7, #12]
 8007414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007418:	4313      	orrs	r3, r2
 800741a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007444:	f023 0303 	bic.w	r3, r3, #3
 8007448:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007458:	f043 0302 	orr.w	r3, r3, #2
 800745c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	f003 0301 	and.w	r3, r3, #1
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4a13      	ldr	r2, [pc, #76]	; (80074ec <USB_CoreReset+0x64>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d901      	bls.n	80074a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e01b      	b.n	80074de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	daf2      	bge.n	8007494 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f043 0201 	orr.w	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3301      	adds	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4a09      	ldr	r2, [pc, #36]	; (80074ec <USB_CoreReset+0x64>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d901      	bls.n	80074d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e006      	b.n	80074de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d0f0      	beq.n	80074be <USB_CoreReset+0x36>

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	00030d40 	.word	0x00030d40

080074f0 <__cxa_pure_virtual>:
 80074f0:	b508      	push	{r3, lr}
 80074f2:	f000 f80d 	bl	8007510 <_ZSt9terminatev>

080074f6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80074f6:	b508      	push	{r3, lr}
 80074f8:	4780      	blx	r0
 80074fa:	f000 f80e 	bl	800751a <abort>
	...

08007500 <_ZSt13get_terminatev>:
 8007500:	4b02      	ldr	r3, [pc, #8]	; (800750c <_ZSt13get_terminatev+0xc>)
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	f3bf 8f5b 	dmb	ish
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	24000010 	.word	0x24000010

08007510 <_ZSt9terminatev>:
 8007510:	b508      	push	{r3, lr}
 8007512:	f7ff fff5 	bl	8007500 <_ZSt13get_terminatev>
 8007516:	f7ff ffee 	bl	80074f6 <_ZN10__cxxabiv111__terminateEPFvvE>

0800751a <abort>:
 800751a:	b508      	push	{r3, lr}
 800751c:	2006      	movs	r0, #6
 800751e:	f000 f86b 	bl	80075f8 <raise>
 8007522:	2001      	movs	r0, #1
 8007524:	f7fa f8ef 	bl	8001706 <_exit>

08007528 <__errno>:
 8007528:	4b01      	ldr	r3, [pc, #4]	; (8007530 <__errno+0x8>)
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	24000014 	.word	0x24000014

08007534 <__libc_init_array>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	4d0d      	ldr	r5, [pc, #52]	; (800756c <__libc_init_array+0x38>)
 8007538:	4c0d      	ldr	r4, [pc, #52]	; (8007570 <__libc_init_array+0x3c>)
 800753a:	1b64      	subs	r4, r4, r5
 800753c:	10a4      	asrs	r4, r4, #2
 800753e:	2600      	movs	r6, #0
 8007540:	42a6      	cmp	r6, r4
 8007542:	d109      	bne.n	8007558 <__libc_init_array+0x24>
 8007544:	4d0b      	ldr	r5, [pc, #44]	; (8007574 <__libc_init_array+0x40>)
 8007546:	4c0c      	ldr	r4, [pc, #48]	; (8007578 <__libc_init_array+0x44>)
 8007548:	f000 f872 	bl	8007630 <_init>
 800754c:	1b64      	subs	r4, r4, r5
 800754e:	10a4      	asrs	r4, r4, #2
 8007550:	2600      	movs	r6, #0
 8007552:	42a6      	cmp	r6, r4
 8007554:	d105      	bne.n	8007562 <__libc_init_array+0x2e>
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	f855 3b04 	ldr.w	r3, [r5], #4
 800755c:	4798      	blx	r3
 800755e:	3601      	adds	r6, #1
 8007560:	e7ee      	b.n	8007540 <__libc_init_array+0xc>
 8007562:	f855 3b04 	ldr.w	r3, [r5], #4
 8007566:	4798      	blx	r3
 8007568:	3601      	adds	r6, #1
 800756a:	e7f2      	b.n	8007552 <__libc_init_array+0x1e>
 800756c:	080077bc 	.word	0x080077bc
 8007570:	080077bc 	.word	0x080077bc
 8007574:	080077bc 	.word	0x080077bc
 8007578:	080077c4 	.word	0x080077c4

0800757c <memcpy>:
 800757c:	440a      	add	r2, r1
 800757e:	4291      	cmp	r1, r2
 8007580:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007584:	d100      	bne.n	8007588 <memcpy+0xc>
 8007586:	4770      	bx	lr
 8007588:	b510      	push	{r4, lr}
 800758a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800758e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007592:	4291      	cmp	r1, r2
 8007594:	d1f9      	bne.n	800758a <memcpy+0xe>
 8007596:	bd10      	pop	{r4, pc}

08007598 <memset>:
 8007598:	4402      	add	r2, r0
 800759a:	4603      	mov	r3, r0
 800759c:	4293      	cmp	r3, r2
 800759e:	d100      	bne.n	80075a2 <memset+0xa>
 80075a0:	4770      	bx	lr
 80075a2:	f803 1b01 	strb.w	r1, [r3], #1
 80075a6:	e7f9      	b.n	800759c <memset+0x4>

080075a8 <_raise_r>:
 80075a8:	291f      	cmp	r1, #31
 80075aa:	b538      	push	{r3, r4, r5, lr}
 80075ac:	4604      	mov	r4, r0
 80075ae:	460d      	mov	r5, r1
 80075b0:	d904      	bls.n	80075bc <_raise_r+0x14>
 80075b2:	2316      	movs	r3, #22
 80075b4:	6003      	str	r3, [r0, #0]
 80075b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075be:	b112      	cbz	r2, 80075c6 <_raise_r+0x1e>
 80075c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075c4:	b94b      	cbnz	r3, 80075da <_raise_r+0x32>
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 f830 	bl	800762c <_getpid_r>
 80075cc:	462a      	mov	r2, r5
 80075ce:	4601      	mov	r1, r0
 80075d0:	4620      	mov	r0, r4
 80075d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075d6:	f000 b817 	b.w	8007608 <_kill_r>
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d00a      	beq.n	80075f4 <_raise_r+0x4c>
 80075de:	1c59      	adds	r1, r3, #1
 80075e0:	d103      	bne.n	80075ea <_raise_r+0x42>
 80075e2:	2316      	movs	r3, #22
 80075e4:	6003      	str	r3, [r0, #0]
 80075e6:	2001      	movs	r0, #1
 80075e8:	e7e7      	b.n	80075ba <_raise_r+0x12>
 80075ea:	2400      	movs	r4, #0
 80075ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075f0:	4628      	mov	r0, r5
 80075f2:	4798      	blx	r3
 80075f4:	2000      	movs	r0, #0
 80075f6:	e7e0      	b.n	80075ba <_raise_r+0x12>

080075f8 <raise>:
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <raise+0xc>)
 80075fa:	4601      	mov	r1, r0
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	f7ff bfd3 	b.w	80075a8 <_raise_r>
 8007602:	bf00      	nop
 8007604:	24000014 	.word	0x24000014

08007608 <_kill_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4d07      	ldr	r5, [pc, #28]	; (8007628 <_kill_r+0x20>)
 800760c:	2300      	movs	r3, #0
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	602b      	str	r3, [r5, #0]
 8007616:	f7fa f866 	bl	80016e6 <_kill>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	d102      	bne.n	8007624 <_kill_r+0x1c>
 800761e:	682b      	ldr	r3, [r5, #0]
 8007620:	b103      	cbz	r3, 8007624 <_kill_r+0x1c>
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	bd38      	pop	{r3, r4, r5, pc}
 8007626:	bf00      	nop
 8007628:	240006e8 	.word	0x240006e8

0800762c <_getpid_r>:
 800762c:	f7fa b853 	b.w	80016d6 <_getpid>

08007630 <_init>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr

0800763c <_fini>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr
