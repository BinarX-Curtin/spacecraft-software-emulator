
binarX_software_Emulator_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007374  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800776c  0800776c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007774  08007774  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08007780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  24000078  080077f8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240006ec  080077f8  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f90e  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af8  00000000  00000000  0003f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  000434b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  000446c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f471  00000000  00000000  000457a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e46  00000000  00000000  00084c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187023  00000000  00000000  0009da5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00224a82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e74  00000000  00000000  00224ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080075f4 	.word	0x080075f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	080075f4 	.word	0x080075f4

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <SystemInit+0xfc>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <SystemInit+0xfc>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0xfc>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <SystemInit+0xfc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <SystemInit+0x100>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	2b06      	cmp	r3, #6
 8000616:	d807      	bhi.n	8000628 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <SystemInit+0x100>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x100>)
 8000622:	f043 0307 	orr.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemInit+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemInit+0x104>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x104>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemInit+0x104>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	492c      	ldr	r1, [pc, #176]	; (80006f0 <SystemInit+0x104>)
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemInit+0x108>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemInit+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemInit+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <SystemInit+0x100>)
 800065c:	f043 0307 	orr.w	r3, r3, #7
 8000660:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemInit+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemInit+0x104>)
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemInit+0x10c>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemInit+0x104>)
 800067c:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <SystemInit+0x110>)
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <SystemInit+0x104>)
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <SystemInit+0x114>)
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <SystemInit+0x104>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <SystemInit+0x114>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <SystemInit+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x104>)
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <SystemInit+0x114>)
 800069c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <SystemInit+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x104>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <SystemInit+0x104>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x118>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <SystemInit+0x118>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x11c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x120>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ce:	d202      	bcs.n	80006d6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0x124>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SystemInit+0x128>)
 80006d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006dc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	52002000 	.word	0x52002000
 80006f0:	58024400 	.word	0x58024400
 80006f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f8:	02020200 	.word	0x02020200
 80006fc:	01ff0000 	.word	0x01ff0000
 8000700:	01010280 	.word	0x01010280
 8000704:	580000c0 	.word	0x580000c0
 8000708:	5c001000 	.word	0x5c001000
 800070c:	ffff0000 	.word	0xffff0000
 8000710:	51008108 	.word	0x51008108
 8000714:	52004000 	.word	0x52004000

08000718 <_ZN15binarx_emulator14BinarXEmulator3RunEv>:

#include <string.h>

namespace binarx_emulator {

void BinarXEmulator::Run() {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if (!button_pressed_) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7c1b      	ldrb	r3, [r3, #16]
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d133      	bne.n	8000796 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x7e>
    return;
  }
  BinarXEmulator::RunStartInfo();
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f8fe 	bl	8000930 <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv>

  // Need to start a timer
  uint32_t emulator_timeout =
      time_controller_->GetTicks() + kWaitForPayloadMaxTime;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68da      	ldr	r2, [r3, #12]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3304      	adds	r3, #4
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4610      	mov	r0, r2
 8000744:	4798      	blx	r3
 8000746:	4602      	mov	r2, r0
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x88>)
 800074a:	4413      	add	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]

  while (emulator_timeout > time_controller_->GetTicks() &&
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	68da      	ldr	r2, [r3, #12]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3304      	adds	r3, #4
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4610      	mov	r0, r2
 800075e:	4798      	blx	r3
 8000760:	4602      	mov	r2, r0
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4293      	cmp	r3, r2
 8000766:	d905      	bls.n	8000774 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x5c>
         payload_status_ != PayloadDataStatus::kTrasferCompleted) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	695b      	ldr	r3, [r3, #20]
  while (emulator_timeout > time_controller_->GetTicks() &&
 800076c:	2b02      	cmp	r3, #2
 800076e:	d001      	beq.n	8000774 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x5c>
 8000770:	2301      	movs	r3, #1
 8000772:	e000      	b.n	8000776 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x5e>
 8000774:	2300      	movs	r3, #0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x6a>
    PayloadCommunicationHandler();
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f812 	bl	80007a4 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv>
  while (emulator_timeout > time_controller_->GetTicks() &&
 8000780:	e7e5      	b.n	800074e <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x36>
  }


  button_pressed_ = false;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	741a      	strb	r2, [r3, #16]
  payload_status_ = PayloadDataStatus::kWaitingForPayload;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]

  BinarXEmulator::RunEndInfo();
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f8fc 	bl	800098c <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv>
 8000794:	e000      	b.n	8000798 <_ZN15binarx_emulator14BinarXEmulator3RunEv+0x80>
    return;
 8000796:	bf00      	nop
}
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	0001d4c0 	.word	0x0001d4c0

080007a4 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv>:

void BinarXEmulator::PayloadCommunicationHandler() {
 80007a4:	b5b0      	push	{r4, r5, r7, lr}
 80007a6:	b0c8      	sub	sp, #288	; 0x120
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007b2:	6018      	str	r0, [r3, #0]
  // Only run once the payload is ready
  if (payload_status_ != PayloadDataStatus::kPayloadReady) {
 80007b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d17b      	bne.n	80008bc <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x118>
    return;
  }

  // Turn on the LED to demostrate SPI success
  gpio_controller_->SetHigh(binarx_gpio_interface::GpioSelector::GreenLed);
 80007c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	689a      	ldr	r2, [r3, #8]
 80007d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2102      	movs	r1, #2
 80007e2:	4610      	mov	r0, r2
 80007e4:	4798      	blx	r3

  char error_msg[] =
 80007e6:	4a38      	ldr	r2, [pc, #224]	; (80008c8 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x124>)
 80007e8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007ec:	4611      	mov	r1, r2
 80007ee:	224d      	movs	r2, #77	; 0x4d
 80007f0:	4618      	mov	r0, r3
 80007f2:	f006 fea5 	bl	8007540 <memcpy>
      "Emulator \n ";

  // Trigger the Spi Receive message
  uint8_t receive_buffer[kMaxPayloadDataLength];
  binarx_serial_interface::SerialStatus serial_status =
      payload_communication_->Receive(receive_buffer, kMaxPayloadDataLength,
 80007f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000806:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681b      	ldr	r3, [r3, #0]
                                      kDefaultCommunicationDelay);
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3304      	adds	r3, #4
 8000812:	681c      	ldr	r4, [r3, #0]
      payload_communication_->Receive(receive_buffer, kMaxPayloadDataLength,
 8000814:	f107 0108 	add.w	r1, r7, #8
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x128>)
 800081a:	22c8      	movs	r2, #200	; 0xc8
 800081c:	47a0      	blx	r4
 800081e:	4603      	mov	r3, r0
 8000820:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  // Check the status of the SPI transaction
  if (serial_status == binarx_serial_interface::SerialStatus::Success) {
 8000824:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000828:	2b00      	cmp	r3, #0
 800082a:	d113      	bne.n	8000854 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0xb0>
    // Send the data over UART if SPI data was received succesfully
    computer_communication_->Transmit(receive_buffer, sizeof(receive_buffer),
 800082c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000830:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6858      	ldr	r0, [r3, #4]
 8000838:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800083c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
                                      kDefaultCommunicationDelay);
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681c      	ldr	r4, [r3, #0]
    computer_communication_->Transmit(receive_buffer, sizeof(receive_buffer),
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x128>)
 800084e:	22c8      	movs	r2, #200	; 0xc8
 8000850:	47a0      	blx	r4
 8000852:	e019      	b.n	8000888 <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0xe4>
  } else {
    // Otherwise, copy error message to receive buffer
    computer_communication_->Transmit((uint8_t *)error_msg, strlen(error_msg),
 8000854:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000858:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685d      	ldr	r5, [r3, #4]
 8000860:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000864:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
                                      kDefaultCommunicationDelay);
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681c      	ldr	r4, [r3, #0]
    computer_communication_->Transmit((uint8_t *)error_msg, strlen(error_msg),
 8000870:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fd2f 	bl	80002d8 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x128>)
 8000884:	4628      	mov	r0, r5
 8000886:	47a0      	blx	r4
  }
  // // Let the main runner know that the payload has sent the information
  payload_status_ = PayloadDataStatus::kTrasferCompleted;
 8000888:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800088c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2202      	movs	r2, #2
 8000894:	615a      	str	r2, [r3, #20]

  // Make sure the Green LED is off
  gpio_controller_->SetLow(binarx_gpio_interface::GpioSelector::GreenLed);
 8000896:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800089a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	689a      	ldr	r2, [r3, #8]
 80008a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3304      	adds	r3, #4
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2102      	movs	r1, #2
 80008b6:	4610      	mov	r0, r2
 80008b8:	4798      	blx	r3
 80008ba:	e000      	b.n	80008be <_ZN15binarx_emulator14BinarXEmulator27PayloadCommunicationHandlerEv+0x11a>
    return;
 80008bc:	bf00      	nop
}
 80008be:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bdb0      	pop	{r4, r5, r7, pc}
 80008c6:	bf00      	nop
 80008c8:	0800760c 	.word	0x0800760c
 80008cc:	0001d4c0 	.word	0x0001d4c0

080008d0 <_ZN15binarx_emulator14BinarXEmulator4InitEv>:

void BinarXEmulator::Init() {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  // turn on Yellow LED
  gpio_controller_->SetHigh(binarx_gpio_interface::GpioSelector::YellowLed);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	4610      	mov	r0, r2
 80008e8:	4798      	blx	r3
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_ZN15binarx_emulator14BinarXEmulator28PayloadCommunicationCallbackEv>:

void BinarXEmulator::PayloadCommunicationCallback() {
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	if(payload_status_==PayloadDataStatus::kWaitingForPayload){
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d102      	bne.n	8000908 <_ZN15binarx_emulator14BinarXEmulator28PayloadCommunicationCallbackEv+0x16>
		payload_status_ = PayloadDataStatus::kPayloadReady;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2201      	movs	r2, #1
 8000906:	615a      	str	r2, [r3, #20]
	}
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_ZN15binarx_emulator14BinarXEmulator19ButtonPressCallbackEv>:
void BinarXEmulator::ButtonPressCallback() { button_pressed_ = true; }
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2201      	movs	r2, #1
 8000920:	741a      	strb	r2, [r3, #16]
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv>:

void BinarXEmulator::RunStartInfo() {
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b090      	sub	sp, #64	; 0x40
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  // turn on red LED
  gpio_controller_->SetHigh(binarx_gpio_interface::GpioSelector::RedLed);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2103      	movs	r1, #3
 8000946:	4610      	mov	r0, r2
 8000948:	4798      	blx	r3
  // Print a message to the Serial Monitor to inform the students
  uint8_t info_msg[] =
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv+0x54>)
 800094c:	f107 0408 	add.w	r4, r7, #8
 8000950:	461d      	mov	r5, r3
 8000952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000962:	e884 0003 	stmia.w	r4, {r0, r1}
      "INFO: Button pressed and waiting for SPI transmission \n";
  computer_communication_->Transmit(info_msg, sizeof(info_msg),
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6858      	ldr	r0, [r3, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	685b      	ldr	r3, [r3, #4]
                                    kDefaultCommunicationDelay);
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681c      	ldr	r4, [r3, #0]
  computer_communication_->Transmit(info_msg, sizeof(info_msg),
 8000972:	f107 0108 	add.w	r1, r7, #8
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <_ZN15binarx_emulator14BinarXEmulator12RunStartInfoEv+0x58>)
 8000978:	2238      	movs	r2, #56	; 0x38
 800097a:	47a0      	blx	r4
}
 800097c:	bf00      	nop
 800097e:	3740      	adds	r7, #64	; 0x40
 8000980:	46bd      	mov	sp, r7
 8000982:	bdb0      	pop	{r4, r5, r7, pc}
 8000984:	0800765c 	.word	0x0800765c
 8000988:	0001d4c0 	.word	0x0001d4c0

0800098c <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv>:

void BinarXEmulator::RunEndInfo() {
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  // Print a message to the Serial Monitor to inform the students
  uint8_t info_msg[] = "INFO: Turning emulator off \n";
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv+0x50>)
 8000996:	f107 0408 	add.w	r4, r7, #8
 800099a:	461d      	mov	r5, r3
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009a4:	c407      	stmia	r4!, {r0, r1, r2}
 80009a6:	7023      	strb	r3, [r4, #0]
  computer_communication_->Transmit(info_msg, sizeof(info_msg),
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6858      	ldr	r0, [r3, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
                                    kDefaultCommunicationDelay);
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681c      	ldr	r4, [r3, #0]
  computer_communication_->Transmit(info_msg, sizeof(info_msg),
 80009b4:	f107 0108 	add.w	r1, r7, #8
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <_ZN15binarx_emulator14BinarXEmulator10RunEndInfoEv+0x54>)
 80009ba:	221d      	movs	r2, #29
 80009bc:	47a0      	blx	r4

  // turn on red LED
  gpio_controller_->SetLow(binarx_gpio_interface::GpioSelector::RedLed);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3304      	adds	r3, #4
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2103      	movs	r1, #3
 80009ce:	4610      	mov	r0, r2
 80009d0:	4798      	blx	r3
}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	; 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bdb0      	pop	{r4, r5, r7, pc}
 80009da:	bf00      	nop
 80009dc:	08007694 	.word	0x08007694
 80009e0:	0001d4c0 	.word	0x0001d4c0

080009e4 <_ZN16binarx_gpio_impl8GpioImpl7SetHighEN21binarx_gpio_interface12GpioSelectorE>:
#include "gpio_interface.h"
#include "main.h"

namespace binarx_gpio_impl {

void GpioImpl::SetHigh(binarx_gpio_interface::GpioSelector gpio) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(GetPort(gpio), GetPin(gpio), GPIO_PIN_SET);
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	4619      	mov	r1, r3
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 f895 	bl	8000b24 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 80009fa:	4604      	mov	r4, r0
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	4619      	mov	r1, r3
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 f871 	bl	8000ae8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f001 fa41 	bl	8001e94 <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}

08000a1a <_ZN16binarx_gpio_impl8GpioImpl6SetLowEN21binarx_gpio_interface12GpioSelectorE>:
void GpioImpl::SetLow(binarx_gpio_interface::GpioSelector gpio) {
 8000a1a:	b590      	push	{r4, r7, lr}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(GetPort(gpio), GetPin(gpio), GPIO_PIN_RESET);
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f87a 	bl	8000b24 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000a30:	4604      	mov	r4, r0
 8000a32:	78fb      	ldrb	r3, [r7, #3]
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f856 	bl	8000ae8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4620      	mov	r0, r4
 8000a44:	f001 fa26 	bl	8001e94 <HAL_GPIO_WritePin>
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}

08000a50 <_ZN16binarx_gpio_impl8GpioImpl9TogglePinEN21binarx_gpio_interface12GpioSelectorE>:
void GpioImpl::TogglePin(binarx_gpio_interface::GpioSelector gpio) {
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_TogglePin(GetPort(gpio), GetPin(gpio));
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f85f 	bl	8000b24 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000a66:	4604      	mov	r4, r0
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 f83b 	bl	8000ae8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4620      	mov	r0, r4
 8000a78:	f001 fa25 	bl	8001ec6 <HAL_GPIO_TogglePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd90      	pop	{r4, r7, pc}

08000a84 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm>:
binarx_gpio_interface::GpioStatus GpioImpl::WaitForInterrupt(
    binarx_gpio_interface::GpioSelector gpio, uint32_t timeout) {
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	72fb      	strb	r3, [r7, #11]
  for (uint32_t i = timeout; i > 0; i--) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d020      	beq.n	8000ade <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x5a>
    if (HAL_GPIO_ReadPin(GetPort(gpio), GetPin(gpio)) == GPIO_PIN_SET) {
 8000a9c:	7afb      	ldrb	r3, [r7, #11]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f000 f83f 	bl	8000b24 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	7afb      	ldrb	r3, [r7, #11]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 f81b 	bl	8000ae8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	f001 f9d4 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2301      	moveq	r3, #1
 8000ac4:	2300      	movne	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x4c>
      return binarx_gpio_interface::GpioStatus::Success;
 8000acc:	2300      	movs	r3, #0
 8000ace:	e007      	b.n	8000ae0 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x5c>
    }
    HAL_Delay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f000 fed7 	bl	8001884 <HAL_Delay>
  for (uint32_t i = timeout; i > 0; i--) {
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e7db      	b.n	8000a96 <_ZN16binarx_gpio_impl8GpioImpl16WaitForInterruptEN21binarx_gpio_interface12GpioSelectorEm+0x12>
  }
  return binarx_gpio_interface::GpioStatus::Timeout;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	371c      	adds	r7, #28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}

08000ae8 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE>:

uint16_t GpioImpl::GetPin(binarx_gpio_interface::GpioSelector gpio) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
  switch (gpio) {
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d00a      	beq.n	8000b10 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x28>
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	dc0b      	bgt.n	8000b16 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d002      	beq.n	8000b08 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x20>
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d002      	beq.n	8000b0c <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x24>
 8000b06:	e006      	b.n	8000b16 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
    case binarx_gpio_interface::GpioSelector::YellowLed:
      return LD2_Pin;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e004      	b.n	8000b16 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
    case binarx_gpio_interface::GpioSelector::GreenLed:
      return LD1_Pin;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e002      	b.n	8000b16 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
    case binarx_gpio_interface::GpioSelector::RedLed:
      return LD3_Pin;
 8000b10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b14:	e7ff      	b.n	8000b16 <_ZN16binarx_gpio_impl8GpioImpl6GetPinEN21binarx_gpio_interface12GpioSelectorE+0x2e>
  }
};
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE>:
GPIO_TypeDef* GpioImpl::GetPort(binarx_gpio_interface::GpioSelector gpio) {
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
  switch (gpio) {
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d00a      	beq.n	8000b4c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x28>
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	dc0a      	bgt.n	8000b50 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d002      	beq.n	8000b44 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x20>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d002      	beq.n	8000b48 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x24>
 8000b42:	e005      	b.n	8000b50 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
    case binarx_gpio_interface::GpioSelector::YellowLed:
      return LD2_GPIO_Port;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x38>)
 8000b46:	e003      	b.n	8000b50 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
    case binarx_gpio_interface::GpioSelector::GreenLed:
      return LD1_GPIO_Port;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x3c>)
 8000b4a:	e001      	b.n	8000b50 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
    case binarx_gpio_interface::GpioSelector::RedLed:
      return LD3_GPIO_Port;
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x3c>)
 8000b4e:	e7ff      	b.n	8000b50 <_ZN16binarx_gpio_impl8GpioImpl7GetPortEN21binarx_gpio_interface12GpioSelectorE+0x2c>
  }
};
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	58021000 	.word	0x58021000
 8000b60:	58020400 	.word	0x58020400

08000b64 <_ZN21binarx_gpio_interface13GpioInterfaceC1Ev>:

/**
 * @brief The GPIO interface to allow for dependency injection and testing
 *
 */
class GpioInterface {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <_ZN21binarx_gpio_interface13GpioInterfaceC1Ev+0x1c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	08007704 	.word	0x08007704

08000b84 <_ZN16binarx_gpio_impl8GpioImplC1Ev>:

namespace binarx_gpio_impl {

class GpioImpl : public binarx_gpio_interface::GpioInterface {
 public:
  GpioImpl(){};
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ffe8 	bl	8000b64 <_ZN21binarx_gpio_interface13GpioInterfaceC1Ev>
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <_ZN16binarx_gpio_impl8GpioImplC1Ev+0x20>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	080076cc 	.word	0x080076cc

08000ba8 <_ZN21binarx_time_interface13TimeInterfaceC1Ev>:
#pragma once
#include <stdint.h>

namespace binarx_time_interface {

class TimeInterface {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <_ZN21binarx_time_interface13TimeInterfaceC1Ev+0x1c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	080076f4 	.word	0x080076f4

08000bc8 <_ZN16binarx_time_impl8TimeImplC1Ev>:

namespace binarx_time_impl {

class TimeImpl : public binarx_time_interface::TimeInterface {
 public:
   TimeImpl(){};
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ffe8 	bl	8000ba8 <_ZN21binarx_time_interface13TimeInterfaceC1Ev>
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <_ZN16binarx_time_impl8TimeImplC1Ev+0x20>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	0800773c 	.word	0x0800773c

08000bec <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev>:
/**
 * @brief The Serial Comunication interface to allow for dependency injection
 * and testing
 *
 */
class SerialCommunicationInterface {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev+0x1c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	080076e4 	.word	0x080076e4

08000c0c <_ZN18binarx_serial_impl7SpiImplC1Ev>:

namespace binarx_serial_impl {

class SpiImpl : public binarx_serial_interface::SerialCommunicationInterface {
 public:
  SpiImpl(){};
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ffe8 	bl	8000bec <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev>
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <_ZN18binarx_serial_impl7SpiImplC1Ev+0x20>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	0800772c 	.word	0x0800772c

08000c30 <_ZN18binarx_serial_impl8UartImplC1Ev>:
                                                uint32_t timeout);
};

class UartImpl : public binarx_serial_interface::SerialCommunicationInterface {
 public:
  UartImpl(){};
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ffd6 	bl	8000bec <_ZN23binarx_serial_interface28SerialCommunicationInterfaceC1Ev>
 8000c40:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <_ZN18binarx_serial_impl8UartImplC1Ev+0x20>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	0800771c 	.word	0x0800771c

08000c54 <_ZN15binarx_emulator14BinarXEmulatorC1EPN23binarx_serial_interface28SerialCommunicationInterfaceES3_PN21binarx_gpio_interface13GpioInterfaceEPN21binarx_time_interface13TimeInterfaceE>:
   *
   * @param spi_communication Pointer to the SPI implementation object
   * @param uart_communication Pointer to the UART implementation object
   * @param gpio_object Pointer to the GPIO implementation object
   */
  BinarXEmulator(binarx_serial_interface::SerialCommunicationInterface*
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	603b      	str	r3, [r7, #0]
      : payload_communication_(payload_communication),
        computer_communication_(computer_communication),
        gpio_controller_(gpio_object),
        time_controller_(time_object),
        button_pressed_(false),
        payload_status_(PayloadDataStatus::kWaitingForPayload){};
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	68ba      	ldr	r2, [r7, #8]
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	741a      	strb	r2, [r3, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <HAL_GPIO_EXTI_Callback>:
  binarx_time_impl::TimeImpl time_controller = binarx_time_impl::TimeImpl();
  binarx_emulator::BinarXEmulator emulator =  binarx_emulator::BinarXEmulator(&spi_controller, &uart_controller, &gpio_controller, &time_controller);



  extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	2b10      	cmp	r3, #16
 8000ca2:	d006      	beq.n	8000cb2 <HAL_GPIO_EXTI_Callback+0x1e>
 8000ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca8:	d107      	bne.n	8000cba <HAL_GPIO_EXTI_Callback+0x26>
      case B1_Pin:
        emulator.ButtonPressCallback();
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000cac:	f7ff fe32 	bl	8000914 <_ZN15binarx_emulator14BinarXEmulator19ButtonPressCallbackEv>
        break;
 8000cb0:	e004      	b.n	8000cbc <HAL_GPIO_EXTI_Callback+0x28>
      case Payload_Pin:
        emulator.PayloadCommunicationCallback();
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000cb4:	f7ff fe1d 	bl	80008f2 <_ZN15binarx_emulator14BinarXEmulator28PayloadCommunicationCallbackEv>
        break;
 8000cb8:	e000      	b.n	8000cbc <HAL_GPIO_EXTI_Callback+0x28>
      default:
        break;
 8000cba:	bf00      	nop
    }
  }
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	240006cc 	.word	0x240006cc

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
//  }
///* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f000 fd47 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f829 	bl	8000d28 <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <main+0x58>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <main+0x58>)
 8000cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <main+0x58>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f001 f91b 	bl	8001f30 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f001 f931 	bl	8001f64 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 f991 	bl	8001028 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000d06:	f000 f8f9 	bl	8000efc <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000d0a:	f000 f957 	bl	8000fbc <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_SPI1_Init();
 8000d0e:	f000 f899 	bl	8000e44 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  emulator.Init();
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <main+0x5c>)
 8000d14:	f7ff fddc 	bl	80008d0 <_ZN15binarx_emulator14BinarXEmulator4InitEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  emulator.Run();
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <main+0x5c>)
 8000d1a:	f7ff fcfd 	bl	8000718 <_ZN15binarx_emulator14BinarXEmulator3RunEv>
 8000d1e:	e7fb      	b.n	8000d18 <main+0x50>
 8000d20:	58024400 	.word	0x58024400
 8000d24:	240006cc 	.word	0x240006cc

08000d28 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09c      	sub	sp, #112	; 0x70
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	224c      	movs	r2, #76	; 0x4c
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f006 fc10 	bl	800755c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2220      	movs	r2, #32
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f006 fc0a 	bl	800755c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d48:	2004      	movs	r0, #4
 8000d4a:	f001 fa67 	bl	800221c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <_Z18SystemClock_Configv+0x114>)
 8000d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d56:	4a39      	ldr	r2, [pc, #228]	; (8000e3c <_Z18SystemClock_Configv+0x114>)
 8000d58:	f023 0301 	bic.w	r3, r3, #1
 8000d5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d5e:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <_Z18SystemClock_Configv+0x114>)
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <_Z18SystemClock_Configv+0x118>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d70:	4a33      	ldr	r2, [pc, #204]	; (8000e40 <_Z18SystemClock_Configv+0x118>)
 8000d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <_Z18SystemClock_Configv+0x118>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d84:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <_Z18SystemClock_Configv+0x118>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d000      	beq.n	8000d9e <_Z18SystemClock_Configv+0x76>
 8000d9c:	e7f2      	b.n	8000d84 <_Z18SystemClock_Configv+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000da2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dac:	2340      	movs	r3, #64	; 0x40
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db4:	2302      	movs	r3, #2
 8000db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000dbc:	2318      	movs	r3, #24
 8000dbe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dcc:	230c      	movs	r3, #12
 8000dce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fa87 	bl	80022f0 <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	bf14      	ite	ne
 8000de8:	2301      	movne	r3, #1
 8000dea:	2300      	moveq	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8000df2:	f000 f9df 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	233f      	movs	r3, #63	; 0x3f
 8000df8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fec2 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bf14      	ite	ne
 8000e26:	2301      	movne	r3, #1
 8000e28:	2300      	moveq	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 8000e30:	f000 f9c0 	bl	80011b4 <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3770      	adds	r7, #112	; 0x70
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	58000400 	.word	0x58000400
 8000e40:	58024800 	.word	0x58024800

08000e44 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e48:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <_ZL12MX_SPI1_Initv+0xb4>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e4e:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e56:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e5c:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e5e:	2207      	movs	r2, #7
 8000e60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e78:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000e7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <_ZL12MX_SPI1_Initv+0xb0>)
 8000ed6:	f004 f81d 	bl	8004f14 <HAL_SPI_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <_ZL12MX_SPI1_Initv+0xaa>
  {
    Error_Handler();
 8000eea:	f000 f963 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	24000094 	.word	0x24000094
 8000ef8:	40013000 	.word	0x40013000

08000efc <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f02:	4a2d      	ldr	r2, [pc, #180]	; (8000fb8 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f44:	481b      	ldr	r0, [pc, #108]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f46:	f004 fd7e 	bl	8005a46 <HAL_UART_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf14      	ite	ne
 8000f50:	2301      	movne	r3, #1
 8000f52:	2300      	moveq	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000f5a:	f000 f92b 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f62:	f005 fed2 	bl	8006d0a <HAL_UARTEx_SetTxFifoThreshold>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bf14      	ite	ne
 8000f6c:	2301      	movne	r3, #1
 8000f6e:	2300      	moveq	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000f76:	f000 f91d 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f7e:	f005 ff02 	bl	8006d86 <HAL_UARTEx_SetRxFifoThreshold>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	bf14      	ite	ne
 8000f88:	2301      	movne	r3, #1
 8000f8a:	2300      	moveq	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000f92:	f000 f90f 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f98:	f005 fe7e 	bl	8006c98 <HAL_UARTEx_DisableFifoMode>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf14      	ite	ne
 8000fa2:	2301      	movne	r3, #1
 8000fa4:	2300      	moveq	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000fac:	f000 f902 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2400011c 	.word	0x2400011c
 8000fb8:	40004800 	.word	0x40004800

08000fbc <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fc2:	4a18      	ldr	r2, [pc, #96]	; (8001024 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fc8:	2209      	movs	r2, #9
 8000fca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001004:	f000 ffc2 	bl	8001f8c <HAL_PCD_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf14      	ite	ne
 800100e:	2301      	movne	r3, #1
 8001010:	2300      	moveq	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8001018:	f000 f8cc 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	240001b0 	.word	0x240001b0
 8001024:	40080000 	.word	0x40080000

08001028 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b58      	ldr	r3, [pc, #352]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001044:	4a56      	ldr	r2, [pc, #344]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104e:	4b54      	ldr	r3, [pc, #336]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105c:	4b50      	ldr	r3, [pc, #320]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001062:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106c:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b49      	ldr	r3, [pc, #292]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001080:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a8:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	4a38      	ldr	r2, [pc, #224]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c6:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <_ZL12MX_GPIO_Initv+0x178>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f244 0101 	movw	r1, #16385	; 0x4001
 80010f8:	482a      	ldr	r0, [pc, #168]	; (80011a4 <_ZL12MX_GPIO_Initv+0x17c>)
 80010fa:	f000 fecb 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2102      	movs	r1, #2
 8001102:	4829      	ldr	r0, [pc, #164]	; (80011a8 <_ZL12MX_GPIO_Initv+0x180>)
 8001104:	f000 fec6 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4823      	ldr	r0, [pc, #140]	; (80011ac <_ZL12MX_GPIO_Initv+0x184>)
 8001120:	f000 fcf0 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Payload_Pin */
  GPIO_InitStruct.Pin = Payload_Pin;
 8001124:	2310      	movs	r3, #16
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001128:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Payload_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	481d      	ldr	r0, [pc, #116]	; (80011b0 <_ZL12MX_GPIO_Initv+0x188>)
 800113a:	f000 fce3 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800113e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4813      	ldr	r0, [pc, #76]	; (80011a4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001158:	f000 fcd4 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <_ZL12MX_GPIO_Initv+0x180>)
 8001174:	f000 fcc6 	bl	8001b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2105      	movs	r1, #5
 800117c:	200a      	movs	r0, #10
 800117e:	f000 fc8c 	bl	8001a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001182:	200a      	movs	r0, #10
 8001184:	f000 fca3 	bl	8001ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2105      	movs	r1, #5
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f000 fc84 	bl	8001a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001192:	2028      	movs	r0, #40	; 0x28
 8001194:	f000 fc9b 	bl	8001ace <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001198:	bf00      	nop
 800119a:	3730      	adds	r7, #48	; 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58020400 	.word	0x58020400
 80011a8:	58021000 	.word	0x58021000
 80011ac:	58020800 	.word	0x58020800
 80011b0:	58020000 	.word	0x58020000

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d118      	bne.n	8001202 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d113      	bne.n	8001202 <_Z41__static_initialization_and_destruction_0ii+0x42>
binarx_gpio_impl::GpioImpl gpio_controller = binarx_gpio_impl::GpioImpl();
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80011dc:	f7ff fcd2 	bl	8000b84 <_ZN16binarx_gpio_impl8GpioImplC1Ev>
  binarx_serial_impl::SpiImpl spi_controller = binarx_serial_impl::SpiImpl();
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80011e2:	f7ff fd13 	bl	8000c0c <_ZN18binarx_serial_impl7SpiImplC1Ev>
  binarx_serial_impl::UartImpl uart_controller = binarx_serial_impl::UartImpl();
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80011e8:	f7ff fd22 	bl	8000c30 <_ZN18binarx_serial_impl8UartImplC1Ev>
  binarx_time_impl::TimeImpl time_controller = binarx_time_impl::TimeImpl();
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80011ee:	f7ff fceb 	bl	8000bc8 <_ZN16binarx_time_impl8TimeImplC1Ev>
  binarx_emulator::BinarXEmulator emulator =  binarx_emulator::BinarXEmulator(&spi_controller, &uart_controller, &gpio_controller, &time_controller);
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80011fa:	4905      	ldr	r1, [pc, #20]	; (8001210 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80011fc:	4807      	ldr	r0, [pc, #28]	; (800121c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80011fe:	f7ff fd29 	bl	8000c54 <_ZN15binarx_emulator14BinarXEmulatorC1EPN23binarx_serial_interface28SerialCommunicationInterfaceES3_PN21binarx_gpio_interface13GpioInterfaceEPN21binarx_time_interface13TimeInterfaceE>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	240006bc 	.word	0x240006bc
 8001210:	240006c0 	.word	0x240006c0
 8001214:	240006c4 	.word	0x240006c4
 8001218:	240006c8 	.word	0x240006c8
 800121c:	240006cc 	.word	0x240006cc

08001220 <_GLOBAL__sub_I_hspi1>:
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
 8001224:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff ffc9 	bl	80011c0 <_Z41__static_initialization_and_destruction_0ii>
 800122e:	bd80      	pop	{r7, pc}

08001230 <_ZN18binarx_serial_impl7SpiImpl8TransmitEPhtm>:

namespace binarx_serial_impl {

binarx_serial_interface::SerialStatus SpiImpl::Transmit(uint8_t *buffer,
                                                        uint16_t size,
                                                        uint32_t timeout) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_SPI_Transmit(&hspi1, buffer, size, timeout);
 8001240:	88fa      	ldrh	r2, [r7, #6]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <_ZN18binarx_serial_impl7SpiImpl8TransmitEPhtm+0x34>)
 8001248:	f003 ff88 	bl	800515c <HAL_SPI_Transmit>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f85c 	bl	8001310 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 8001258:	4603      	mov	r3, r0
};
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	24000094 	.word	0x24000094

08001268 <_ZN18binarx_serial_impl7SpiImpl7ReceiveEPhtm>:
binarx_serial_interface::SerialStatus SpiImpl::Receive(uint8_t *receive_buffer,
                                                       uint16_t size,
                                                       uint32_t timeout) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_SPI_Receive(&hspi1, receive_buffer, size, timeout);
 8001278:	88fa      	ldrh	r2, [r7, #6]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <_ZN18binarx_serial_impl7SpiImpl7ReceiveEPhtm+0x34>)
 8001280:	f004 f968 	bl	8005554 <HAL_SPI_Receive>
 8001284:	4603      	mov	r3, r0
 8001286:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f840 	bl	8001310 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 8001290:	4603      	mov	r3, r0
};
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	24000094 	.word	0x24000094

080012a0 <_ZN18binarx_serial_impl8UartImpl8TransmitEPhtm>:

binarx_serial_interface::SerialStatus UartImpl::Transmit(uint8_t *buffer,
                                                         uint16_t size,
                                                         uint32_t timeout) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_UART_Transmit(&huart3, buffer, size, timeout);
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <_ZN18binarx_serial_impl8UartImpl8TransmitEPhtm+0x34>)
 80012b8:	f004 fc15 	bl	8005ae6 <HAL_UART_Transmit>
 80012bc:	4603      	mov	r3, r0
 80012be:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f824 	bl	8001310 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 80012c8:	4603      	mov	r3, r0
};
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400011c 	.word	0x2400011c

080012d8 <_ZN18binarx_serial_impl8UartImpl7ReceiveEPhtm>:
binarx_serial_interface::SerialStatus UartImpl::Receive(uint8_t *receive_buffer,
                                                        uint16_t size,
                                                        uint32_t timeout) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	4613      	mov	r3, r2
 80012e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef hal_status =
      HAL_UART_Receive(&huart3, receive_buffer, size, timeout);
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <_ZN18binarx_serial_impl8UartImpl7ReceiveEPhtm+0x34>)
 80012f0:	f004 fc87 	bl	8005c02 <HAL_UART_Receive>
 80012f4:	4603      	mov	r3, r0
 80012f6:	75fb      	strb	r3, [r7, #23]
  return SerialErrorHandler(hal_status);
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f808 	bl	8001310 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>
 8001300:	4603      	mov	r3, r0
};
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2400011c 	.word	0x2400011c

08001310 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef>:

binarx_serial_interface::SerialStatus SerialErrorHandler(
    HAL_StatusTypeDef hal_status) {
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  switch (hal_status) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d813      	bhi.n	8001348 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x38>
 8001320:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x18>)
 8001322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001326:	bf00      	nop
 8001328:	08001339 	.word	0x08001339
 800132c:	0800133d 	.word	0x0800133d
 8001330:	08001341 	.word	0x08001341
 8001334:	08001345 	.word	0x08001345
    case HAL_OK:
      return binarx_serial_interface::SerialStatus::Success;
 8001338:	2300      	movs	r3, #0
 800133a:	e006      	b.n	800134a <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    case HAL_ERROR:
      return binarx_serial_interface::SerialStatus::Error;
 800133c:	2301      	movs	r3, #1
 800133e:	e004      	b.n	800134a <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    case HAL_BUSY:
      return binarx_serial_interface::SerialStatus::Busy;
 8001340:	2302      	movs	r3, #2
 8001342:	e002      	b.n	800134a <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    case HAL_TIMEOUT:
      return binarx_serial_interface::SerialStatus::Timeout;
 8001344:	2303      	movs	r3, #3
 8001346:	e000      	b.n	800134a <_ZN18binarx_serial_impl18SerialErrorHandlerE17HAL_StatusTypeDef+0x3a>
    default:
      return binarx_serial_interface::SerialStatus::Error;
 8001348:	2301      	movs	r3, #1
  }
};
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_MspInit+0x30>)
 8001360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001364:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_MspInit+0x30>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_MspInit+0x30>)
 8001370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	58024400 	.word	0x58024400

0800138c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ba      	sub	sp, #232	; 0xe8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	22c0      	movs	r2, #192	; 0xc0
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f006 f8d5 	bl	800755c <memset>
  if(hspi->Instance==SPI1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a26      	ldr	r2, [pc, #152]	; (8001450 <HAL_SPI_MspInit+0xc4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d144      	bne.n	8001446 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80013bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 ff73 	bl	80032bc <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80013dc:	f7ff feea 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_SPI_MspInit+0xc8>)
 80013e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013e6:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <HAL_SPI_MspInit+0xc8>)
 80013e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_SPI_MspInit+0xc8>)
 80013f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_SPI_MspInit+0xc8>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	4a13      	ldr	r2, [pc, #76]	; (8001454 <HAL_SPI_MspInit+0xc8>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_SPI_MspInit+0xc8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800141c:	23e0      	movs	r3, #224	; 0xe0
 800141e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001434:	2305      	movs	r3, #5
 8001436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_SPI_MspInit+0xcc>)
 8001442:	f000 fb5f 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	37e8      	adds	r7, #232	; 0xe8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40013000 	.word	0x40013000
 8001454:	58024400 	.word	0x58024400
 8001458:	58020000 	.word	0x58020000

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0ba      	sub	sp, #232	; 0xe8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	22c0      	movs	r2, #192	; 0xc0
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f006 f86d 	bl	800755c <memset>
  if(huart->Instance==USART3)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a27      	ldr	r2, [pc, #156]	; (8001524 <HAL_UART_MspInit+0xc8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d146      	bne.n	800151a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800148c:	f04f 0202 	mov.w	r2, #2
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 ff0a 	bl	80032bc <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014ae:	f7ff fe81 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HAL_UART_MspInit+0xcc>)
 80014b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_UART_MspInit+0xcc>)
 80014ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_UART_MspInit+0xcc>)
 80014c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0xcc>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_UART_MspInit+0xcc>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_UART_MspInit+0xcc>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001508:	2307      	movs	r3, #7
 800150a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_UART_MspInit+0xd0>)
 8001516:	f000 faf5 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	37e8      	adds	r7, #232	; 0xe8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40004800 	.word	0x40004800
 8001528:	58024400 	.word	0x58024400
 800152c:	58020c00 	.word	0x58020c00

08001530 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0ba      	sub	sp, #232	; 0xe8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	22c0      	movs	r2, #192	; 0xc0
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f006 f803 	bl	800755c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a30      	ldr	r2, [pc, #192]	; (800161c <HAL_PCD_MspInit+0xec>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d159      	bne.n	8001614 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001560:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800156c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fe9f 	bl	80032bc <HAL_RCCEx_PeriphCLKConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001584:	f7ff fe16 	bl	80011b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001588:	f000 fea2 	bl	80022d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_PCD_MspInit+0xf0>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001592:	4a23      	ldr	r2, [pc, #140]	; (8001620 <HAL_PCD_MspInit+0xf0>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_PCD_MspInit+0xf0>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015aa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80015ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015c4:	230a      	movs	r3, #10
 80015c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4814      	ldr	r0, [pc, #80]	; (8001624 <HAL_PCD_MspInit+0xf4>)
 80015d2:	f000 fa97 	bl	8001b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015ee:	4619      	mov	r1, r3
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <HAL_PCD_MspInit+0xf4>)
 80015f2:	f000 fa87 	bl	8001b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_PCD_MspInit+0xf0>)
 80015f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_PCD_MspInit+0xf0>)
 80015fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001602:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_PCD_MspInit+0xf0>)
 8001608:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800160c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	37e8      	adds	r7, #232	; 0xe8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40080000 	.word	0x40080000
 8001620:	58024400 	.word	0x58024400
 8001624:	58020000 	.word	0x58020000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 f8e6 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Payload_Pin);
 8001680:	2010      	movs	r0, #16
 8001682:	f000 fc3a 	bl	8001efa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}

0800168a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800168e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001692:	f000 fc32 	bl	8001efa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}

0800169a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  return 1;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_kill>:

int _kill(int pid, int sig)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016b4:	f005 ff1a 	bl	80074ec <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2216      	movs	r2, #22
 80016bc:	601a      	str	r2, [r3, #0]
  return -1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_exit>:

void _exit (int status)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffe7 	bl	80016aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80016dc:	e7fe      	b.n	80016dc <_exit+0x12>

080016de <_ZN16binarx_time_impl8TimeImpl5DelayEm>:
#include "time_interface.h"
#include "time_impl.h"

namespace binarx_time_impl {

void TimeImpl::Delay(uint32_t milliseconds) { HAL_Delay(milliseconds); };
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f000 f8cb 	bl	8001884 <HAL_Delay>
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_ZN16binarx_time_impl8TimeImpl8GetTicksEv>:

uint32_t TimeImpl::GetTicks(){return HAL_GetTick();};
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	f000 f8b5 	bl	800186c <HAL_GetTick>
 8001702:	4603      	mov	r3, r0
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001710:	f7fe ff6c 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	; (800174c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	; (8001758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f005 fedd 	bl	80074f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7ff fac3 	bl	8000cc8 <main>
  bx  lr
 8001742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001748:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800174c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001750:	08007780 	.word	0x08007780
  ldr r2, =_sbss
 8001754:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001758:	240006ec 	.word	0x240006ec

0800175c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC3_IRQHandler>
	...

08001760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001766:	2003      	movs	r0, #3
 8001768:	f000 f98c 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800176c:	f001 fbd0 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_Init+0x68>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	4913      	ldr	r1, [pc, #76]	; (80017cc <HAL_Init+0x6c>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_Init+0x68>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_Init+0x6c>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_Init+0x70>)
 80017a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_Init+0x74>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f814 	bl	80017d8 <HAL_InitTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e002      	b.n	80017c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017ba:	f7ff fdcd 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	58024400 	.word	0x58024400
 80017cc:	080076b4 	.word	0x080076b4
 80017d0:	24000004 	.word	0x24000004
 80017d4:	24000000 	.word	0x24000000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_InitTick+0x60>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e021      	b.n	8001830 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_InitTick+0x64>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_InitTick+0x60>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f971 	bl	8001aea <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e00e      	b.n	8001830 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d80a      	bhi.n	800182e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001820:	f000 f93b 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_InitTick+0x68>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2400000c 	.word	0x2400000c
 800183c:	24000000 	.word	0x24000000
 8001840:	24000008 	.word	0x24000008

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2400000c 	.word	0x2400000c
 8001868:	240006e4 	.word	0x240006e4

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	240006e4 	.word	0x240006e4

08001884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff ffee 	bl	800186c <HAL_GetTick>
 8001890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800189c:	d005      	beq.n	80018aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_Delay+0x44>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018aa:	bf00      	nop
 80018ac:	f7ff ffde 	bl	800186c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d8f7      	bhi.n	80018ac <HAL_Delay+0x28>
  {
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2400000c 	.word	0x2400000c

080018cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetREVID+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0c1b      	lsrs	r3, r3, #16
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	5c001000 	.word	0x5c001000

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <__NVIC_SetPriorityGrouping+0x40>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	4313      	orrs	r3, r2
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x40>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00
 8001928:	05fa0000 	.word	0x05fa0000

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4907      	ldr	r1, [pc, #28]	; (8001980 <__NVIC_EnableIRQ+0x38>)
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a64:	f7ff ff8e 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff29 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff40 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff90 	bl	80019d8 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5f 	bl	8001984 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff33 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa4 	bl	8001a40 <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b12:	4b89      	ldr	r3, [pc, #548]	; (8001d38 <HAL_GPIO_Init+0x234>)
 8001b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b16:	e194      	b.n	8001e42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8186 	beq.w	8001e3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d005      	beq.n	8001b48 <HAL_GPIO_Init+0x44>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d130      	bne.n	8001baa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b7e:	2201      	movs	r2, #1
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 0201 	and.w	r2, r3, #1
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d017      	beq.n	8001be6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d123      	bne.n	8001c3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3208      	adds	r2, #8
 8001bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	08da      	lsrs	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3208      	adds	r2, #8
 8001c34:	69b9      	ldr	r1, [r7, #24]
 8001c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	2203      	movs	r2, #3
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0203 	and.w	r2, r3, #3
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80e0 	beq.w	8001e3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_GPIO_Init+0x238>)
 8001c7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c82:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <HAL_GPIO_Init+0x238>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_GPIO_Init+0x238>)
 8001c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9a:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <HAL_GPIO_Init+0x23c>)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <HAL_GPIO_Init+0x240>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d052      	beq.n	8001d6c <HAL_GPIO_Init+0x268>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_GPIO_Init+0x244>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d031      	beq.n	8001d32 <HAL_GPIO_Init+0x22e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <HAL_GPIO_Init+0x248>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d02b      	beq.n	8001d2e <HAL_GPIO_Init+0x22a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_GPIO_Init+0x24c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d025      	beq.n	8001d2a <HAL_GPIO_Init+0x226>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <HAL_GPIO_Init+0x250>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01f      	beq.n	8001d26 <HAL_GPIO_Init+0x222>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <HAL_GPIO_Init+0x254>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_GPIO_Init+0x21e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <HAL_GPIO_Init+0x258>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0x21a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_GPIO_Init+0x25c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <HAL_GPIO_Init+0x216>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <HAL_GPIO_Init+0x260>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x212>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <HAL_GPIO_Init+0x264>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_GPIO_Init+0x20e>
 8001d0e:	2309      	movs	r3, #9
 8001d10:	e02d      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d12:	230a      	movs	r3, #10
 8001d14:	e02b      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d16:	2308      	movs	r3, #8
 8001d18:	e029      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	e027      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d1e:	2306      	movs	r3, #6
 8001d20:	e025      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d22:	2305      	movs	r3, #5
 8001d24:	e023      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d26:	2304      	movs	r3, #4
 8001d28:	e021      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e01f      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e01d      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e01b      	b.n	8001d6e <HAL_GPIO_Init+0x26a>
 8001d36:	bf00      	nop
 8001d38:	58000080 	.word	0x58000080
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	58000400 	.word	0x58000400
 8001d44:	58020000 	.word	0x58020000
 8001d48:	58020400 	.word	0x58020400
 8001d4c:	58020800 	.word	0x58020800
 8001d50:	58020c00 	.word	0x58020c00
 8001d54:	58021000 	.word	0x58021000
 8001d58:	58021400 	.word	0x58021400
 8001d5c:	58021800 	.word	0x58021800
 8001d60:	58021c00 	.word	0x58021c00
 8001d64:	58022000 	.word	0x58022000
 8001d68:	58022400 	.word	0x58022400
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	f002 0203 	and.w	r2, r2, #3
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	4093      	lsls	r3, r2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d7e:	4938      	ldr	r1, [pc, #224]	; (8001e60 <HAL_GPIO_Init+0x35c>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f47f ae63 	bne.w	8001b18 <HAL_GPIO_Init+0x14>
  }
}
 8001e52:	bf00      	nop
 8001e54:	bf00      	nop
 8001e56:	3724      	adds	r7, #36	; 0x24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	58000400 	.word	0x58000400

08001e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	041a      	lsls	r2, r3, #16
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe feb7 	bl	8000c94 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f38:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_HSEM_FastTake+0x2c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3320      	adds	r3, #32
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_HSEM_FastTake+0x30>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	58026400 	.word	0x58026400
 8001f60:	80000300 	.word	0x80000300

08001f64 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001f6e:	4906      	ldr	r1, [pc, #24]	; (8001f88 <HAL_HSEM_Release+0x24>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	58026400 	.word	0x58026400

08001f8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	b08f      	sub	sp, #60	; 0x3c
 8001f90:	af0a      	add	r7, sp, #40	; 0x28
 8001f92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e116      	b.n	80021cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fab9 	bl	8001530 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 ffcd 	bl	8006f7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	687e      	ldr	r6, [r7, #4]
 8001fea:	466d      	mov	r5, sp
 8001fec:	f106 0410 	add.w	r4, r6, #16
 8001ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ffc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002000:	1d33      	adds	r3, r6, #4
 8002002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002004:	6838      	ldr	r0, [r7, #0]
 8002006:	f004 ff4b 	bl	8006ea0 <USB_CoreInit>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0d7      	b.n	80021cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f004 ffbb 	bl	8006f9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e04a      	b.n	80020c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	333d      	adds	r3, #61	; 0x3d
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	333c      	adds	r3, #60	; 0x3c
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b298      	uxth	r0, r3
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	3356      	adds	r3, #86	; 0x56
 800206a:	4602      	mov	r2, r0
 800206c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3340      	adds	r3, #64	; 0x40
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3344      	adds	r3, #68	; 0x44
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3348      	adds	r3, #72	; 0x48
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	334c      	adds	r3, #76	; 0x4c
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	3301      	adds	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d3af      	bcc.n	800202e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e044      	b.n	800215e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3301      	adds	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d3b5      	bcc.n	80020d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	687e      	ldr	r6, [r7, #4]
 8002170:	466d      	mov	r5, sp
 8002172:	f106 0410 	add.w	r4, r6, #16
 8002176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002182:	e885 0003 	stmia.w	r5, {r0, r1}
 8002186:	1d33      	adds	r3, r6, #4
 8002188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800218a:	6838      	ldr	r0, [r7, #0]
 800218c:	f004 ff54 	bl	8007038 <USB_DevInit>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2202      	movs	r2, #2
 800219a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e014      	b.n	80021cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f80a 	bl	80021d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f005 f912 	bl	80073ee <USB_DevDisconnect>

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_PCDEx_ActivateLPM+0x44>)
 8002204:	4313      	orrs	r3, r2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	10000003 	.word	0x10000003

0800221c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	2b06      	cmp	r3, #6
 800222e:	d00a      	beq.n	8002246 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e040      	b.n	80022c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e03e      	b.n	80022c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800224e:	491f      	ldr	r1, [pc, #124]	; (80022cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4313      	orrs	r3, r2
 8002254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002256:	f7ff fb09 	bl	800186c <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800225c:	e009      	b.n	8002272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800225e:	f7ff fb05 	bl	800186c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800226c:	d901      	bls.n	8002272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e028      	b.n	80022c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800227a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227e:	d1ee      	bne.n	800225e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b1e      	cmp	r3, #30
 8002284:	d008      	beq.n	8002298 <HAL_PWREx_ConfigSupply+0x7c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b2e      	cmp	r3, #46	; 0x2e
 800228a:	d005      	beq.n	8002298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b1d      	cmp	r3, #29
 8002290:	d002      	beq.n	8002298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b2d      	cmp	r3, #45	; 0x2d
 8002296:	d114      	bne.n	80022c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002298:	f7ff fae8 	bl	800186c <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800229e:	e009      	b.n	80022b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022a0:	f7ff fae4 	bl	800186c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ae:	d901      	bls.n	80022b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e007      	b.n	80022c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_PWREx_ConfigSupply+0xb0>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c0:	d1ee      	bne.n	80022a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	58024800 	.word	0x58024800

080022d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	58024800 	.word	0x58024800

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	f000 bc48 	b.w	8002b94 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8088 	beq.w	8002422 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002312:	4b99      	ldr	r3, [pc, #612]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800231c:	4b96      	ldr	r3, [pc, #600]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	2b10      	cmp	r3, #16
 8002326:	d007      	beq.n	8002338 <HAL_RCC_OscConfig+0x48>
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	2b18      	cmp	r3, #24
 800232c:	d111      	bne.n	8002352 <HAL_RCC_OscConfig+0x62>
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d10c      	bne.n	8002352 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b8f      	ldr	r3, [pc, #572]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d06d      	beq.n	8002420 <HAL_RCC_OscConfig+0x130>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d169      	bne.n	8002420 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f000 bc21 	b.w	8002b94 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x7a>
 800235c:	4b86      	ldr	r3, [pc, #536]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a85      	ldr	r2, [pc, #532]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e02e      	b.n	80023c8 <HAL_RCC_OscConfig+0xd8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x9c>
 8002372:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a80      	ldr	r2, [pc, #512]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b7e      	ldr	r3, [pc, #504]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a7d      	ldr	r2, [pc, #500]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e01d      	b.n	80023c8 <HAL_RCC_OscConfig+0xd8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0xc0>
 8002396:	4b78      	ldr	r3, [pc, #480]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a77      	ldr	r2, [pc, #476]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b75      	ldr	r3, [pc, #468]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a74      	ldr	r2, [pc, #464]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0xd8>
 80023b0:	4b71      	ldr	r3, [pc, #452]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a70      	ldr	r2, [pc, #448]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b6e      	ldr	r3, [pc, #440]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6d      	ldr	r2, [pc, #436]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7ff fa4c 	bl	800186c <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7ff fa48 	bl	800186c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e3d4      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0xe8>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7ff fa38 	bl	800186c <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff fa34 	bl	800186c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e3c0      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002412:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x110>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80ca 	beq.w	80025c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002430:	4b51      	ldr	r3, [pc, #324]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002438:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800243a:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_RCC_OscConfig+0x166>
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	2b18      	cmp	r3, #24
 800244a:	d156      	bne.n	80024fa <HAL_RCC_OscConfig+0x20a>
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d151      	bne.n	80024fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002456:	4b48      	ldr	r3, [pc, #288]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x17e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e392      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800246e:	4b42      	ldr	r3, [pc, #264]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0219 	bic.w	r2, r3, #25
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	493f      	ldr	r1, [pc, #252]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff f9f4 	bl	800186c <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002488:	f7ff f9f0 	bl	800186c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e37c      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800249a:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	f7ff fa11 	bl	80018cc <HAL_GetREVID>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d817      	bhi.n	80024e4 <HAL_RCC_OscConfig+0x1f4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d108      	bne.n	80024ce <HAL_RCC_OscConfig+0x1de>
 80024bc:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024c4:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80024c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024cc:	e07a      	b.n	80025c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ce:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	031b      	lsls	r3, r3, #12
 80024dc:	4926      	ldr	r1, [pc, #152]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e2:	e06f      	b.n	80025c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	061b      	lsls	r3, r3, #24
 80024f2:	4921      	ldr	r1, [pc, #132]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f8:	e064      	b.n	80025c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d047      	beq.n	8002592 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0219 	bic.w	r2, r3, #25
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	491a      	ldr	r1, [pc, #104]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7ff f9aa 	bl	800186c <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7ff f9a6 	bl	800186c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e332      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	f7ff f9c7 	bl	80018cc <HAL_GetREVID>
 800253e:	4603      	mov	r3, r0
 8002540:	f241 0203 	movw	r2, #4099	; 0x1003
 8002544:	4293      	cmp	r3, r2
 8002546:	d819      	bhi.n	800257c <HAL_RCC_OscConfig+0x28c>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b40      	cmp	r3, #64	; 0x40
 800254e:	d108      	bne.n	8002562 <HAL_RCC_OscConfig+0x272>
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002558:	4a07      	ldr	r2, [pc, #28]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 800255a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255e:	6053      	str	r3, [r2, #4]
 8002560:	e030      	b.n	80025c4 <HAL_RCC_OscConfig+0x2d4>
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	031b      	lsls	r3, r3, #12
 8002570:	4901      	ldr	r1, [pc, #4]	; (8002578 <HAL_RCC_OscConfig+0x288>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
 8002576:	e025      	b.n	80025c4 <HAL_RCC_OscConfig+0x2d4>
 8002578:	58024400 	.word	0x58024400
 800257c:	4b9a      	ldr	r3, [pc, #616]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	4997      	ldr	r1, [pc, #604]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
 8002590:	e018      	b.n	80025c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b95      	ldr	r3, [pc, #596]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a94      	ldr	r2, [pc, #592]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7ff f965 	bl	800186c <HAL_GetTick>
 80025a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a6:	f7ff f961 	bl	800186c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e2ed      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025b8:	4b8b      	ldr	r3, [pc, #556]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a9 	beq.w	8002724 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d2:	4b85      	ldr	r3, [pc, #532]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025dc:	4b82      	ldr	r3, [pc, #520]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d007      	beq.n	80025f8 <HAL_RCC_OscConfig+0x308>
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	2b18      	cmp	r3, #24
 80025ec:	d13a      	bne.n	8002664 <HAL_RCC_OscConfig+0x374>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d135      	bne.n	8002664 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025f8:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_OscConfig+0x320>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d001      	beq.n	8002610 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e2c1      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002610:	f7ff f95c 	bl	80018cc <HAL_GetREVID>
 8002614:	4603      	mov	r3, r0
 8002616:	f241 0203 	movw	r2, #4099	; 0x1003
 800261a:	4293      	cmp	r3, r2
 800261c:	d817      	bhi.n	800264e <HAL_RCC_OscConfig+0x35e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	2b20      	cmp	r3, #32
 8002624:	d108      	bne.n	8002638 <HAL_RCC_OscConfig+0x348>
 8002626:	4b70      	ldr	r3, [pc, #448]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800262e:	4a6e      	ldr	r2, [pc, #440]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002634:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002636:	e075      	b.n	8002724 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002638:	4b6b      	ldr	r3, [pc, #428]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	4968      	ldr	r1, [pc, #416]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800264c:	e06a      	b.n	8002724 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800264e:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4962      	ldr	r1, [pc, #392]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002662:	e05f      	b.n	8002724 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d042      	beq.n	80026f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800266c:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a5d      	ldr	r2, [pc, #372]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7ff f8f8 	bl	800186c <HAL_GetTick>
 800267c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002680:	f7ff f8f4 	bl	800186c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e280      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002692:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800269e:	f7ff f915 	bl	80018cc <HAL_GetREVID>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d817      	bhi.n	80026dc <HAL_RCC_OscConfig+0x3ec>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d108      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3d6>
 80026b4:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026bc:	4a4a      	ldr	r2, [pc, #296]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80026be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026c2:	6053      	str	r3, [r2, #4]
 80026c4:	e02e      	b.n	8002724 <HAL_RCC_OscConfig+0x434>
 80026c6:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	069b      	lsls	r3, r3, #26
 80026d4:	4944      	ldr	r1, [pc, #272]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
 80026da:	e023      	b.n	8002724 <HAL_RCC_OscConfig+0x434>
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	493f      	ldr	r1, [pc, #252]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
 80026f0:	e018      	b.n	8002724 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026f2:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7ff f8b5 	bl	800186c <HAL_GetTick>
 8002702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002706:	f7ff f8b1 	bl	800186c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e23d      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002718:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d036      	beq.n	800279e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d019      	beq.n	800276c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273c:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7ff f892 	bl	800186c <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7ff f88e 	bl	800186c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e21a      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x45c>
 800276a:	e018      	b.n	800279e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7ff f878 	bl	800186c <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002780:	f7ff f874 	bl	800186c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e200      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d039      	beq.n	800281e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01c      	beq.n	80027ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027be:	f7ff f855 	bl	800186c <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c6:	f7ff f851 	bl	800186c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1dd      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x4d6>
 80027e4:	e01b      	b.n	800281e <HAL_RCC_OscConfig+0x52e>
 80027e6:	bf00      	nop
 80027e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ec:	4b9b      	ldr	r3, [pc, #620]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a9a      	ldr	r2, [pc, #616]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80027f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027f8:	f7ff f838 	bl	800186c <HAL_GetTick>
 80027fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002800:	f7ff f834 	bl	800186c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1c0      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002812:	4b92      	ldr	r3, [pc, #584]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8081 	beq.w	800292e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800282c:	4b8c      	ldr	r3, [pc, #560]	; (8002a60 <HAL_RCC_OscConfig+0x770>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a8b      	ldr	r2, [pc, #556]	; (8002a60 <HAL_RCC_OscConfig+0x770>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002838:	f7ff f818 	bl	800186c <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7ff f814 	bl	800186c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1a0      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002852:	4b83      	ldr	r3, [pc, #524]	; (8002a60 <HAL_RCC_OscConfig+0x770>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x584>
 8002866:	4b7d      	ldr	r3, [pc, #500]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	4a7c      	ldr	r2, [pc, #496]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6713      	str	r3, [r2, #112]	; 0x70
 8002872:	e02d      	b.n	80028d0 <HAL_RCC_OscConfig+0x5e0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10c      	bne.n	8002896 <HAL_RCC_OscConfig+0x5a6>
 800287c:	4b77      	ldr	r3, [pc, #476]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a76      	ldr	r2, [pc, #472]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
 8002888:	4b74      	ldr	r3, [pc, #464]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	4a73      	ldr	r2, [pc, #460]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	6713      	str	r3, [r2, #112]	; 0x70
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x5e0>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5c8>
 800289e:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	4a6e      	ldr	r2, [pc, #440]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70
 80028aa:	4b6c      	ldr	r3, [pc, #432]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a6b      	ldr	r2, [pc, #428]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0x5e0>
 80028b8:	4b68      	ldr	r3, [pc, #416]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a67      	ldr	r2, [pc, #412]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
 80028c4:	4b65      	ldr	r3, [pc, #404]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a64      	ldr	r2, [pc, #400]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe ffc8 	bl	800186c <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f7fe ffc4 	bl	800186c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e14e      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028f6:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ee      	beq.n	80028e0 <HAL_RCC_OscConfig+0x5f0>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe ffb2 	bl	800186c <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7fe ffae 	bl	800186c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e138      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002922:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ee      	bne.n	800290c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 812d 	beq.w	8002b92 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002938:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002940:	2b18      	cmp	r3, #24
 8002942:	f000 80bd 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2b02      	cmp	r3, #2
 800294c:	f040 809e 	bne.w	8002a8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a41      	ldr	r2, [pc, #260]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe ff86 	bl	800186c <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe ff82 	bl	800186c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e10e      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002976:	4b39      	ldr	r3, [pc, #228]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002986:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <HAL_RCC_OscConfig+0x774>)
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	430a      	orrs	r2, r1
 8002996:	4931      	ldr	r1, [pc, #196]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002998:	4313      	orrs	r3, r2
 800299a:	628b      	str	r3, [r1, #40]	; 0x28
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	3b01      	subs	r3, #1
 80029a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	3b01      	subs	r3, #1
 80029ac:	025b      	lsls	r3, r3, #9
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	3b01      	subs	r3, #1
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	3b01      	subs	r3, #1
 80029c6:	061b      	lsls	r3, r3, #24
 80029c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80029cc:	4923      	ldr	r1, [pc, #140]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029d2:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80029e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCC_OscConfig+0x778>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029ea:	00d2      	lsls	r2, r2, #3
 80029ec:	491b      	ldr	r1, [pc, #108]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f023 020c 	bic.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4917      	ldr	r1, [pc, #92]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	f023 0202 	bic.w	r2, r3, #2
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	4912      	ldr	r1, [pc, #72]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe ff0b 	bl	800186c <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a58:	e011      	b.n	8002a7e <HAL_RCC_OscConfig+0x78e>
 8002a5a:	bf00      	nop
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	58024800 	.word	0x58024800
 8002a64:	fffffc0c 	.word	0xfffffc0c
 8002a68:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fefe 	bl	800186c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e08a      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x77c>
 8002a8a:	e082      	b.n	8002b92 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8c:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a42      	ldr	r2, [pc, #264]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fee8 	bl	800186c <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe fee4 	bl	800186c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e070      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab2:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x7b0>
 8002abe:	e068      	b.n	8002b92 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ac6:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d031      	beq.n	8002b38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f003 0203 	and.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d12a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d122      	bne.n	8002b38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d11a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	0a5b      	lsrs	r3, r3, #9
 8002b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d111      	bne.n	8002b38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d108      	bne.n	8002b38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	0e1b      	lsrs	r3, r3, #24
 8002b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e02b      	b.n	8002b94 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d01f      	beq.n	8002b92 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	4a11      	ldr	r2, [pc, #68]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b5e:	f7fe fe85 	bl	800186c <HAL_GetTick>
 8002b62:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b64:	bf00      	nop
 8002b66:	f7fe fe81 	bl	800186c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d0f9      	beq.n	8002b66 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_RCC_OscConfig+0x8b0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b7e:	00d2      	lsls	r2, r2, #3
 8002b80:	4906      	ldr	r1, [pc, #24]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_RCC_OscConfig+0x8ac>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	58024400 	.word	0x58024400
 8002ba0:	ffff0007 	.word	0xffff0007

08002ba4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e19c      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b8a      	ldr	r3, [pc, #552]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d910      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b87      	ldr	r3, [pc, #540]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 020f 	bic.w	r2, r3, #15
 8002bce:	4985      	ldr	r1, [pc, #532]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b83      	ldr	r3, [pc, #524]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e184      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	4b7b      	ldr	r3, [pc, #492]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d908      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c04:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4975      	ldr	r1, [pc, #468]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d010      	beq.n	8002c44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d908      	bls.n	8002c44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c32:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	496a      	ldr	r1, [pc, #424]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d010      	beq.n	8002c72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	4b64      	ldr	r3, [pc, #400]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d908      	bls.n	8002c72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c60:	4b61      	ldr	r3, [pc, #388]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	495e      	ldr	r1, [pc, #376]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d010      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d908      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c8e:	4b56      	ldr	r3, [pc, #344]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4953      	ldr	r1, [pc, #332]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d010      	beq.n	8002cce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d908      	bls.n	8002cce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f023 020f 	bic.w	r2, r3, #15
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4947      	ldr	r1, [pc, #284]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d055      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cda:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4940      	ldr	r1, [pc, #256]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cf4:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d121      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0f6      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d115      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0ea      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d24:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0de      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d34:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0d6      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d44:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f023 0207 	bic.w	r2, r3, #7
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4925      	ldr	r1, [pc, #148]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d56:	f7fe fd89 	bl	800186c <HAL_GetTick>
 8002d5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5e:	f7fe fd85 	bl	800186c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0be      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d1eb      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d208      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f023 020f 	bic.w	r2, r3, #15
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	490e      	ldr	r1, [pc, #56]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d214      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 020f 	bic.w	r2, r3, #15
 8002dca:	4906      	ldr	r1, [pc, #24]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e086      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x34e>
 8002de4:	52002000 	.word	0x52002000
 8002de8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d208      	bcs.n	8002e1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e08:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4939      	ldr	r1, [pc, #228]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d208      	bcs.n	8002e48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e36:	4b31      	ldr	r3, [pc, #196]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	492e      	ldr	r1, [pc, #184]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d208      	bcs.n	8002e76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4922      	ldr	r1, [pc, #136]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d208      	bcs.n	8002ea4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4917      	ldr	r1, [pc, #92]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ea4:	f000 f834 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	4912      	ldr	r1, [pc, #72]	; (8002f00 <HAL_RCC_ClockConfig+0x35c>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <HAL_RCC_ClockConfig+0x35c>)
 8002ecc:	5cd3      	ldrb	r3, [r2, r3]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x360>)
 8002eda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002edc:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <HAL_RCC_ClockConfig+0x364>)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_RCC_ClockConfig+0x368>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fc76 	bl	80017d8 <HAL_InitTick>
 8002eec:	4603      	mov	r3, r0
 8002eee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	58024400 	.word	0x58024400
 8002f00:	080076b4 	.word	0x080076b4
 8002f04:	24000004 	.word	0x24000004
 8002f08:	24000000 	.word	0x24000000
 8002f0c:	24000008 	.word	0x24000008

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f16:	4bb3      	ldr	r3, [pc, #716]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f1e:	2b18      	cmp	r3, #24
 8002f20:	f200 8155 	bhi.w	80031ce <HAL_RCC_GetSysClockFreq+0x2be>
 8002f24:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f91 	.word	0x08002f91
 8002f30:	080031cf 	.word	0x080031cf
 8002f34:	080031cf 	.word	0x080031cf
 8002f38:	080031cf 	.word	0x080031cf
 8002f3c:	080031cf 	.word	0x080031cf
 8002f40:	080031cf 	.word	0x080031cf
 8002f44:	080031cf 	.word	0x080031cf
 8002f48:	080031cf 	.word	0x080031cf
 8002f4c:	08002fb7 	.word	0x08002fb7
 8002f50:	080031cf 	.word	0x080031cf
 8002f54:	080031cf 	.word	0x080031cf
 8002f58:	080031cf 	.word	0x080031cf
 8002f5c:	080031cf 	.word	0x080031cf
 8002f60:	080031cf 	.word	0x080031cf
 8002f64:	080031cf 	.word	0x080031cf
 8002f68:	080031cf 	.word	0x080031cf
 8002f6c:	08002fbd 	.word	0x08002fbd
 8002f70:	080031cf 	.word	0x080031cf
 8002f74:	080031cf 	.word	0x080031cf
 8002f78:	080031cf 	.word	0x080031cf
 8002f7c:	080031cf 	.word	0x080031cf
 8002f80:	080031cf 	.word	0x080031cf
 8002f84:	080031cf 	.word	0x080031cf
 8002f88:	080031cf 	.word	0x080031cf
 8002f8c:	08002fc3 	.word	0x08002fc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f90:	4b94      	ldr	r3, [pc, #592]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f9c:	4b91      	ldr	r3, [pc, #580]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	08db      	lsrs	r3, r3, #3
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	4a90      	ldr	r2, [pc, #576]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fae:	e111      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fb0:	4b8d      	ldr	r3, [pc, #564]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fb2:	61bb      	str	r3, [r7, #24]
      break;
 8002fb4:	e10e      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fb6:	4b8d      	ldr	r3, [pc, #564]	; (80031ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fb8:	61bb      	str	r3, [r7, #24]
      break;
 8002fba:	e10b      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fbc:	4b8c      	ldr	r3, [pc, #560]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fbe:	61bb      	str	r3, [r7, #24]
      break;
 8002fc0:	e108      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fc2:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fcc:	4b85      	ldr	r3, [pc, #532]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fd8:	4b82      	ldr	r3, [pc, #520]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fe2:	4b80      	ldr	r3, [pc, #512]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe6:	08db      	lsrs	r3, r3, #3
 8002fe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ffa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80e1 	beq.w	80031c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b02      	cmp	r3, #2
 800300a:	f000 8083 	beq.w	8003114 <HAL_RCC_GetSysClockFreq+0x204>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b02      	cmp	r3, #2
 8003012:	f200 80a1 	bhi.w	8003158 <HAL_RCC_GetSysClockFreq+0x248>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x114>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d056      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003022:	e099      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003024:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d02d      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003030:	4b6c      	ldr	r3, [pc, #432]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	08db      	lsrs	r3, r3, #3
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	4a6b      	ldr	r2, [pc, #428]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
 8003040:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305a:	4b62      	ldr	r3, [pc, #392]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306a:	ed97 6a02 	vldr	s12, [r7, #8]
 800306e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80031f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800307e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003086:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800308a:	e087      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003096:	eddf 6a58 	vldr	s13, [pc, #352]	; 80031f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800309a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309e:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80031f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ce:	e065      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80031fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80030de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e2:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80031f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003112:	e043      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003200 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003126:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003136:	ed97 6a02 	vldr	s12, [r7, #8]
 800313a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80031f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800313e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800314a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003156:	e021      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003162:	eddf 6a26 	vldr	s13, [pc, #152]	; 80031fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317a:	ed97 6a02 	vldr	s12, [r7, #8]
 800317e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80031f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800318e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800319a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	0a5b      	lsrs	r3, r3, #9
 80031a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a6:	3301      	adds	r3, #1
 80031a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80031b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c0:	ee17 3a90 	vmov	r3, s15
 80031c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031c6:	e005      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61bb      	str	r3, [r7, #24]
      break;
 80031cc:	e002      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031d0:	61bb      	str	r3, [r7, #24]
      break;
 80031d2:	bf00      	nop
  }

  return sysclockfreq;
 80031d4:	69bb      	ldr	r3, [r7, #24]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	58024400 	.word	0x58024400
 80031e8:	03d09000 	.word	0x03d09000
 80031ec:	003d0900 	.word	0x003d0900
 80031f0:	007a1200 	.word	0x007a1200
 80031f4:	46000000 	.word	0x46000000
 80031f8:	4c742400 	.word	0x4c742400
 80031fc:	4a742400 	.word	0x4a742400
 8003200:	4af42400 	.word	0x4af42400

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800320a:	f7ff fe81 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_RCC_GetHCLKFreq+0x50>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490f      	ldr	r1, [pc, #60]	; (8003258 <HAL_RCC_GetHCLKFreq+0x54>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_RCC_GetHCLKFreq+0x50>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_RCC_GetHCLKFreq+0x54>)
 8003232:	5cd3      	ldrb	r3, [r2, r3]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_RCC_GetHCLKFreq+0x58>)
 8003240:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <HAL_RCC_GetHCLKFreq+0x58>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	58024400 	.word	0x58024400
 8003258:	080076b4 	.word	0x080076b4
 800325c:	24000004 	.word	0x24000004
 8003260:	24000000 	.word	0x24000000

08003264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003268:	f7ff ffcc 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4904      	ldr	r1, [pc, #16]	; (800328c <HAL_RCC_GetPCLK1Freq+0x28>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	58024400 	.word	0x58024400
 800328c:	080076b4 	.word	0x080076b4

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003294:	f7ff ffb6 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4904      	ldr	r1, [pc, #16]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	58024400 	.word	0x58024400
 80032b8:	080076b4 	.word	0x080076b4

080032bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c0:	b0ca      	sub	sp, #296	; 0x128
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80032e0:	2500      	movs	r5, #0
 80032e2:	ea54 0305 	orrs.w	r3, r4, r5
 80032e6:	d049      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032f2:	d02f      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032f8:	d828      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032fe:	d01a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003304:	d822      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800330a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330e:	d007      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003310:	e01c      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003312:	4bb8      	ldr	r3, [pc, #736]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	4ab7      	ldr	r2, [pc, #732]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800331e:	e01a      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003324:	3308      	adds	r3, #8
 8003326:	2102      	movs	r1, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f001 fc8f 	bl	8004c4c <RCCEx_PLL2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003334:	e00f      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333a:	3328      	adds	r3, #40	; 0x28
 800333c:	2102      	movs	r1, #2
 800333e:	4618      	mov	r0, r3
 8003340:	f001 fd36 	bl	8004db0 <RCCEx_PLL3_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800334a:	e004      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800335e:	4ba5      	ldr	r3, [pc, #660]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800336c:	4aa1      	ldr	r2, [pc, #644]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800336e:	430b      	orrs	r3, r1
 8003370:	6513      	str	r3, [r2, #80]	; 0x50
 8003372:	e003      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003388:	f04f 0900 	mov.w	r9, #0
 800338c:	ea58 0309 	orrs.w	r3, r8, r9
 8003390:	d047      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	2b04      	cmp	r3, #4
 800339a:	d82a      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033b9 	.word	0x080033b9
 80033a8:	080033c7 	.word	0x080033c7
 80033ac:	080033dd 	.word	0x080033dd
 80033b0:	080033fb 	.word	0x080033fb
 80033b4:	080033fb 	.word	0x080033fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b8:	4b8e      	ldr	r3, [pc, #568]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	4a8d      	ldr	r2, [pc, #564]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033c4:	e01a      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ca:	3308      	adds	r3, #8
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 fc3c 	bl	8004c4c <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033da:	e00f      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e0:	3328      	adds	r3, #40	; 0x28
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 fce3 	bl	8004db0 <RCCEx_PLL3_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f0:	e004      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003404:	4b7b      	ldr	r3, [pc, #492]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003408:	f023 0107 	bic.w	r1, r3, #7
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	4a78      	ldr	r2, [pc, #480]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003414:	430b      	orrs	r3, r1
 8003416:	6513      	str	r3, [r2, #80]	; 0x50
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800341e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800342e:	f04f 0b00 	mov.w	fp, #0
 8003432:	ea5a 030b 	orrs.w	r3, sl, fp
 8003436:	d04c      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d030      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003448:	d829      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800344a:	2bc0      	cmp	r3, #192	; 0xc0
 800344c:	d02d      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800344e:	2bc0      	cmp	r3, #192	; 0xc0
 8003450:	d825      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d018      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d821      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d007      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003462:	e01c      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	4a62      	ldr	r2, [pc, #392]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003470:	e01c      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003476:	3308      	adds	r3, #8
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f001 fbe6 	bl	8004c4c <RCCEx_PLL2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003486:	e011      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348c:	3328      	adds	r3, #40	; 0x28
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fc8d 	bl	8004db0 <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800349c:	e006      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034a4:	e002      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034b4:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6513      	str	r3, [r2, #80]	; 0x50
 80034c8:	e003      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80034de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80034e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80034ec:	460b      	mov	r3, r1
 80034ee:	4313      	orrs	r3, r2
 80034f0:	d053      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034fe:	d035      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003500:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003504:	d82e      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003506:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800350a:	d031      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800350c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003510:	d828      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003516:	d01a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351c:	d822      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003526:	d007      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003528:	e01c      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800352a:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003536:	e01c      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353c:	3308      	adds	r3, #8
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fb83 	bl	8004c4c <RCCEx_PLL2_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800354c:	e011      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003552:	3328      	adds	r3, #40	; 0x28
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f001 fc2a 	bl	8004db0 <RCCEx_PLL3_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003562:	e006      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800356a:	e002      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800357a:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003586:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800358a:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6593      	str	r3, [r2, #88]	; 0x58
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003596:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d056      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c6:	d038      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035cc:	d831      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035d2:	d034      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80035d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035d8:	d82b      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035de:	d01d      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80035e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035e4:	d825      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80035ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80035f0:	e01f      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80035f2:	bf00      	nop
 80035f4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f8:	4ba2      	ldr	r3, [pc, #648]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	4aa1      	ldr	r2, [pc, #644]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003604:	e01c      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360a:	3308      	adds	r3, #8
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fb1c 	bl	8004c4c <RCCEx_PLL2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800361a:	e011      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003620:	3328      	adds	r3, #40	; 0x28
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fbc3 	bl	8004db0 <RCCEx_PLL3_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003630:	e006      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800363e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003648:	4b8e      	ldr	r3, [pc, #568]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003654:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003658:	4a8a      	ldr	r2, [pc, #552]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800365a:	430b      	orrs	r3, r1
 800365c:	6593      	str	r3, [r2, #88]	; 0x58
 800365e:	e003      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003664:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003674:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800367e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d03a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	2b30      	cmp	r3, #48	; 0x30
 8003690:	d01f      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003692:	2b30      	cmp	r3, #48	; 0x30
 8003694:	d819      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003696:	2b20      	cmp	r3, #32
 8003698:	d00c      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800369a:	2b20      	cmp	r3, #32
 800369c:	d815      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d019      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d111      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a6:	4b77      	ldr	r3, [pc, #476]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	4a76      	ldr	r2, [pc, #472]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036b2:	e011      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b8:	3308      	adds	r3, #8
 80036ba:	2102      	movs	r1, #2
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 fac5 	bl	8004c4c <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036c8:	e006      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036d0:	e002      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80036d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036e0:	4b68      	ldr	r3, [pc, #416]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ee:	4a65      	ldr	r2, [pc, #404]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f0:	430b      	orrs	r3, r1
 80036f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036f4:	e003      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800370a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800370e:	2300      	movs	r3, #0
 8003710:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003714:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003718:	460b      	mov	r3, r1
 800371a:	4313      	orrs	r3, r2
 800371c:	d051      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003728:	d035      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800372a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372e:	d82e      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003734:	d031      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003736:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800373a:	d828      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800373c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003740:	d01a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003746:	d822      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800374c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003750:	d007      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003752:	e01c      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003754:	4b4b      	ldr	r3, [pc, #300]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	4a4a      	ldr	r2, [pc, #296]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800375a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003760:	e01c      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003766:	3308      	adds	r3, #8
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f001 fa6e 	bl	8004c4c <RCCEx_PLL2_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003776:	e011      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377c:	3328      	adds	r3, #40	; 0x28
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fb15 	bl	8004db0 <RCCEx_PLL3_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800378c:	e006      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003794:	e002      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800379a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b2:	4a34      	ldr	r2, [pc, #208]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6513      	str	r3, [r2, #80]	; 0x50
 80037b8:	e003      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80037ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037d2:	2300      	movs	r3, #0
 80037d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80037d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80037dc:	460b      	mov	r3, r1
 80037de:	4313      	orrs	r3, r2
 80037e0:	d056      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ec:	d033      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80037ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f2:	d82c      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037f8:	d02f      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80037fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037fe:	d826      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003800:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003804:	d02b      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003806:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800380a:	d820      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800380c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003810:	d012      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003816:	d81a      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d022      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003820:	d115      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003826:	3308      	adds	r3, #8
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fa0e 	bl	8004c4c <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003836:	e015      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383c:	3328      	adds	r3, #40	; 0x28
 800383e:	2101      	movs	r1, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fab5 	bl	8004db0 <RCCEx_PLL3_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800384c:	e00a      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003854:	e006      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003856:	bf00      	nop
 8003858:	e004      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003864:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10d      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003870:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800387a:	4a02      	ldr	r2, [pc, #8]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800387c:	430b      	orrs	r3, r1
 800387e:	6513      	str	r3, [r2, #80]	; 0x50
 8003880:	e006      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003882:	bf00      	nop
 8003884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800388c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800389c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038a6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d055      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038bc:	d033      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80038be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038c2:	d82c      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c8:	d02f      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ce:	d826      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038d4:	d02b      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80038d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038da:	d820      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e0:	d012      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80038e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e6:	d81a      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d022      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80038ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038f0:	d115      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f6:	3308      	adds	r3, #8
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 f9a6 	bl	8004c4c <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003906:	e015      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390c:	3328      	adds	r3, #40	; 0x28
 800390e:	2101      	movs	r1, #1
 8003910:	4618      	mov	r0, r3
 8003912:	f001 fa4d 	bl	8004db0 <RCCEx_PLL3_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800391c:	e00a      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003924:	e006      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003926:	bf00      	nop
 8003928:	e004      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800392a:	bf00      	nop
 800392c:	e002      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800392e:	bf00      	nop
 8003930:	e000      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10b      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800393c:	4ba3      	ldr	r3, [pc, #652]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800394c:	4a9f      	ldr	r2, [pc, #636]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800394e:	430b      	orrs	r3, r1
 8003950:	6593      	str	r3, [r2, #88]	; 0x58
 8003952:	e003      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003958:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003972:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d037      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003986:	d00e      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398c:	d816      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003996:	d111      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003998:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	4a8b      	ldr	r2, [pc, #556]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800399e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039a4:	e00f      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039aa:	3308      	adds	r3, #8
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 f94c 	bl	8004c4c <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039ba:	e004      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039c2:	e000      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80039c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ce:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a7b      	ldr	r2, [pc, #492]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	6513      	str	r3, [r2, #80]	; 0x50
 80039e2:	e003      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80039f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	d039      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d81c      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a59 	.word	0x08003a59
 8003a20:	08003a2d 	.word	0x08003a2d
 8003a24:	08003a3b 	.word	0x08003a3b
 8003a28:	08003a59 	.word	0x08003a59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2c:	4b67      	ldr	r3, [pc, #412]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	4a66      	ldr	r2, [pc, #408]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a38:	e00f      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3e:	3308      	adds	r3, #8
 8003a40:	2102      	movs	r1, #2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 f902 	bl	8004c4c <RCCEx_PLL2_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a62:	4b5a      	ldr	r3, [pc, #360]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	f023 0103 	bic.w	r1, r3, #3
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a70:	4a56      	ldr	r2, [pc, #344]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a72:	430b      	orrs	r3, r1
 8003a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a76:	e003      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f000 809f 	beq.w	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa2:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a4a      	ldr	r2, [pc, #296]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aae:	f7fd fedd 	bl	800186c <HAL_GetTick>
 8003ab2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab8:	f7fd fed8 	bl	800186c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b64      	cmp	r3, #100	; 0x64
 8003ac6:	d903      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ace:	e005      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad0:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ed      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003adc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d179      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ae4:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003af0:	4053      	eors	r3, r2
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d015      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afa:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b06:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b12:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a2d      	ldr	r2, [pc, #180]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b1e:	4a2b      	ldr	r2, [pc, #172]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b32:	d118      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd fe9a 	bl	800186c <HAL_GetTick>
 8003b38:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b3c:	e00d      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fd fe95 	bl	800186c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b48:	1ad2      	subs	r2, r2, r3
 8003b4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d903      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003b58:	e005      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0eb      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d129      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7e:	d10e      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b90:	091a      	lsrs	r2, r3, #4
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6113      	str	r3, [r2, #16]
 8003b9c:	e005      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ba8:	6113      	str	r3, [r2, #16]
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bba:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc0:	e00e      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003bca:	e009      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	58024800 	.word	0x58024800
 8003bd4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f002 0301 	and.w	r3, r2, #1
 8003bec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bf6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f000 8089 	beq.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c08:	2b28      	cmp	r3, #40	; 0x28
 8003c0a:	d86b      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003ced 	.word	0x08003ced
 8003c18:	08003ce5 	.word	0x08003ce5
 8003c1c:	08003ce5 	.word	0x08003ce5
 8003c20:	08003ce5 	.word	0x08003ce5
 8003c24:	08003ce5 	.word	0x08003ce5
 8003c28:	08003ce5 	.word	0x08003ce5
 8003c2c:	08003ce5 	.word	0x08003ce5
 8003c30:	08003ce5 	.word	0x08003ce5
 8003c34:	08003cb9 	.word	0x08003cb9
 8003c38:	08003ce5 	.word	0x08003ce5
 8003c3c:	08003ce5 	.word	0x08003ce5
 8003c40:	08003ce5 	.word	0x08003ce5
 8003c44:	08003ce5 	.word	0x08003ce5
 8003c48:	08003ce5 	.word	0x08003ce5
 8003c4c:	08003ce5 	.word	0x08003ce5
 8003c50:	08003ce5 	.word	0x08003ce5
 8003c54:	08003ccf 	.word	0x08003ccf
 8003c58:	08003ce5 	.word	0x08003ce5
 8003c5c:	08003ce5 	.word	0x08003ce5
 8003c60:	08003ce5 	.word	0x08003ce5
 8003c64:	08003ce5 	.word	0x08003ce5
 8003c68:	08003ce5 	.word	0x08003ce5
 8003c6c:	08003ce5 	.word	0x08003ce5
 8003c70:	08003ce5 	.word	0x08003ce5
 8003c74:	08003ced 	.word	0x08003ced
 8003c78:	08003ce5 	.word	0x08003ce5
 8003c7c:	08003ce5 	.word	0x08003ce5
 8003c80:	08003ce5 	.word	0x08003ce5
 8003c84:	08003ce5 	.word	0x08003ce5
 8003c88:	08003ce5 	.word	0x08003ce5
 8003c8c:	08003ce5 	.word	0x08003ce5
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003ced 	.word	0x08003ced
 8003c98:	08003ce5 	.word	0x08003ce5
 8003c9c:	08003ce5 	.word	0x08003ce5
 8003ca0:	08003ce5 	.word	0x08003ce5
 8003ca4:	08003ce5 	.word	0x08003ce5
 8003ca8:	08003ce5 	.word	0x08003ce5
 8003cac:	08003ce5 	.word	0x08003ce5
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003ced 	.word	0x08003ced
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 ffc3 	bl	8004c4c <RCCEx_PLL2_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e00f      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd2:	3328      	adds	r3, #40	; 0x28
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 f86a 	bl	8004db0 <RCCEx_PLL3_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ce2:	e004      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cea:	e000      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cf6:	4bbf      	ldr	r3, [pc, #764]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d04:	4abb      	ldr	r2, [pc, #748]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d06:	430b      	orrs	r3, r1
 8003d08:	6553      	str	r3, [r2, #84]	; 0x54
 8003d0a:	e003      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1c:	f002 0302 	and.w	r3, r2, #2
 8003d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4313      	orrs	r3, r2
 8003d32:	d041      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d824      	bhi.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d91 	.word	0x08003d91
 8003d48:	08003d5d 	.word	0x08003d5d
 8003d4c:	08003d73 	.word	0x08003d73
 8003d50:	08003d91 	.word	0x08003d91
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	08003d91 	.word	0x08003d91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d60:	3308      	adds	r3, #8
 8003d62:	2101      	movs	r1, #1
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 ff71 	bl	8004c4c <RCCEx_PLL2_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d70:	e00f      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d76:	3328      	adds	r3, #40	; 0x28
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 f818 	bl	8004db0 <RCCEx_PLL3_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d86:	e004      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d9a:	4b96      	ldr	r3, [pc, #600]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	f023 0107 	bic.w	r1, r3, #7
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da8:	4a92      	ldr	r2, [pc, #584]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003daa:	430b      	orrs	r3, r1
 8003dac:	6553      	str	r3, [r2, #84]	; 0x54
 8003dae:	e003      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f002 0304 	and.w	r3, r2, #4
 8003dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	d044      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d825      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003de4:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003e39 	.word	0x08003e39
 8003df0:	08003e05 	.word	0x08003e05
 8003df4:	08003e1b 	.word	0x08003e1b
 8003df8:	08003e39 	.word	0x08003e39
 8003dfc:	08003e39 	.word	0x08003e39
 8003e00:	08003e39 	.word	0x08003e39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e08:	3308      	adds	r3, #8
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 ff1d 	bl	8004c4c <RCCEx_PLL2_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e18:	e00f      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1e:	3328      	adds	r3, #40	; 0x28
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 ffc4 	bl	8004db0 <RCCEx_PLL3_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e2e:	e004      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e36:	e000      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e42:	4b6c      	ldr	r3, [pc, #432]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	f023 0107 	bic.w	r1, r3, #7
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e52:	4a68      	ldr	r2, [pc, #416]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6593      	str	r3, [r2, #88]	; 0x58
 8003e58:	e003      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	f002 0320 	and.w	r3, r2, #32
 8003e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e72:	2300      	movs	r3, #0
 8003e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	d055      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e8e:	d033      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e94:	d82c      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9a:	d02f      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d826      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ea2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ea6:	d02b      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003ea8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003eac:	d820      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb2:	d012      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb8:	d81a      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d022      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ec2:	d115      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec8:	3308      	adds	r3, #8
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 febd 	bl	8004c4c <RCCEx_PLL2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ed8:	e015      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ede:	3328      	adds	r3, #40	; 0x28
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 ff64 	bl	8004db0 <RCCEx_PLL3_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003eee:	e00a      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ef6:	e006      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ef8:	bf00      	nop
 8003efa:	e004      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003efc:	bf00      	nop
 8003efe:	e002      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f00:	bf00      	nop
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	4a35      	ldr	r2, [pc, #212]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6553      	str	r3, [r2, #84]	; 0x54
 8003f24:	e003      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	d058      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f5a:	d033      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f60:	d82c      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	d02f      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6c:	d826      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f72:	d02b      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f78:	d820      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7e:	d012      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f84:	d81a      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d022      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8e:	d115      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f94:	3308      	adds	r3, #8
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fe57 	bl	8004c4c <RCCEx_PLL2_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003faa:	3328      	adds	r3, #40	; 0x28
 8003fac:	2102      	movs	r1, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fefe 	bl	8004db0 <RCCEx_PLL3_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fc2:	e006      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e004      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e002      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fcc:	bf00      	nop
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fea:	4a02      	ldr	r2, [pc, #8]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003ff2:	bf00      	nop
 8003ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ffc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800400c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004010:	2300      	movs	r3, #0
 8004012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004016:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800401a:	460b      	mov	r3, r1
 800401c:	4313      	orrs	r3, r2
 800401e:	d055      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004024:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004028:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800402c:	d033      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800402e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004032:	d82c      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004038:	d02f      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800403a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403e:	d826      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004040:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004044:	d02b      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004046:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800404a:	d820      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800404c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004050:	d012      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004056:	d81a      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d022      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800405c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004060:	d115      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004066:	3308      	adds	r3, #8
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fdee 	bl	8004c4c <RCCEx_PLL2_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004076:	e015      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407c:	3328      	adds	r3, #40	; 0x28
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fe95 	bl	8004db0 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800408c:	e00a      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004096:	bf00      	nop
 8004098:	e004      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040ac:	4ba1      	ldr	r3, [pc, #644]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040bc:	4a9d      	ldr	r2, [pc, #628]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040be:	430b      	orrs	r3, r1
 80040c0:	6593      	str	r3, [r2, #88]	; 0x58
 80040c2:	e003      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f002 0308 	and.w	r3, r2, #8
 80040d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80040e6:	460b      	mov	r3, r1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	d01e      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fe:	3328      	adds	r3, #40	; 0x28
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fe54 	bl	8004db0 <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004114:	4b87      	ldr	r3, [pc, #540]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004124:	4a83      	ldr	r2, [pc, #524]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004126:	430b      	orrs	r3, r1
 8004128:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f002 0310 	and.w	r3, r2, #16
 8004136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800413a:	2300      	movs	r3, #0
 800413c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004140:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004144:	460b      	mov	r3, r1
 8004146:	4313      	orrs	r3, r2
 8004148:	d01e      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004156:	d10c      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415c:	3328      	adds	r3, #40	; 0x28
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fe25 	bl	8004db0 <RCCEx_PLL3_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004172:	4b70      	ldr	r3, [pc, #448]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004182:	4a6c      	ldr	r2, [pc, #432]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004184:	430b      	orrs	r3, r1
 8004186:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004198:	2300      	movs	r3, #0
 800419a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800419e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041a2:	460b      	mov	r3, r1
 80041a4:	4313      	orrs	r3, r2
 80041a6:	d03e      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b4:	d022      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80041b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ba:	d81b      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80041c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c4:	d00b      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80041c6:	e015      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	3308      	adds	r3, #8
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fd3b 	bl	8004c4c <RCCEx_PLL2_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041dc:	e00f      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	3328      	adds	r3, #40	; 0x28
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fde2 	bl	8004db0 <RCCEx_PLL3_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041f2:	e004      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80041fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10b      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004206:	4b4b      	ldr	r3, [pc, #300]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004216:	4a47      	ldr	r2, [pc, #284]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004218:	430b      	orrs	r3, r1
 800421a:	6593      	str	r3, [r2, #88]	; 0x58
 800421c:	e003      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004232:	67bb      	str	r3, [r7, #120]	; 0x78
 8004234:	2300      	movs	r3, #0
 8004236:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004238:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800423c:	460b      	mov	r3, r1
 800423e:	4313      	orrs	r3, r2
 8004240:	d03b      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800424e:	d01f      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004250:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004254:	d818      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425a:	d003      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800425c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004260:	d007      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004262:	e011      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004264:	4b33      	ldr	r3, [pc, #204]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a32      	ldr	r2, [pc, #200]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004270:	e00f      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004276:	3328      	adds	r3, #40	; 0x28
 8004278:	2101      	movs	r1, #1
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fd98 	bl	8004db0 <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004286:	e004      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800428e:	e000      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	4a22      	ldr	r2, [pc, #136]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6553      	str	r3, [r2, #84]	; 0x54
 80042b0:	e003      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80042c6:	673b      	str	r3, [r7, #112]	; 0x70
 80042c8:	2300      	movs	r3, #0
 80042ca:	677b      	str	r3, [r7, #116]	; 0x74
 80042cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d034      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d007      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80042e6:	e011      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4a11      	ldr	r2, [pc, #68]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042f4:	e00e      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fa:	3308      	adds	r3, #8
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fca4 	bl	8004c4c <RCCEx_PLL2_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800430a:	e003      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432a:	4a02      	ldr	r2, [pc, #8]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432c:	430b      	orrs	r3, r1
 800432e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004330:	e006      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800433c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800434c:	66bb      	str	r3, [r7, #104]	; 0x68
 800434e:	2300      	movs	r3, #0
 8004350:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004352:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004356:	460b      	mov	r3, r1
 8004358:	4313      	orrs	r3, r2
 800435a:	d00c      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	3328      	adds	r3, #40	; 0x28
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fd23 	bl	8004db0 <RCCEx_PLL3_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004382:	663b      	str	r3, [r7, #96]	; 0x60
 8004384:	2300      	movs	r3, #0
 8004386:	667b      	str	r3, [r7, #100]	; 0x64
 8004388:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800438c:	460b      	mov	r3, r1
 800438e:	4313      	orrs	r3, r2
 8004390:	d038      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439e:	d018      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a4:	d811      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043aa:	d014      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	d80b      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d011      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80043b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ba:	d106      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043bc:	4bc3      	ldr	r3, [pc, #780]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	4ac2      	ldr	r2, [pc, #776]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043c8:	e008      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043d0:	e004      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80043da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10b      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043e4:	4bb9      	ldr	r3, [pc, #740]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f4:	4ab5      	ldr	r2, [pc, #724]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f6:	430b      	orrs	r3, r1
 80043f8:	6553      	str	r3, [r2, #84]	; 0x54
 80043fa:	e003      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004400:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004410:	65bb      	str	r3, [r7, #88]	; 0x58
 8004412:	2300      	movs	r3, #0
 8004414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004416:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800441a:	460b      	mov	r3, r1
 800441c:	4313      	orrs	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004420:	4baa      	ldr	r3, [pc, #680]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004424:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442e:	4aa7      	ldr	r2, [pc, #668]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004430:	430b      	orrs	r3, r1
 8004432:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004440:	653b      	str	r3, [r7, #80]	; 0x50
 8004442:	2300      	movs	r3, #0
 8004444:	657b      	str	r3, [r7, #84]	; 0x54
 8004446:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004450:	4b9e      	ldr	r3, [pc, #632]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004460:	4a9a      	ldr	r2, [pc, #616]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004462:	430b      	orrs	r3, r1
 8004464:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004472:	64bb      	str	r3, [r7, #72]	; 0x48
 8004474:	2300      	movs	r3, #0
 8004476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004478:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800447c:	460b      	mov	r3, r1
 800447e:	4313      	orrs	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004482:	4b92      	ldr	r3, [pc, #584]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004490:	4a8e      	ldr	r2, [pc, #568]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004492:	430b      	orrs	r3, r1
 8004494:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044a2:	643b      	str	r3, [r7, #64]	; 0x40
 80044a4:	2300      	movs	r3, #0
 80044a6:	647b      	str	r3, [r7, #68]	; 0x44
 80044a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044b2:	4b86      	ldr	r3, [pc, #536]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	4a85      	ldr	r2, [pc, #532]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044bc:	6113      	str	r3, [r2, #16]
 80044be:	4b83      	ldr	r3, [pc, #524]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c0:	6919      	ldr	r1, [r3, #16]
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80044ca:	4a80      	ldr	r2, [pc, #512]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80044dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044de:	2300      	movs	r3, #0
 80044e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80044e6:	460b      	mov	r3, r1
 80044e8:	4313      	orrs	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044ec:	4b77      	ldr	r3, [pc, #476]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	4a74      	ldr	r2, [pc, #464]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
 800450e:	2300      	movs	r3, #0
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
 8004512:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800451c:	4b6b      	ldr	r3, [pc, #428]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800452c:	4a67      	ldr	r2, [pc, #412]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452e:	430b      	orrs	r3, r1
 8004530:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	2100      	movs	r1, #0
 800453c:	62b9      	str	r1, [r7, #40]	; 0x28
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004544:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d011      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004552:	3308      	adds	r3, #8
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fb78 	bl	8004c4c <RCCEx_PLL2_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800456e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	2100      	movs	r1, #0
 800457c:	6239      	str	r1, [r7, #32]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
 8004584:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004588:	460b      	mov	r3, r1
 800458a:	4313      	orrs	r3, r2
 800458c:	d011      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004592:	3308      	adds	r3, #8
 8004594:	2101      	movs	r1, #1
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fb58 	bl	8004c4c <RCCEx_PLL2_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	2100      	movs	r1, #0
 80045bc:	61b9      	str	r1, [r7, #24]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045c8:	460b      	mov	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	d011      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d2:	3308      	adds	r3, #8
 80045d4:	2102      	movs	r1, #2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fb38 	bl	8004c4c <RCCEx_PLL2_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	2100      	movs	r1, #0
 80045fc:	6139      	str	r1, [r7, #16]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004608:	460b      	mov	r3, r1
 800460a:	4313      	orrs	r3, r2
 800460c:	d011      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004612:	3328      	adds	r3, #40	; 0x28
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fbca 	bl	8004db0 <RCCEx_PLL3_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800462e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	2100      	movs	r1, #0
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004648:	460b      	mov	r3, r1
 800464a:	4313      	orrs	r3, r2
 800464c:	d011      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004652:	3328      	adds	r3, #40	; 0x28
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fbaa 	bl	8004db0 <RCCEx_PLL3_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800466e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	2100      	movs	r1, #0
 800467c:	6039      	str	r1, [r7, #0]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004688:	460b      	mov	r3, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	d011      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004692:	3328      	adds	r3, #40	; 0x28
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fb8a 	bl	8004db0 <RCCEx_PLL3_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80046b2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e000      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80046c6:	46bd      	mov	sp, r7
 80046c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046cc:	58024400 	.word	0x58024400

080046d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046d4:	f7fe fd96 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 80046d8:	4602      	mov	r2, r0
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	4904      	ldr	r1, [pc, #16]	; (80046f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046e6:	5ccb      	ldrb	r3, [r1, r3]
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	58024400 	.word	0x58024400
 80046f8:	080076b4 	.word	0x080076b4

080046fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004704:	4ba1      	ldr	r3, [pc, #644]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800470e:	4b9f      	ldr	r3, [pc, #636]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	0b1b      	lsrs	r3, r3, #12
 8004714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004718:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800471a:	4b9c      	ldr	r3, [pc, #624]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004726:	4b99      	ldr	r3, [pc, #612]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472a:	08db      	lsrs	r3, r3, #3
 800472c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8111 	beq.w	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b02      	cmp	r3, #2
 800474e:	f000 8083 	beq.w	8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b02      	cmp	r3, #2
 8004756:	f200 80a1 	bhi.w	800489c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d056      	beq.n	8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004766:	e099      	b.n	800489c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004768:	4b88      	ldr	r3, [pc, #544]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d02d      	beq.n	80047d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004774:	4b85      	ldr	r3, [pc, #532]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	08db      	lsrs	r3, r3, #3
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	4a84      	ldr	r2, [pc, #528]	; (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
 8004784:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479e:	4b7b      	ldr	r3, [pc, #492]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047ce:	e087      	b.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e2:	4b6a      	ldr	r3, [pc, #424]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004812:	e065      	b.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004826:	4b59      	ldr	r3, [pc, #356]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	ed97 6a03 	vldr	s12, [r7, #12]
 800483a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004856:	e043      	b.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b48      	ldr	r3, [pc, #288]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a03 	vldr	s12, [r7, #12]
 800487e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489a:	e021      	b.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b37      	ldr	r3, [pc, #220]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048e0:	4b2a      	ldr	r3, [pc, #168]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	0a5b      	lsrs	r3, r3, #9
 80048e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80048fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004906:	ee17 2a90 	vmov	r2, s15
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800490e:	4b1f      	ldr	r3, [pc, #124]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004928:	edd7 6a07 	vldr	s13, [r7, #28]
 800492c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004934:	ee17 2a90 	vmov	r2, s15
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800493c:	4b13      	ldr	r3, [pc, #76]	; (800498c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	0e1b      	lsrs	r3, r3, #24
 8004942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004956:	edd7 6a07 	vldr	s13, [r7, #28]
 800495a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004962:	ee17 2a90 	vmov	r2, s15
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800496a:	e008      	b.n	800497e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
}
 800497e:	bf00      	nop
 8004980:	3724      	adds	r7, #36	; 0x24
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	58024400 	.word	0x58024400
 8004990:	03d09000 	.word	0x03d09000
 8004994:	46000000 	.word	0x46000000
 8004998:	4c742400 	.word	0x4c742400
 800499c:	4a742400 	.word	0x4a742400
 80049a0:	4af42400 	.word	0x4af42400

080049a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b089      	sub	sp, #36	; 0x24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ac:	4ba1      	ldr	r3, [pc, #644]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049b6:	4b9f      	ldr	r3, [pc, #636]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	0d1b      	lsrs	r3, r3, #20
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049c2:	4b9c      	ldr	r3, [pc, #624]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049ce:	4b99      	ldr	r3, [pc, #612]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	08db      	lsrs	r3, r3, #3
 80049d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	fb02 f303 	mul.w	r3, r2, r3
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8111 	beq.w	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	f000 8083 	beq.w	8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	f200 80a1 	bhi.w	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d056      	beq.n	8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a0e:	e099      	b.n	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a10:	4b88      	ldr	r3, [pc, #544]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02d      	beq.n	8004a78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a1c:	4b85      	ldr	r3, [pc, #532]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	08db      	lsrs	r3, r3, #3
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	4a84      	ldr	r2, [pc, #528]	; (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	ee07 3a90 	vmov	s15, r3
 8004a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b7b      	ldr	r3, [pc, #492]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a76:	e087      	b.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b6a      	ldr	r3, [pc, #424]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aba:	e065      	b.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ace:	4b59      	ldr	r3, [pc, #356]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afe:	e043      	b.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b48      	ldr	r3, [pc, #288]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b42:	e021      	b.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b88:	4b2a      	ldr	r3, [pc, #168]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	0a5b      	lsrs	r3, r3, #9
 8004b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bae:	ee17 2a90 	vmov	r2, s15
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	0c1b      	lsrs	r3, r3, #16
 8004bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc0:	ee07 3a90 	vmov	s15, r3
 8004bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bdc:	ee17 2a90 	vmov	r2, s15
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004be4:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	0e1b      	lsrs	r3, r3, #24
 8004bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0a:	ee17 2a90 	vmov	r2, s15
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c12:	e008      	b.n	8004c26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
}
 8004c26:	bf00      	nop
 8004c28:	3724      	adds	r7, #36	; 0x24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	58024400 	.word	0x58024400
 8004c38:	03d09000 	.word	0x03d09000
 8004c3c:	46000000 	.word	0x46000000
 8004c40:	4c742400 	.word	0x4c742400
 8004c44:	4a742400 	.word	0x4a742400
 8004c48:	4af42400 	.word	0x4af42400

08004c4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c5a:	4b53      	ldr	r3, [pc, #332]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d101      	bne.n	8004c6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e099      	b.n	8004d9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c6a:	4b4f      	ldr	r3, [pc, #316]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a4e      	ldr	r2, [pc, #312]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004c70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c76:	f7fc fdf9 	bl	800186c <HAL_GetTick>
 8004c7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c7c:	e008      	b.n	8004c90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c7e:	f7fc fdf5 	bl	800186c <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e086      	b.n	8004d9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c90:	4b45      	ldr	r3, [pc, #276]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f0      	bne.n	8004c7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c9c:	4b42      	ldr	r3, [pc, #264]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	031b      	lsls	r3, r3, #12
 8004caa:	493f      	ldr	r1, [pc, #252]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	628b      	str	r3, [r1, #40]	; 0x28
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	025b      	lsls	r3, r3, #9
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	061b      	lsls	r3, r3, #24
 8004cdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ce0:	4931      	ldr	r1, [pc, #196]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ce6:	4b30      	ldr	r3, [pc, #192]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	492d      	ldr	r1, [pc, #180]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cf8:	4b2b      	ldr	r3, [pc, #172]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	f023 0220 	bic.w	r2, r3, #32
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	4928      	ldr	r1, [pc, #160]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d0a:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	f023 0310 	bic.w	r3, r3, #16
 8004d14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1a:	4b24      	ldr	r3, [pc, #144]	; (8004dac <RCCEx_PLL2_Config+0x160>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	69d2      	ldr	r2, [r2, #28]
 8004d22:	00d2      	lsls	r2, r2, #3
 8004d24:	4920      	ldr	r1, [pc, #128]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d2a:	4b1f      	ldr	r3, [pc, #124]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d30:	f043 0310 	orr.w	r3, r3, #16
 8004d34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	4a19      	ldr	r2, [pc, #100]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d48:	e00f      	b.n	8004d6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d106      	bne.n	8004d5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d50:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d5c:	e005      	b.n	8004d6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	4a11      	ldr	r2, [pc, #68]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d76:	f7fc fd79 	bl	800186c <HAL_GetTick>
 8004d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d7c:	e008      	b.n	8004d90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d7e:	f7fc fd75 	bl	800186c <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e006      	b.n	8004d9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <RCCEx_PLL2_Config+0x15c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	58024400 	.word	0x58024400
 8004dac:	ffff0007 	.word	0xffff0007

08004db0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dbe:	4b53      	ldr	r3, [pc, #332]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d101      	bne.n	8004dce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e099      	b.n	8004f02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dce:	4b4f      	ldr	r3, [pc, #316]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a4e      	ldr	r2, [pc, #312]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dda:	f7fc fd47 	bl	800186c <HAL_GetTick>
 8004dde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004de0:	e008      	b.n	8004df4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004de2:	f7fc fd43 	bl	800186c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e086      	b.n	8004f02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004df4:	4b45      	ldr	r3, [pc, #276]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f0      	bne.n	8004de2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e00:	4b42      	ldr	r3, [pc, #264]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	051b      	lsls	r3, r3, #20
 8004e0e:	493f      	ldr	r1, [pc, #252]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	628b      	str	r3, [r1, #40]	; 0x28
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	025b      	lsls	r3, r3, #9
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	041b      	lsls	r3, r3, #16
 8004e32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	061b      	lsls	r3, r3, #24
 8004e40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e44:	4931      	ldr	r1, [pc, #196]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e4a:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	492d      	ldr	r1, [pc, #180]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	4928      	ldr	r1, [pc, #160]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e6e:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4a26      	ldr	r2, [pc, #152]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e7a:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7e:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <RCCEx_PLL3_Config+0x160>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	69d2      	ldr	r2, [r2, #28]
 8004e86:	00d2      	lsls	r2, r2, #3
 8004e88:	4920      	ldr	r1, [pc, #128]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e8e:	4b1f      	ldr	r3, [pc, #124]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ea0:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004eac:	e00f      	b.n	8004ece <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d106      	bne.n	8004ec2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004eb4:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004eba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ebe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ec0:	e005      	b.n	8004ece <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ecc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eda:	f7fc fcc7 	bl	800186c <HAL_GetTick>
 8004ede:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ee0:	e008      	b.n	8004ef4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ee2:	f7fc fcc3 	bl	800186c <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e006      	b.n	8004f02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <RCCEx_PLL3_Config+0x15c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	58024400 	.word	0x58024400
 8004f10:	ffff0007 	.word	0xffff0007

08004f14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e10f      	b.n	8005146 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a87      	ldr	r2, [pc, #540]	; (8005150 <HAL_SPI_Init+0x23c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00f      	beq.n	8004f56 <HAL_SPI_Init+0x42>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a86      	ldr	r2, [pc, #536]	; (8005154 <HAL_SPI_Init+0x240>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00a      	beq.n	8004f56 <HAL_SPI_Init+0x42>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a84      	ldr	r2, [pc, #528]	; (8005158 <HAL_SPI_Init+0x244>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d005      	beq.n	8004f56 <HAL_SPI_Init+0x42>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	d901      	bls.n	8004f56 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e0f7      	b.n	8005146 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fd5a 	bl	8005a10 <SPI_GetPacketSize>
 8004f5c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7b      	ldr	r2, [pc, #492]	; (8005150 <HAL_SPI_Init+0x23c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00c      	beq.n	8004f82 <HAL_SPI_Init+0x6e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a79      	ldr	r2, [pc, #484]	; (8005154 <HAL_SPI_Init+0x240>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <HAL_SPI_Init+0x6e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a78      	ldr	r2, [pc, #480]	; (8005158 <HAL_SPI_Init+0x244>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d002      	beq.n	8004f82 <HAL_SPI_Init+0x6e>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d811      	bhi.n	8004fa6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f86:	4a72      	ldr	r2, [pc, #456]	; (8005150 <HAL_SPI_Init+0x23c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a70      	ldr	r2, [pc, #448]	; (8005154 <HAL_SPI_Init+0x240>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_SPI_Init+0x8c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a6f      	ldr	r2, [pc, #444]	; (8005158 <HAL_SPI_Init+0x244>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d104      	bne.n	8004faa <HAL_SPI_Init+0x96>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d901      	bls.n	8004faa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0cd      	b.n	8005146 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc f9e4 	bl	800138c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004fe6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff0:	d119      	bne.n	8005026 <HAL_SPI_Init+0x112>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ffa:	d103      	bne.n	8005004 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10c      	bne.n	8005026 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005014:	d107      	bne.n	8005026 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005024:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00f      	beq.n	8005052 <HAL_SPI_Init+0x13e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d90b      	bls.n	8005052 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e007      	b.n	8005062 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69da      	ldr	r2, [r3, #28]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	431a      	orrs	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	ea42 0103 	orr.w	r1, r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c2:	ea42 0103 	orr.w	r1, r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d113      	bne.n	8005102 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005100:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40013000 	.word	0x40013000
 8005154:	40003800 	.word	0x40003800
 8005158:	40003c00 	.word	0x40003c00

0800515c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3320      	adds	r3, #32
 8005172:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_SPI_Transmit+0x2a>
 8005182:	2302      	movs	r3, #2
 8005184:	e1e1      	b.n	800554a <HAL_SPI_Transmit+0x3ee>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800518e:	f7fc fb6d 	bl	800186c <HAL_GetTick>
 8005192:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	d007      	beq.n	80051b0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80051a0:	2302      	movs	r3, #2
 80051a2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80051ac:	7efb      	ldrb	r3, [r7, #27]
 80051ae:	e1cc      	b.n	800554a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_SPI_Transmit+0x60>
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d107      	bne.n	80051cc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80051c8:	7efb      	ldrb	r3, [r7, #27]
 80051ca:	e1be      	b.n	800554a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2203      	movs	r2, #3
 80051d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	88fa      	ldrh	r2, [r7, #6]
 80051e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	88fa      	ldrh	r2, [r7, #6]
 80051ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800521c:	d108      	bne.n	8005230 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e009      	b.n	8005244 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005242:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	4b96      	ldr	r3, [pc, #600]	; (80054a4 <HAL_SPI_Transmit+0x348>)
 800524c:	4013      	ands	r3, r2
 800524e:	88f9      	ldrh	r1, [r7, #6]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	430b      	orrs	r3, r1
 8005256:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005270:	d107      	bne.n	8005282 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005280:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d947      	bls.n	800531a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800528a:	e03f      	b.n	800530c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d114      	bne.n	80052c4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052aa:	1d1a      	adds	r2, r3, #4
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052c2:	e023      	b.n	800530c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052c4:	f7fc fad2 	bl	800186c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d803      	bhi.n	80052dc <HAL_SPI_Transmit+0x180>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052da:	d102      	bne.n	80052e2 <HAL_SPI_Transmit+0x186>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d114      	bne.n	800530c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 fac6 	bl	8005874 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e11e      	b.n	800554a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1b9      	bne.n	800528c <HAL_SPI_Transmit+0x130>
 8005318:	e0f1      	b.n	80054fe <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	2b07      	cmp	r3, #7
 8005320:	f240 80e6 	bls.w	80054f0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005324:	e05d      	b.n	80053e2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b02      	cmp	r3, #2
 8005332:	d132      	bne.n	800539a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	d918      	bls.n	8005372 <HAL_SPI_Transmit+0x216>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d014      	beq.n	8005372 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005358:	1d1a      	adds	r2, r3, #4
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b02      	subs	r3, #2
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005370:	e037      	b.n	80053e2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005376:	881a      	ldrh	r2, [r3, #0]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005380:	1c9a      	adds	r2, r3, #2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005398:	e023      	b.n	80053e2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800539a:	f7fc fa67 	bl	800186c <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d803      	bhi.n	80053b2 <HAL_SPI_Transmit+0x256>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b0:	d102      	bne.n	80053b8 <HAL_SPI_Transmit+0x25c>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d114      	bne.n	80053e2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fa5b 	bl	8005874 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e0b3      	b.n	800554a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d19b      	bne.n	8005326 <HAL_SPI_Transmit+0x1ca>
 80053ee:	e086      	b.n	80054fe <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d154      	bne.n	80054a8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b03      	cmp	r3, #3
 8005408:	d918      	bls.n	800543c <HAL_SPI_Transmit+0x2e0>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d914      	bls.n	800543c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	1d1a      	adds	r2, r3, #4
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b04      	subs	r3, #4
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800543a:	e059      	b.n	80054f0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d917      	bls.n	8005478 <HAL_SPI_Transmit+0x31c>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d013      	beq.n	8005478 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	881a      	ldrh	r2, [r3, #0]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545e:	1c9a      	adds	r2, r3, #2
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b02      	subs	r3, #2
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005476:	e03b      	b.n	80054f0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3320      	adds	r3, #32
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80054a2:	e025      	b.n	80054f0 <HAL_SPI_Transmit+0x394>
 80054a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a8:	f7fc f9e0 	bl	800186c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d803      	bhi.n	80054c0 <HAL_SPI_Transmit+0x364>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054be:	d102      	bne.n	80054c6 <HAL_SPI_Transmit+0x36a>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d114      	bne.n	80054f0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f9d4 	bl	8005874 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e02c      	b.n	800554a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f af79 	bne.w	80053f0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2200      	movs	r2, #0
 8005506:	2108      	movs	r1, #8
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fa53 	bl	80059b4 <SPI_WaitOnFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551a:	f043 0220 	orr.w	r2, r3, #32
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f9a5 	bl	8005874 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005548:	7efb      	ldrb	r3, [r7, #27]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop

08005554 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3330      	adds	r3, #48	; 0x30
 800556e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_SPI_Receive+0x2a>
 800557a:	2302      	movs	r3, #2
 800557c:	e173      	b.n	8005866 <HAL_SPI_Receive+0x312>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005586:	f7fc f971 	bl	800186c <HAL_GetTick>
 800558a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d007      	beq.n	80055a8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8005598:	2302      	movs	r3, #2
 800559a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055a4:	7ffb      	ldrb	r3, [r7, #31]
 80055a6:	e15e      	b.n	8005866 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Receive+0x60>
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055c0:	7ffb      	ldrb	r3, [r7, #31]
 80055c2:	e150      	b.n	8005866 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2204      	movs	r2, #4
 80055c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005614:	d108      	bne.n	8005628 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e009      	b.n	800563c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800563a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	4b8b      	ldr	r3, [pc, #556]	; (8005870 <HAL_SPI_Receive+0x31c>)
 8005644:	4013      	ands	r3, r2
 8005646:	88f9      	ldrh	r1, [r7, #6]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	430b      	orrs	r3, r1
 800564e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005668:	d107      	bne.n	800567a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005678:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	d948      	bls.n	8005714 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005682:	e040      	b.n	8005706 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	f248 0308 	movw	r3, #32776	; 0x8008
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d014      	beq.n	80056be <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800569c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800569e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a4:	1d1a      	adds	r2, r3, #4
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80056bc:	e023      	b.n	8005706 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056be:	f7fc f8d5 	bl	800186c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d803      	bhi.n	80056d6 <HAL_SPI_Receive+0x182>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056d4:	d102      	bne.n	80056dc <HAL_SPI_Receive+0x188>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d114      	bne.n	8005706 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f8c9 	bl	8005874 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0af      	b.n	8005866 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1b8      	bne.n	8005684 <HAL_SPI_Receive+0x130>
 8005712:	e095      	b.n	8005840 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	2b07      	cmp	r3, #7
 800571a:	f240 808b 	bls.w	8005834 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800571e:	e03f      	b.n	80057a0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d114      	bne.n	8005758 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	8812      	ldrh	r2, [r2, #0]
 8005736:	b292      	uxth	r2, r2
 8005738:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005756:	e023      	b.n	80057a0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005758:	f7fc f888 	bl	800186c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d803      	bhi.n	8005770 <HAL_SPI_Receive+0x21c>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Receive+0x222>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d114      	bne.n	80057a0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f87c 	bl	8005874 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800578a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e062      	b.n	8005866 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1b9      	bne.n	8005720 <HAL_SPI_Receive+0x1cc>
 80057ac:	e048      	b.n	8005840 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d117      	bne.n	80057ec <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c8:	7812      	ldrb	r2, [r2, #0]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80057ea:	e023      	b.n	8005834 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ec:	f7fc f83e 	bl	800186c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d803      	bhi.n	8005804 <HAL_SPI_Receive+0x2b0>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005802:	d102      	bne.n	800580a <HAL_SPI_Receive+0x2b6>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d114      	bne.n	8005834 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f832 	bl	8005874 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e018      	b.n	8005866 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1b6      	bne.n	80057ae <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f817 	bl	8005874 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8005864:	7ffb      	ldrb	r3, [r7, #31]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	ffff0000 	.word	0xffff0000

08005874 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0208 	orr.w	r2, r2, #8
 8005892:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0210 	orr.w	r2, r2, #16
 80058a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6919      	ldr	r1, [r3, #16]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b3c      	ldr	r3, [pc, #240]	; (80059b0 <SPI_CloseTransfer+0x13c>)
 80058c0:	400b      	ands	r3, r1
 80058c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80058d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d014      	beq.n	800590a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00f      	beq.n	800590a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0220 	orr.w	r2, r2, #32
 8005908:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b03      	cmp	r3, #3
 8005914:	d014      	beq.n	8005940 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00f      	beq.n	8005940 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005926:	f043 0204 	orr.w	r2, r3, #4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00f      	beq.n	800596a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005950:	f043 0201 	orr.w	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005968:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00f      	beq.n	8005994 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800597a:	f043 0208 	orr.w	r2, r3, #8
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005992:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	fffffc90 	.word	0xfffffc90

080059b4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059c4:	e010      	b.n	80059e8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c6:	f7fb ff51 	bl	800186c <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d803      	bhi.n	80059de <SPI_WaitOnFlagUntilTimeout+0x2a>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059dc:	d102      	bne.n	80059e4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e00f      	b.n	8005a08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4013      	ands	r3, r2
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d0df      	beq.n	80059c6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3307      	adds	r3, #7
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e042      	b.n	8005ade <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fb fcf6 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2224      	movs	r2, #36	; 0x24
 8005a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0201 	bic.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f983 	bl	8005d94 <UART_SetConfig>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e022      	b.n	8005ade <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fedf 	bl	8006864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 ff66 	bl	80069a8 <UART_CheckIdleState>
 8005adc:	4603      	mov	r3, r0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b08a      	sub	sp, #40	; 0x28
 8005aea:	af02      	add	r7, sp, #8
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d17b      	bne.n	8005bf8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_UART_Transmit+0x26>
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e074      	b.n	8005bfa <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2221      	movs	r2, #33	; 0x21
 8005b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b20:	f7fb fea4 	bl	800186c <HAL_GetTick>
 8005b24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	88fa      	ldrh	r2, [r7, #6]
 8005b2a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3e:	d108      	bne.n	8005b52 <HAL_UART_Transmit+0x6c>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	61bb      	str	r3, [r7, #24]
 8005b50:	e003      	b.n	8005b5a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b5a:	e030      	b.n	8005bbe <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2200      	movs	r2, #0
 8005b64:	2180      	movs	r1, #128	; 0x80
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 ffc8 	bl	8006afc <UART_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e03d      	b.n	8005bfa <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10b      	bne.n	8005b9c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	3302      	adds	r3, #2
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	e007      	b.n	8005bac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	781a      	ldrb	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1c8      	bne.n	8005b5c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2140      	movs	r1, #64	; 0x40
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 ff91 	bl	8006afc <UART_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e006      	b.n	8005bfa <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3720      	adds	r7, #32
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b08a      	sub	sp, #40	; 0x28
 8005c06:	af02      	add	r7, sp, #8
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	f040 80b5 	bne.w	8005d88 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_UART_Receive+0x28>
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e0ad      	b.n	8005d8a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2222      	movs	r2, #34	; 0x22
 8005c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c44:	f7fb fe12 	bl	800186c <HAL_GetTick>
 8005c48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	88fa      	ldrh	r2, [r7, #6]
 8005c4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c62:	d10e      	bne.n	8005c82 <HAL_UART_Receive+0x80>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <HAL_UART_Receive+0x76>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c76:	e02d      	b.n	8005cd4 <HAL_UART_Receive+0xd2>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	22ff      	movs	r2, #255	; 0xff
 8005c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c80:	e028      	b.n	8005cd4 <HAL_UART_Receive+0xd2>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <HAL_UART_Receive+0xa4>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_UART_Receive+0x9a>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	22ff      	movs	r2, #255	; 0xff
 8005c96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c9a:	e01b      	b.n	8005cd4 <HAL_UART_Receive+0xd2>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	227f      	movs	r2, #127	; 0x7f
 8005ca0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ca4:	e016      	b.n	8005cd4 <HAL_UART_Receive+0xd2>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cae:	d10d      	bne.n	8005ccc <HAL_UART_Receive+0xca>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <HAL_UART_Receive+0xc0>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	227f      	movs	r2, #127	; 0x7f
 8005cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cc0:	e008      	b.n	8005cd4 <HAL_UART_Receive+0xd2>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	223f      	movs	r2, #63	; 0x3f
 8005cc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cca:	e003      	b.n	8005cd4 <HAL_UART_Receive+0xd2>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005cda:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce4:	d108      	bne.n	8005cf8 <HAL_UART_Receive+0xf6>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	e003      	b.n	8005d00 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d00:	e036      	b.n	8005d70 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2120      	movs	r1, #32
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 fef5 	bl	8006afc <UART_WaitOnFlagUntilTimeout>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e032      	b.n	8005d8a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10c      	bne.n	8005d44 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	8a7b      	ldrh	r3, [r7, #18]
 8005d34:	4013      	ands	r3, r2
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	3302      	adds	r3, #2
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	e00c      	b.n	8005d5e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	8a7b      	ldrh	r3, [r7, #18]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	4013      	ands	r3, r2
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1c2      	bne.n	8005d02 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d98:	b092      	sub	sp, #72	; 0x48
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	431a      	orrs	r2, r3
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4bbe      	ldr	r3, [pc, #760]	; (80060bc <UART_SetConfig+0x328>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4ab3      	ldr	r2, [pc, #716]	; (80060c0 <UART_SetConfig+0x32c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d004      	beq.n	8005e00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	4baf      	ldr	r3, [pc, #700]	; (80060c4 <UART_SetConfig+0x330>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	f023 010f 	bic.w	r1, r3, #15
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4aa6      	ldr	r2, [pc, #664]	; (80060c8 <UART_SetConfig+0x334>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d177      	bne.n	8005f24 <UART_SetConfig+0x190>
 8005e34:	4ba5      	ldr	r3, [pc, #660]	; (80060cc <UART_SetConfig+0x338>)
 8005e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e3c:	2b28      	cmp	r3, #40	; 0x28
 8005e3e:	d86d      	bhi.n	8005f1c <UART_SetConfig+0x188>
 8005e40:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <UART_SetConfig+0xb4>)
 8005e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e46:	bf00      	nop
 8005e48:	08005eed 	.word	0x08005eed
 8005e4c:	08005f1d 	.word	0x08005f1d
 8005e50:	08005f1d 	.word	0x08005f1d
 8005e54:	08005f1d 	.word	0x08005f1d
 8005e58:	08005f1d 	.word	0x08005f1d
 8005e5c:	08005f1d 	.word	0x08005f1d
 8005e60:	08005f1d 	.word	0x08005f1d
 8005e64:	08005f1d 	.word	0x08005f1d
 8005e68:	08005ef5 	.word	0x08005ef5
 8005e6c:	08005f1d 	.word	0x08005f1d
 8005e70:	08005f1d 	.word	0x08005f1d
 8005e74:	08005f1d 	.word	0x08005f1d
 8005e78:	08005f1d 	.word	0x08005f1d
 8005e7c:	08005f1d 	.word	0x08005f1d
 8005e80:	08005f1d 	.word	0x08005f1d
 8005e84:	08005f1d 	.word	0x08005f1d
 8005e88:	08005efd 	.word	0x08005efd
 8005e8c:	08005f1d 	.word	0x08005f1d
 8005e90:	08005f1d 	.word	0x08005f1d
 8005e94:	08005f1d 	.word	0x08005f1d
 8005e98:	08005f1d 	.word	0x08005f1d
 8005e9c:	08005f1d 	.word	0x08005f1d
 8005ea0:	08005f1d 	.word	0x08005f1d
 8005ea4:	08005f1d 	.word	0x08005f1d
 8005ea8:	08005f05 	.word	0x08005f05
 8005eac:	08005f1d 	.word	0x08005f1d
 8005eb0:	08005f1d 	.word	0x08005f1d
 8005eb4:	08005f1d 	.word	0x08005f1d
 8005eb8:	08005f1d 	.word	0x08005f1d
 8005ebc:	08005f1d 	.word	0x08005f1d
 8005ec0:	08005f1d 	.word	0x08005f1d
 8005ec4:	08005f1d 	.word	0x08005f1d
 8005ec8:	08005f0d 	.word	0x08005f0d
 8005ecc:	08005f1d 	.word	0x08005f1d
 8005ed0:	08005f1d 	.word	0x08005f1d
 8005ed4:	08005f1d 	.word	0x08005f1d
 8005ed8:	08005f1d 	.word	0x08005f1d
 8005edc:	08005f1d 	.word	0x08005f1d
 8005ee0:	08005f1d 	.word	0x08005f1d
 8005ee4:	08005f1d 	.word	0x08005f1d
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef2:	e222      	b.n	800633a <UART_SetConfig+0x5a6>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efa:	e21e      	b.n	800633a <UART_SetConfig+0x5a6>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e21a      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0a:	e216      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f12:	e212      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f14:	2340      	movs	r3, #64	; 0x40
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1a:	e20e      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e20a      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a69      	ldr	r2, [pc, #420]	; (80060d0 <UART_SetConfig+0x33c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d130      	bne.n	8005f90 <UART_SetConfig+0x1fc>
 8005f2e:	4b67      	ldr	r3, [pc, #412]	; (80060cc <UART_SetConfig+0x338>)
 8005f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	d826      	bhi.n	8005f88 <UART_SetConfig+0x1f4>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0x1ac>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f59 	.word	0x08005f59
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	08005f69 	.word	0x08005f69
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5e:	e1ec      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f66:	e1e8      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6e:	e1e4      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f76:	e1e0      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f78:	2320      	movs	r3, #32
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e1dc      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f80:	2340      	movs	r3, #64	; 0x40
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f86:	e1d8      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e1d4      	b.n	800633a <UART_SetConfig+0x5a6>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a4f      	ldr	r2, [pc, #316]	; (80060d4 <UART_SetConfig+0x340>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d130      	bne.n	8005ffc <UART_SetConfig+0x268>
 8005f9a:	4b4c      	ldr	r3, [pc, #304]	; (80060cc <UART_SetConfig+0x338>)
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	2b05      	cmp	r3, #5
 8005fa4:	d826      	bhi.n	8005ff4 <UART_SetConfig+0x260>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <UART_SetConfig+0x218>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fc5 	.word	0x08005fc5
 8005fb0:	08005fcd 	.word	0x08005fcd
 8005fb4:	08005fd5 	.word	0x08005fd5
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fca:	e1b6      	b.n	800633a <UART_SetConfig+0x5a6>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd2:	e1b2      	b.n	800633a <UART_SetConfig+0x5a6>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e1ae      	b.n	800633a <UART_SetConfig+0x5a6>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e1aa      	b.n	800633a <UART_SetConfig+0x5a6>
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e1a6      	b.n	800633a <UART_SetConfig+0x5a6>
 8005fec:	2340      	movs	r3, #64	; 0x40
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e1a2      	b.n	800633a <UART_SetConfig+0x5a6>
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e19e      	b.n	800633a <UART_SetConfig+0x5a6>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a35      	ldr	r2, [pc, #212]	; (80060d8 <UART_SetConfig+0x344>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d130      	bne.n	8006068 <UART_SetConfig+0x2d4>
 8006006:	4b31      	ldr	r3, [pc, #196]	; (80060cc <UART_SetConfig+0x338>)
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b05      	cmp	r3, #5
 8006010:	d826      	bhi.n	8006060 <UART_SetConfig+0x2cc>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x284>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006031 	.word	0x08006031
 800601c:	08006039 	.word	0x08006039
 8006020:	08006041 	.word	0x08006041
 8006024:	08006049 	.word	0x08006049
 8006028:	08006051 	.word	0x08006051
 800602c:	08006059 	.word	0x08006059
 8006030:	2300      	movs	r3, #0
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e180      	b.n	800633a <UART_SetConfig+0x5a6>
 8006038:	2304      	movs	r3, #4
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e17c      	b.n	800633a <UART_SetConfig+0x5a6>
 8006040:	2308      	movs	r3, #8
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e178      	b.n	800633a <UART_SetConfig+0x5a6>
 8006048:	2310      	movs	r3, #16
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e174      	b.n	800633a <UART_SetConfig+0x5a6>
 8006050:	2320      	movs	r3, #32
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e170      	b.n	800633a <UART_SetConfig+0x5a6>
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e16c      	b.n	800633a <UART_SetConfig+0x5a6>
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e168      	b.n	800633a <UART_SetConfig+0x5a6>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <UART_SetConfig+0x348>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d142      	bne.n	80060f8 <UART_SetConfig+0x364>
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <UART_SetConfig+0x338>)
 8006074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b05      	cmp	r3, #5
 800607c:	d838      	bhi.n	80060f0 <UART_SetConfig+0x35c>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UART_SetConfig+0x2f0>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	0800609d 	.word	0x0800609d
 8006088:	080060a5 	.word	0x080060a5
 800608c:	080060ad 	.word	0x080060ad
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060e1 	.word	0x080060e1
 8006098:	080060e9 	.word	0x080060e9
 800609c:	2300      	movs	r3, #0
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e14a      	b.n	800633a <UART_SetConfig+0x5a6>
 80060a4:	2304      	movs	r3, #4
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e146      	b.n	800633a <UART_SetConfig+0x5a6>
 80060ac:	2308      	movs	r3, #8
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e142      	b.n	800633a <UART_SetConfig+0x5a6>
 80060b4:	2310      	movs	r3, #16
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e13e      	b.n	800633a <UART_SetConfig+0x5a6>
 80060bc:	cfff69f3 	.word	0xcfff69f3
 80060c0:	58000c00 	.word	0x58000c00
 80060c4:	11fff4ff 	.word	0x11fff4ff
 80060c8:	40011000 	.word	0x40011000
 80060cc:	58024400 	.word	0x58024400
 80060d0:	40004400 	.word	0x40004400
 80060d4:	40004800 	.word	0x40004800
 80060d8:	40004c00 	.word	0x40004c00
 80060dc:	40005000 	.word	0x40005000
 80060e0:	2320      	movs	r3, #32
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e6:	e128      	b.n	800633a <UART_SetConfig+0x5a6>
 80060e8:	2340      	movs	r3, #64	; 0x40
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ee:	e124      	b.n	800633a <UART_SetConfig+0x5a6>
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f6:	e120      	b.n	800633a <UART_SetConfig+0x5a6>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4acb      	ldr	r2, [pc, #812]	; (800642c <UART_SetConfig+0x698>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d176      	bne.n	80061f0 <UART_SetConfig+0x45c>
 8006102:	4bcb      	ldr	r3, [pc, #812]	; (8006430 <UART_SetConfig+0x69c>)
 8006104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800610a:	2b28      	cmp	r3, #40	; 0x28
 800610c:	d86c      	bhi.n	80061e8 <UART_SetConfig+0x454>
 800610e:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <UART_SetConfig+0x380>)
 8006110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006114:	080061b9 	.word	0x080061b9
 8006118:	080061e9 	.word	0x080061e9
 800611c:	080061e9 	.word	0x080061e9
 8006120:	080061e9 	.word	0x080061e9
 8006124:	080061e9 	.word	0x080061e9
 8006128:	080061e9 	.word	0x080061e9
 800612c:	080061e9 	.word	0x080061e9
 8006130:	080061e9 	.word	0x080061e9
 8006134:	080061c1 	.word	0x080061c1
 8006138:	080061e9 	.word	0x080061e9
 800613c:	080061e9 	.word	0x080061e9
 8006140:	080061e9 	.word	0x080061e9
 8006144:	080061e9 	.word	0x080061e9
 8006148:	080061e9 	.word	0x080061e9
 800614c:	080061e9 	.word	0x080061e9
 8006150:	080061e9 	.word	0x080061e9
 8006154:	080061c9 	.word	0x080061c9
 8006158:	080061e9 	.word	0x080061e9
 800615c:	080061e9 	.word	0x080061e9
 8006160:	080061e9 	.word	0x080061e9
 8006164:	080061e9 	.word	0x080061e9
 8006168:	080061e9 	.word	0x080061e9
 800616c:	080061e9 	.word	0x080061e9
 8006170:	080061e9 	.word	0x080061e9
 8006174:	080061d1 	.word	0x080061d1
 8006178:	080061e9 	.word	0x080061e9
 800617c:	080061e9 	.word	0x080061e9
 8006180:	080061e9 	.word	0x080061e9
 8006184:	080061e9 	.word	0x080061e9
 8006188:	080061e9 	.word	0x080061e9
 800618c:	080061e9 	.word	0x080061e9
 8006190:	080061e9 	.word	0x080061e9
 8006194:	080061d9 	.word	0x080061d9
 8006198:	080061e9 	.word	0x080061e9
 800619c:	080061e9 	.word	0x080061e9
 80061a0:	080061e9 	.word	0x080061e9
 80061a4:	080061e9 	.word	0x080061e9
 80061a8:	080061e9 	.word	0x080061e9
 80061ac:	080061e9 	.word	0x080061e9
 80061b0:	080061e9 	.word	0x080061e9
 80061b4:	080061e1 	.word	0x080061e1
 80061b8:	2301      	movs	r3, #1
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061be:	e0bc      	b.n	800633a <UART_SetConfig+0x5a6>
 80061c0:	2304      	movs	r3, #4
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c6:	e0b8      	b.n	800633a <UART_SetConfig+0x5a6>
 80061c8:	2308      	movs	r3, #8
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ce:	e0b4      	b.n	800633a <UART_SetConfig+0x5a6>
 80061d0:	2310      	movs	r3, #16
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d6:	e0b0      	b.n	800633a <UART_SetConfig+0x5a6>
 80061d8:	2320      	movs	r3, #32
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061de:	e0ac      	b.n	800633a <UART_SetConfig+0x5a6>
 80061e0:	2340      	movs	r3, #64	; 0x40
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e6:	e0a8      	b.n	800633a <UART_SetConfig+0x5a6>
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ee:	e0a4      	b.n	800633a <UART_SetConfig+0x5a6>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a8f      	ldr	r2, [pc, #572]	; (8006434 <UART_SetConfig+0x6a0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d130      	bne.n	800625c <UART_SetConfig+0x4c8>
 80061fa:	4b8d      	ldr	r3, [pc, #564]	; (8006430 <UART_SetConfig+0x69c>)
 80061fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	2b05      	cmp	r3, #5
 8006204:	d826      	bhi.n	8006254 <UART_SetConfig+0x4c0>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0x478>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006225 	.word	0x08006225
 8006210:	0800622d 	.word	0x0800622d
 8006214:	08006235 	.word	0x08006235
 8006218:	0800623d 	.word	0x0800623d
 800621c:	08006245 	.word	0x08006245
 8006220:	0800624d 	.word	0x0800624d
 8006224:	2300      	movs	r3, #0
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e086      	b.n	800633a <UART_SetConfig+0x5a6>
 800622c:	2304      	movs	r3, #4
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006232:	e082      	b.n	800633a <UART_SetConfig+0x5a6>
 8006234:	2308      	movs	r3, #8
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623a:	e07e      	b.n	800633a <UART_SetConfig+0x5a6>
 800623c:	2310      	movs	r3, #16
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006242:	e07a      	b.n	800633a <UART_SetConfig+0x5a6>
 8006244:	2320      	movs	r3, #32
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624a:	e076      	b.n	800633a <UART_SetConfig+0x5a6>
 800624c:	2340      	movs	r3, #64	; 0x40
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006252:	e072      	b.n	800633a <UART_SetConfig+0x5a6>
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625a:	e06e      	b.n	800633a <UART_SetConfig+0x5a6>
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a75      	ldr	r2, [pc, #468]	; (8006438 <UART_SetConfig+0x6a4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d130      	bne.n	80062c8 <UART_SetConfig+0x534>
 8006266:	4b72      	ldr	r3, [pc, #456]	; (8006430 <UART_SetConfig+0x69c>)
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b05      	cmp	r3, #5
 8006270:	d826      	bhi.n	80062c0 <UART_SetConfig+0x52c>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <UART_SetConfig+0x4e4>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	08006291 	.word	0x08006291
 800627c:	08006299 	.word	0x08006299
 8006280:	080062a1 	.word	0x080062a1
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	2300      	movs	r3, #0
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e050      	b.n	800633a <UART_SetConfig+0x5a6>
 8006298:	2304      	movs	r3, #4
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629e:	e04c      	b.n	800633a <UART_SetConfig+0x5a6>
 80062a0:	2308      	movs	r3, #8
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a6:	e048      	b.n	800633a <UART_SetConfig+0x5a6>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ae:	e044      	b.n	800633a <UART_SetConfig+0x5a6>
 80062b0:	2320      	movs	r3, #32
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b6:	e040      	b.n	800633a <UART_SetConfig+0x5a6>
 80062b8:	2340      	movs	r3, #64	; 0x40
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062be:	e03c      	b.n	800633a <UART_SetConfig+0x5a6>
 80062c0:	2380      	movs	r3, #128	; 0x80
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c6:	e038      	b.n	800633a <UART_SetConfig+0x5a6>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a5b      	ldr	r2, [pc, #364]	; (800643c <UART_SetConfig+0x6a8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d130      	bne.n	8006334 <UART_SetConfig+0x5a0>
 80062d2:	4b57      	ldr	r3, [pc, #348]	; (8006430 <UART_SetConfig+0x69c>)
 80062d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d826      	bhi.n	800632c <UART_SetConfig+0x598>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0x550>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	080062fd 	.word	0x080062fd
 80062e8:	08006305 	.word	0x08006305
 80062ec:	0800630d 	.word	0x0800630d
 80062f0:	08006315 	.word	0x08006315
 80062f4:	0800631d 	.word	0x0800631d
 80062f8:	08006325 	.word	0x08006325
 80062fc:	2302      	movs	r3, #2
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e01a      	b.n	800633a <UART_SetConfig+0x5a6>
 8006304:	2304      	movs	r3, #4
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630a:	e016      	b.n	800633a <UART_SetConfig+0x5a6>
 800630c:	2308      	movs	r3, #8
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e012      	b.n	800633a <UART_SetConfig+0x5a6>
 8006314:	2310      	movs	r3, #16
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e00e      	b.n	800633a <UART_SetConfig+0x5a6>
 800631c:	2320      	movs	r3, #32
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e00a      	b.n	800633a <UART_SetConfig+0x5a6>
 8006324:	2340      	movs	r3, #64	; 0x40
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632a:	e006      	b.n	800633a <UART_SetConfig+0x5a6>
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e002      	b.n	800633a <UART_SetConfig+0x5a6>
 8006334:	2380      	movs	r3, #128	; 0x80
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3f      	ldr	r2, [pc, #252]	; (800643c <UART_SetConfig+0x6a8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	f040 80f8 	bne.w	8006536 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006346:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800634a:	2b20      	cmp	r3, #32
 800634c:	dc46      	bgt.n	80063dc <UART_SetConfig+0x648>
 800634e:	2b02      	cmp	r3, #2
 8006350:	f2c0 8082 	blt.w	8006458 <UART_SetConfig+0x6c4>
 8006354:	3b02      	subs	r3, #2
 8006356:	2b1e      	cmp	r3, #30
 8006358:	d87e      	bhi.n	8006458 <UART_SetConfig+0x6c4>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <UART_SetConfig+0x5cc>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	080063e3 	.word	0x080063e3
 8006364:	08006459 	.word	0x08006459
 8006368:	080063eb 	.word	0x080063eb
 800636c:	08006459 	.word	0x08006459
 8006370:	08006459 	.word	0x08006459
 8006374:	08006459 	.word	0x08006459
 8006378:	080063fb 	.word	0x080063fb
 800637c:	08006459 	.word	0x08006459
 8006380:	08006459 	.word	0x08006459
 8006384:	08006459 	.word	0x08006459
 8006388:	08006459 	.word	0x08006459
 800638c:	08006459 	.word	0x08006459
 8006390:	08006459 	.word	0x08006459
 8006394:	08006459 	.word	0x08006459
 8006398:	0800640b 	.word	0x0800640b
 800639c:	08006459 	.word	0x08006459
 80063a0:	08006459 	.word	0x08006459
 80063a4:	08006459 	.word	0x08006459
 80063a8:	08006459 	.word	0x08006459
 80063ac:	08006459 	.word	0x08006459
 80063b0:	08006459 	.word	0x08006459
 80063b4:	08006459 	.word	0x08006459
 80063b8:	08006459 	.word	0x08006459
 80063bc:	08006459 	.word	0x08006459
 80063c0:	08006459 	.word	0x08006459
 80063c4:	08006459 	.word	0x08006459
 80063c8:	08006459 	.word	0x08006459
 80063cc:	08006459 	.word	0x08006459
 80063d0:	08006459 	.word	0x08006459
 80063d4:	08006459 	.word	0x08006459
 80063d8:	0800644b 	.word	0x0800644b
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d037      	beq.n	8006450 <UART_SetConfig+0x6bc>
 80063e0:	e03a      	b.n	8006458 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063e2:	f7fe f975 	bl	80046d0 <HAL_RCCEx_GetD3PCLK1Freq>
 80063e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063e8:	e03c      	b.n	8006464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe f984 	bl	80046fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f8:	e034      	b.n	8006464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063fa:	f107 0318 	add.w	r3, r7, #24
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fad0 	bl	80049a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006408:	e02c      	b.n	8006464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800640a:	4b09      	ldr	r3, [pc, #36]	; (8006430 <UART_SetConfig+0x69c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d016      	beq.n	8006444 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <UART_SetConfig+0x69c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	08db      	lsrs	r3, r3, #3
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	4a07      	ldr	r2, [pc, #28]	; (8006440 <UART_SetConfig+0x6ac>)
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006428:	e01c      	b.n	8006464 <UART_SetConfig+0x6d0>
 800642a:	bf00      	nop
 800642c:	40011400 	.word	0x40011400
 8006430:	58024400 	.word	0x58024400
 8006434:	40007800 	.word	0x40007800
 8006438:	40007c00 	.word	0x40007c00
 800643c:	58000c00 	.word	0x58000c00
 8006440:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006444:	4b9d      	ldr	r3, [pc, #628]	; (80066bc <UART_SetConfig+0x928>)
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006448:	e00c      	b.n	8006464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800644a:	4b9d      	ldr	r3, [pc, #628]	; (80066c0 <UART_SetConfig+0x92c>)
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800644e:	e009      	b.n	8006464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006456:	e005      	b.n	8006464 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006462:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 81de 	beq.w	8006828 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	4a94      	ldr	r2, [pc, #592]	; (80066c4 <UART_SetConfig+0x930>)
 8006472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006476:	461a      	mov	r2, r3
 8006478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647a:	fbb3 f3f2 	udiv	r3, r3, r2
 800647e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648c:	429a      	cmp	r2, r3
 800648e:	d305      	bcc.n	800649c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006498:	429a      	cmp	r2, r3
 800649a:	d903      	bls.n	80064a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064a2:	e1c1      	b.n	8006828 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a6:	2200      	movs	r2, #0
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	60fa      	str	r2, [r7, #12]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	4a84      	ldr	r2, [pc, #528]	; (80066c4 <UART_SetConfig+0x930>)
 80064b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2200      	movs	r2, #0
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064c6:	f7f9 ff0f 	bl	80002e8 <__aeabi_uldivmod>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	f04f 0200 	mov.w	r2, #0
 80064d6:	f04f 0300 	mov.w	r3, #0
 80064da:	020b      	lsls	r3, r1, #8
 80064dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064e0:	0202      	lsls	r2, r0, #8
 80064e2:	6979      	ldr	r1, [r7, #20]
 80064e4:	6849      	ldr	r1, [r1, #4]
 80064e6:	0849      	lsrs	r1, r1, #1
 80064e8:	2000      	movs	r0, #0
 80064ea:	460c      	mov	r4, r1
 80064ec:	4605      	mov	r5, r0
 80064ee:	eb12 0804 	adds.w	r8, r2, r4
 80064f2:	eb43 0905 	adc.w	r9, r3, r5
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	469a      	mov	sl, r3
 80064fe:	4693      	mov	fp, r2
 8006500:	4652      	mov	r2, sl
 8006502:	465b      	mov	r3, fp
 8006504:	4640      	mov	r0, r8
 8006506:	4649      	mov	r1, r9
 8006508:	f7f9 feee 	bl	80002e8 <__aeabi_uldivmod>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4613      	mov	r3, r2
 8006512:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800651a:	d308      	bcc.n	800652e <UART_SetConfig+0x79a>
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006522:	d204      	bcs.n	800652e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800652a:	60da      	str	r2, [r3, #12]
 800652c:	e17c      	b.n	8006828 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006534:	e178      	b.n	8006828 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653e:	f040 80c5 	bne.w	80066cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006542:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006546:	2b20      	cmp	r3, #32
 8006548:	dc48      	bgt.n	80065dc <UART_SetConfig+0x848>
 800654a:	2b00      	cmp	r3, #0
 800654c:	db7b      	blt.n	8006646 <UART_SetConfig+0x8b2>
 800654e:	2b20      	cmp	r3, #32
 8006550:	d879      	bhi.n	8006646 <UART_SetConfig+0x8b2>
 8006552:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0x7c4>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	080065e3 	.word	0x080065e3
 800655c:	080065eb 	.word	0x080065eb
 8006560:	08006647 	.word	0x08006647
 8006564:	08006647 	.word	0x08006647
 8006568:	080065f3 	.word	0x080065f3
 800656c:	08006647 	.word	0x08006647
 8006570:	08006647 	.word	0x08006647
 8006574:	08006647 	.word	0x08006647
 8006578:	08006603 	.word	0x08006603
 800657c:	08006647 	.word	0x08006647
 8006580:	08006647 	.word	0x08006647
 8006584:	08006647 	.word	0x08006647
 8006588:	08006647 	.word	0x08006647
 800658c:	08006647 	.word	0x08006647
 8006590:	08006647 	.word	0x08006647
 8006594:	08006647 	.word	0x08006647
 8006598:	08006613 	.word	0x08006613
 800659c:	08006647 	.word	0x08006647
 80065a0:	08006647 	.word	0x08006647
 80065a4:	08006647 	.word	0x08006647
 80065a8:	08006647 	.word	0x08006647
 80065ac:	08006647 	.word	0x08006647
 80065b0:	08006647 	.word	0x08006647
 80065b4:	08006647 	.word	0x08006647
 80065b8:	08006647 	.word	0x08006647
 80065bc:	08006647 	.word	0x08006647
 80065c0:	08006647 	.word	0x08006647
 80065c4:	08006647 	.word	0x08006647
 80065c8:	08006647 	.word	0x08006647
 80065cc:	08006647 	.word	0x08006647
 80065d0:	08006647 	.word	0x08006647
 80065d4:	08006647 	.word	0x08006647
 80065d8:	08006639 	.word	0x08006639
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d02e      	beq.n	800663e <UART_SetConfig+0x8aa>
 80065e0:	e031      	b.n	8006646 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e2:	f7fc fe3f 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 80065e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065e8:	e033      	b.n	8006652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ea:	f7fc fe51 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 80065ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065f0:	e02f      	b.n	8006652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe f880 	bl	80046fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006600:	e027      	b.n	8006652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006602:	f107 0318 	add.w	r3, r7, #24
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe f9cc 	bl	80049a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006610:	e01f      	b.n	8006652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006612:	4b2d      	ldr	r3, [pc, #180]	; (80066c8 <UART_SetConfig+0x934>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0320 	and.w	r3, r3, #32
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800661e:	4b2a      	ldr	r3, [pc, #168]	; (80066c8 <UART_SetConfig+0x934>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	4a24      	ldr	r2, [pc, #144]	; (80066bc <UART_SetConfig+0x928>)
 800662a:	fa22 f303 	lsr.w	r3, r2, r3
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006630:	e00f      	b.n	8006652 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006632:	4b22      	ldr	r3, [pc, #136]	; (80066bc <UART_SetConfig+0x928>)
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006636:	e00c      	b.n	8006652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006638:	4b21      	ldr	r3, [pc, #132]	; (80066c0 <UART_SetConfig+0x92c>)
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800663c:	e009      	b.n	8006652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006644:	e005      	b.n	8006652 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006650:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80e7 	beq.w	8006828 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	4a19      	ldr	r2, [pc, #100]	; (80066c4 <UART_SetConfig+0x930>)
 8006660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006664:	461a      	mov	r2, r3
 8006666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006668:	fbb3 f3f2 	udiv	r3, r3, r2
 800666c:	005a      	lsls	r2, r3, #1
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	441a      	add	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	fbb2 f3f3 	udiv	r3, r2, r3
 800667e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	2b0f      	cmp	r3, #15
 8006684:	d916      	bls.n	80066b4 <UART_SetConfig+0x920>
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800668c:	d212      	bcs.n	80066b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	b29b      	uxth	r3, r3
 8006692:	f023 030f 	bic.w	r3, r3, #15
 8006696:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	b29b      	uxth	r3, r3
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066a6:	4313      	orrs	r3, r2
 80066a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80066b0:	60da      	str	r2, [r3, #12]
 80066b2:	e0b9      	b.n	8006828 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066ba:	e0b5      	b.n	8006828 <UART_SetConfig+0xa94>
 80066bc:	03d09000 	.word	0x03d09000
 80066c0:	003d0900 	.word	0x003d0900
 80066c4:	08007744 	.word	0x08007744
 80066c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	dc49      	bgt.n	8006768 <UART_SetConfig+0x9d4>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	db7c      	blt.n	80067d2 <UART_SetConfig+0xa3e>
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d87a      	bhi.n	80067d2 <UART_SetConfig+0xa3e>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <UART_SetConfig+0x950>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	0800676f 	.word	0x0800676f
 80066e8:	08006777 	.word	0x08006777
 80066ec:	080067d3 	.word	0x080067d3
 80066f0:	080067d3 	.word	0x080067d3
 80066f4:	0800677f 	.word	0x0800677f
 80066f8:	080067d3 	.word	0x080067d3
 80066fc:	080067d3 	.word	0x080067d3
 8006700:	080067d3 	.word	0x080067d3
 8006704:	0800678f 	.word	0x0800678f
 8006708:	080067d3 	.word	0x080067d3
 800670c:	080067d3 	.word	0x080067d3
 8006710:	080067d3 	.word	0x080067d3
 8006714:	080067d3 	.word	0x080067d3
 8006718:	080067d3 	.word	0x080067d3
 800671c:	080067d3 	.word	0x080067d3
 8006720:	080067d3 	.word	0x080067d3
 8006724:	0800679f 	.word	0x0800679f
 8006728:	080067d3 	.word	0x080067d3
 800672c:	080067d3 	.word	0x080067d3
 8006730:	080067d3 	.word	0x080067d3
 8006734:	080067d3 	.word	0x080067d3
 8006738:	080067d3 	.word	0x080067d3
 800673c:	080067d3 	.word	0x080067d3
 8006740:	080067d3 	.word	0x080067d3
 8006744:	080067d3 	.word	0x080067d3
 8006748:	080067d3 	.word	0x080067d3
 800674c:	080067d3 	.word	0x080067d3
 8006750:	080067d3 	.word	0x080067d3
 8006754:	080067d3 	.word	0x080067d3
 8006758:	080067d3 	.word	0x080067d3
 800675c:	080067d3 	.word	0x080067d3
 8006760:	080067d3 	.word	0x080067d3
 8006764:	080067c5 	.word	0x080067c5
 8006768:	2b40      	cmp	r3, #64	; 0x40
 800676a:	d02e      	beq.n	80067ca <UART_SetConfig+0xa36>
 800676c:	e031      	b.n	80067d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800676e:	f7fc fd79 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8006772:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006774:	e033      	b.n	80067de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006776:	f7fc fd8b 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 800677a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800677c:	e02f      	b.n	80067de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800677e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006782:	4618      	mov	r0, r3
 8006784:	f7fd ffba 	bl	80046fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800678c:	e027      	b.n	80067de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800678e:	f107 0318 	add.w	r3, r7, #24
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe f906 	bl	80049a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800679c:	e01f      	b.n	80067de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800679e:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <UART_SetConfig+0xac0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067aa:	4b2a      	ldr	r3, [pc, #168]	; (8006854 <UART_SetConfig+0xac0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	08db      	lsrs	r3, r3, #3
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	4a28      	ldr	r2, [pc, #160]	; (8006858 <UART_SetConfig+0xac4>)
 80067b6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067bc:	e00f      	b.n	80067de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067be:	4b26      	ldr	r3, [pc, #152]	; (8006858 <UART_SetConfig+0xac4>)
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c2:	e00c      	b.n	80067de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067c4:	4b25      	ldr	r3, [pc, #148]	; (800685c <UART_SetConfig+0xac8>)
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c8:	e009      	b.n	80067de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d0:	e005      	b.n	80067de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067dc:	bf00      	nop
    }

    if (pclk != 0U)
 80067de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d021      	beq.n	8006828 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	4a1d      	ldr	r2, [pc, #116]	; (8006860 <UART_SetConfig+0xacc>)
 80067ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ee:	461a      	mov	r2, r3
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	441a      	add	r2, r3
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	fbb2 f3f3 	udiv	r3, r2, r3
 8006806:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	2b0f      	cmp	r3, #15
 800680c:	d909      	bls.n	8006822 <UART_SetConfig+0xa8e>
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006814:	d205      	bcs.n	8006822 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	b29a      	uxth	r2, r3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60da      	str	r2, [r3, #12]
 8006820:	e002      	b.n	8006828 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2201      	movs	r2, #1
 800682c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2201      	movs	r2, #1
 8006834:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2200      	movs	r2, #0
 800683c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2200      	movs	r2, #0
 8006842:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006844:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006848:	4618      	mov	r0, r3
 800684a:	3748      	adds	r7, #72	; 0x48
 800684c:	46bd      	mov	sp, r7
 800684e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006852:	bf00      	nop
 8006854:	58024400 	.word	0x58024400
 8006858:	03d09000 	.word	0x03d09000
 800685c:	003d0900 	.word	0x003d0900
 8006860:	08007744 	.word	0x08007744

08006864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01a      	beq.n	800697a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006962:	d10a      	bne.n	800697a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]
  }
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b098      	sub	sp, #96	; 0x60
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b8:	f7fa ff58 	bl	800186c <HAL_GetTick>
 80069bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d12f      	bne.n	8006a2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069d4:	2200      	movs	r2, #0
 80069d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f88e 	bl	8006afc <UART_WaitOnFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d022      	beq.n	8006a2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fa:	653b      	str	r3, [r7, #80]	; 0x50
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a04:	647b      	str	r3, [r7, #68]	; 0x44
 8006a06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e6      	bne.n	80069e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e063      	b.n	8006af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d149      	bne.n	8006ace <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a42:	2200      	movs	r2, #0
 8006a44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f857 	bl	8006afc <UART_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d03c      	beq.n	8006ace <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	623b      	str	r3, [r7, #32]
   return(result);
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
 8006a74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e6      	bne.n	8006a54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa6:	61fa      	str	r2, [r7, #28]
 8006aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	69b9      	ldr	r1, [r7, #24]
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e012      	b.n	8006af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3758      	adds	r7, #88	; 0x58
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0c:	e049      	b.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b14:	d045      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b16:	f7fa fea9 	bl	800186c <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d302      	bcc.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e048      	b.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d031      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d110      	bne.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2208      	movs	r2, #8
 8006b52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f839 	bl	8006bcc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e029      	b.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7c:	d111      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f81f 	bl	8006bcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e00f      	b.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4013      	ands	r3, r2
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	bf0c      	ite	eq
 8006bb2:	2301      	moveq	r3, #1
 8006bb4:	2300      	movne	r3, #0
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d0a6      	beq.n	8006b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b095      	sub	sp, #84	; 0x54
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e6      	bne.n	8006bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <UART_EndRxTransfer+0xc8>)
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3308      	adds	r3, #8
 8006c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e5      	bne.n	8006c06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d118      	bne.n	8006c74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f023 0310 	bic.w	r3, r3, #16
 8006c56:	647b      	str	r3, [r7, #68]	; 0x44
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6979      	ldr	r1, [r7, #20]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e6      	bne.n	8006c42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c88:	bf00      	nop
 8006c8a:	3754      	adds	r7, #84	; 0x54
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	effffffe 	.word	0xeffffffe

08006c98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <HAL_UARTEx_DisableFifoMode+0x16>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e027      	b.n	8006cfe <HAL_UARTEx_DisableFifoMode+0x66>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2224      	movs	r2, #36	; 0x24
 8006cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e02d      	b.n	8006d7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2224      	movs	r2, #36	; 0x24
 8006d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0201 	bic.w	r2, r2, #1
 8006d48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f850 	bl	8006e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e02d      	b.n	8006dfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2224      	movs	r2, #36	; 0x24
 8006daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0201 	bic.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f812 	bl	8006e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e24:	e031      	b.n	8006e8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e26:	2310      	movs	r3, #16
 8006e28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e2a:	2310      	movs	r3, #16
 8006e2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	0e5b      	lsrs	r3, r3, #25
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	0f5b      	lsrs	r3, r3, #29
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	7b3a      	ldrb	r2, [r7, #12]
 8006e52:	4911      	ldr	r1, [pc, #68]	; (8006e98 <UARTEx_SetNbDataToProcess+0x94>)
 8006e54:	5c8a      	ldrb	r2, [r1, r2]
 8006e56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e5a:	7b3a      	ldrb	r2, [r7, #12]
 8006e5c:	490f      	ldr	r1, [pc, #60]	; (8006e9c <UARTEx_SetNbDataToProcess+0x98>)
 8006e5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e60:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	7b7a      	ldrb	r2, [r7, #13]
 8006e70:	4909      	ldr	r1, [pc, #36]	; (8006e98 <UARTEx_SetNbDataToProcess+0x94>)
 8006e72:	5c8a      	ldrb	r2, [r1, r2]
 8006e74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e78:	7b7a      	ldrb	r2, [r7, #13]
 8006e7a:	4908      	ldr	r1, [pc, #32]	; (8006e9c <UARTEx_SetNbDataToProcess+0x98>)
 8006e7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	0800775c 	.word	0x0800775c
 8006e9c:	08007764 	.word	0x08007764

08006ea0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	f107 001c 	add.w	r0, r7, #28
 8006eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d120      	bne.n	8006efa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	4b2a      	ldr	r3, [pc, #168]	; (8006f74 <USB_CoreInit+0xd4>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d105      	bne.n	8006eee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 faac 	bl	800744c <USB_CoreReset>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
 8006ef8:	e01a      	b.n	8006f30 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 faa0 	bl	800744c <USB_CoreReset>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38
 8006f22:	e005      	b.n	8006f30 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d116      	bne.n	8006f64 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f44:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <USB_CoreInit+0xd8>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f043 0206 	orr.w	r2, r3, #6
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f70:	b004      	add	sp, #16
 8006f72:	4770      	bx	lr
 8006f74:	ffbdffbf 	.word	0xffbdffbf
 8006f78:	03ee0000 	.word	0x03ee0000

08006f7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f023 0201 	bic.w	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fba:	78fb      	ldrb	r3, [r7, #3]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d115      	bne.n	8006fec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fcc:	2001      	movs	r0, #1
 8006fce:	f7fa fc59 	bl	8001884 <HAL_Delay>
      ms++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fa29 	bl	8007430 <USB_GetMode>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d01e      	beq.n	8007022 <USB_SetCurrentMode+0x84>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b31      	cmp	r3, #49	; 0x31
 8006fe8:	d9f0      	bls.n	8006fcc <USB_SetCurrentMode+0x2e>
 8006fea:	e01a      	b.n	8007022 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d115      	bne.n	800701e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ffe:	2001      	movs	r0, #1
 8007000:	f7fa fc40 	bl	8001884 <HAL_Delay>
      ms++;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3301      	adds	r3, #1
 8007008:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa10 	bl	8007430 <USB_GetMode>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <USB_SetCurrentMode+0x84>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b31      	cmp	r3, #49	; 0x31
 800701a:	d9f0      	bls.n	8006ffe <USB_SetCurrentMode+0x60>
 800701c:	e001      	b.n	8007022 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e005      	b.n	800702e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b32      	cmp	r3, #50	; 0x32
 8007026:	d101      	bne.n	800702c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007038:	b084      	sub	sp, #16
 800703a:	b580      	push	{r7, lr}
 800703c:	b086      	sub	sp, #24
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007052:	2300      	movs	r3, #0
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	e009      	b.n	800706c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	3340      	adds	r3, #64	; 0x40
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	2200      	movs	r2, #0
 8007064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	3301      	adds	r3, #1
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b0e      	cmp	r3, #14
 8007070:	d9f2      	bls.n	8007058 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11c      	bne.n	80070b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007086:	f043 0302 	orr.w	r3, r3, #2
 800708a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	e005      	b.n	80070be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070c4:	461a      	mov	r2, r3
 80070c6:	2300      	movs	r3, #0
 80070c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d0:	4619      	mov	r1, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d8:	461a      	mov	r2, r3
 80070da:	680b      	ldr	r3, [r1, #0]
 80070dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d10c      	bne.n	80070fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070ea:	2100      	movs	r1, #0
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f965 	bl	80073bc <USB_SetDevSpeed>
 80070f2:	e008      	b.n	8007106 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070f4:	2101      	movs	r1, #1
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f960 	bl	80073bc <USB_SetDevSpeed>
 80070fc:	e003      	b.n	8007106 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80070fe:	2103      	movs	r1, #3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f95b 	bl	80073bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007106:	2110      	movs	r1, #16
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f8f3 	bl	80072f4 <USB_FlushTxFifo>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f91f 	bl	800735c <USB_FlushRxFifo>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712e:	461a      	mov	r2, r3
 8007130:	2300      	movs	r3, #0
 8007132:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713a:	461a      	mov	r2, r3
 800713c:	2300      	movs	r3, #0
 800713e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007146:	461a      	mov	r2, r3
 8007148:	2300      	movs	r3, #0
 800714a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800714c:	2300      	movs	r3, #0
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	e043      	b.n	80071da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007168:	d118      	bne.n	800719c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	461a      	mov	r2, r3
 800717e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	e013      	b.n	80071ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007192:	461a      	mov	r2, r3
 8007194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	e008      	b.n	80071ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	461a      	mov	r2, r3
 80071aa:	2300      	movs	r3, #0
 80071ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ba:	461a      	mov	r2, r3
 80071bc:	2300      	movs	r3, #0
 80071be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071cc:	461a      	mov	r2, r3
 80071ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	3301      	adds	r3, #1
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d3b7      	bcc.n	8007152 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071e2:	2300      	movs	r3, #0
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	e043      	b.n	8007270 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071fe:	d118      	bne.n	8007232 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	461a      	mov	r2, r3
 8007214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	e013      	b.n	8007244 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007228:	461a      	mov	r2, r3
 800722a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	e008      	b.n	8007244 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	461a      	mov	r2, r3
 8007240:	2300      	movs	r3, #0
 8007242:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	461a      	mov	r2, r3
 8007252:	2300      	movs	r3, #0
 8007254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007262:	461a      	mov	r2, r3
 8007264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	3301      	adds	r3, #1
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	429a      	cmp	r2, r3
 8007276:	d3b7      	bcc.n	80071e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007298:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d105      	bne.n	80072ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f043 0210 	orr.w	r2, r3, #16
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699a      	ldr	r2, [r3, #24]
 80072b0:	4b0e      	ldr	r3, [pc, #56]	; (80072ec <USB_DevInit+0x2b4>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f043 0208 	orr.w	r2, r3, #8
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d105      	bne.n	80072dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699a      	ldr	r2, [r3, #24]
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <USB_DevInit+0x2b8>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072e8:	b004      	add	sp, #16
 80072ea:	4770      	bx	lr
 80072ec:	803c3800 	.word	0x803c3800
 80072f0:	40000004 	.word	0x40000004

080072f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a13      	ldr	r2, [pc, #76]	; (8007358 <USB_FlushTxFifo+0x64>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d901      	bls.n	8007314 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e01b      	b.n	800734c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	daf2      	bge.n	8007302 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	019b      	lsls	r3, r3, #6
 8007324:	f043 0220 	orr.w	r2, r3, #32
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a08      	ldr	r2, [pc, #32]	; (8007358 <USB_FlushTxFifo+0x64>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d901      	bls.n	800733e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e006      	b.n	800734c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b20      	cmp	r3, #32
 8007348:	d0f0      	beq.n	800732c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	00030d40 	.word	0x00030d40

0800735c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a11      	ldr	r2, [pc, #68]	; (80073b8 <USB_FlushRxFifo+0x5c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d901      	bls.n	800737a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e018      	b.n	80073ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	daf2      	bge.n	8007368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2210      	movs	r2, #16
 800738a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <USB_FlushRxFifo+0x5c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d901      	bls.n	800739e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e006      	b.n	80073ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b10      	cmp	r3, #16
 80073a8:	d0f0      	beq.n	800738c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	00030d40 	.word	0x00030d40

080073bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073dc:	4313      	orrs	r3, r2
 80073de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007408:	f023 0303 	bic.w	r3, r3, #3
 800740c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800741c:	f043 0302 	orr.w	r3, r3, #2
 8007420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f003 0301 	and.w	r3, r3, #1
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4a13      	ldr	r2, [pc, #76]	; (80074b0 <USB_CoreReset+0x64>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d901      	bls.n	800746a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e01b      	b.n	80074a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	daf2      	bge.n	8007458 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f043 0201 	orr.w	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3301      	adds	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <USB_CoreReset+0x64>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d901      	bls.n	8007494 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e006      	b.n	80074a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b01      	cmp	r3, #1
 800749e:	d0f0      	beq.n	8007482 <USB_CoreReset+0x36>

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	00030d40 	.word	0x00030d40

080074b4 <__cxa_pure_virtual>:
 80074b4:	b508      	push	{r3, lr}
 80074b6:	f000 f80d 	bl	80074d4 <_ZSt9terminatev>

080074ba <_ZN10__cxxabiv111__terminateEPFvvE>:
 80074ba:	b508      	push	{r3, lr}
 80074bc:	4780      	blx	r0
 80074be:	f000 f80e 	bl	80074de <abort>
	...

080074c4 <_ZSt13get_terminatev>:
 80074c4:	4b02      	ldr	r3, [pc, #8]	; (80074d0 <_ZSt13get_terminatev+0xc>)
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	f3bf 8f5b 	dmb	ish
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	24000010 	.word	0x24000010

080074d4 <_ZSt9terminatev>:
 80074d4:	b508      	push	{r3, lr}
 80074d6:	f7ff fff5 	bl	80074c4 <_ZSt13get_terminatev>
 80074da:	f7ff ffee 	bl	80074ba <_ZN10__cxxabiv111__terminateEPFvvE>

080074de <abort>:
 80074de:	b508      	push	{r3, lr}
 80074e0:	2006      	movs	r0, #6
 80074e2:	f000 f86b 	bl	80075bc <raise>
 80074e6:	2001      	movs	r0, #1
 80074e8:	f7fa f8ef 	bl	80016ca <_exit>

080074ec <__errno>:
 80074ec:	4b01      	ldr	r3, [pc, #4]	; (80074f4 <__errno+0x8>)
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	24000014 	.word	0x24000014

080074f8 <__libc_init_array>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4d0d      	ldr	r5, [pc, #52]	; (8007530 <__libc_init_array+0x38>)
 80074fc:	4c0d      	ldr	r4, [pc, #52]	; (8007534 <__libc_init_array+0x3c>)
 80074fe:	1b64      	subs	r4, r4, r5
 8007500:	10a4      	asrs	r4, r4, #2
 8007502:	2600      	movs	r6, #0
 8007504:	42a6      	cmp	r6, r4
 8007506:	d109      	bne.n	800751c <__libc_init_array+0x24>
 8007508:	4d0b      	ldr	r5, [pc, #44]	; (8007538 <__libc_init_array+0x40>)
 800750a:	4c0c      	ldr	r4, [pc, #48]	; (800753c <__libc_init_array+0x44>)
 800750c:	f000 f872 	bl	80075f4 <_init>
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	2600      	movs	r6, #0
 8007516:	42a6      	cmp	r6, r4
 8007518:	d105      	bne.n	8007526 <__libc_init_array+0x2e>
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007520:	4798      	blx	r3
 8007522:	3601      	adds	r6, #1
 8007524:	e7ee      	b.n	8007504 <__libc_init_array+0xc>
 8007526:	f855 3b04 	ldr.w	r3, [r5], #4
 800752a:	4798      	blx	r3
 800752c:	3601      	adds	r6, #1
 800752e:	e7f2      	b.n	8007516 <__libc_init_array+0x1e>
 8007530:	08007774 	.word	0x08007774
 8007534:	08007774 	.word	0x08007774
 8007538:	08007774 	.word	0x08007774
 800753c:	0800777c 	.word	0x0800777c

08007540 <memcpy>:
 8007540:	440a      	add	r2, r1
 8007542:	4291      	cmp	r1, r2
 8007544:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007548:	d100      	bne.n	800754c <memcpy+0xc>
 800754a:	4770      	bx	lr
 800754c:	b510      	push	{r4, lr}
 800754e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007556:	4291      	cmp	r1, r2
 8007558:	d1f9      	bne.n	800754e <memcpy+0xe>
 800755a:	bd10      	pop	{r4, pc}

0800755c <memset>:
 800755c:	4402      	add	r2, r0
 800755e:	4603      	mov	r3, r0
 8007560:	4293      	cmp	r3, r2
 8007562:	d100      	bne.n	8007566 <memset+0xa>
 8007564:	4770      	bx	lr
 8007566:	f803 1b01 	strb.w	r1, [r3], #1
 800756a:	e7f9      	b.n	8007560 <memset+0x4>

0800756c <_raise_r>:
 800756c:	291f      	cmp	r1, #31
 800756e:	b538      	push	{r3, r4, r5, lr}
 8007570:	4604      	mov	r4, r0
 8007572:	460d      	mov	r5, r1
 8007574:	d904      	bls.n	8007580 <_raise_r+0x14>
 8007576:	2316      	movs	r3, #22
 8007578:	6003      	str	r3, [r0, #0]
 800757a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007582:	b112      	cbz	r2, 800758a <_raise_r+0x1e>
 8007584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007588:	b94b      	cbnz	r3, 800759e <_raise_r+0x32>
 800758a:	4620      	mov	r0, r4
 800758c:	f000 f830 	bl	80075f0 <_getpid_r>
 8007590:	462a      	mov	r2, r5
 8007592:	4601      	mov	r1, r0
 8007594:	4620      	mov	r0, r4
 8007596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800759a:	f000 b817 	b.w	80075cc <_kill_r>
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d00a      	beq.n	80075b8 <_raise_r+0x4c>
 80075a2:	1c59      	adds	r1, r3, #1
 80075a4:	d103      	bne.n	80075ae <_raise_r+0x42>
 80075a6:	2316      	movs	r3, #22
 80075a8:	6003      	str	r3, [r0, #0]
 80075aa:	2001      	movs	r0, #1
 80075ac:	e7e7      	b.n	800757e <_raise_r+0x12>
 80075ae:	2400      	movs	r4, #0
 80075b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075b4:	4628      	mov	r0, r5
 80075b6:	4798      	blx	r3
 80075b8:	2000      	movs	r0, #0
 80075ba:	e7e0      	b.n	800757e <_raise_r+0x12>

080075bc <raise>:
 80075bc:	4b02      	ldr	r3, [pc, #8]	; (80075c8 <raise+0xc>)
 80075be:	4601      	mov	r1, r0
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	f7ff bfd3 	b.w	800756c <_raise_r>
 80075c6:	bf00      	nop
 80075c8:	24000014 	.word	0x24000014

080075cc <_kill_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d07      	ldr	r5, [pc, #28]	; (80075ec <_kill_r+0x20>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	602b      	str	r3, [r5, #0]
 80075da:	f7fa f866 	bl	80016aa <_kill>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d102      	bne.n	80075e8 <_kill_r+0x1c>
 80075e2:	682b      	ldr	r3, [r5, #0]
 80075e4:	b103      	cbz	r3, 80075e8 <_kill_r+0x1c>
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	bd38      	pop	{r3, r4, r5, pc}
 80075ea:	bf00      	nop
 80075ec:	240006e8 	.word	0x240006e8

080075f0 <_getpid_r>:
 80075f0:	f7fa b853 	b.w	800169a <_getpid>

080075f4 <_init>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	bf00      	nop
 80075f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fa:	bc08      	pop	{r3}
 80075fc:	469e      	mov	lr, r3
 80075fe:	4770      	bx	lr

08007600 <_fini>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr
